{
  "api/_u_uxt_move_axis_constraint.html": {
    "href": "api/_u_uxt_move_axis_constraint.html",
    "title": "Class UUxtMoveAxisConstraint | UXT Documentation",
    "keywords": "Class UUxtMoveAxisConstraint Component for limiting the translation axes for Manipulator Usage: Attach to actor that the constraint should be applied to. Inheritance System::Object UActorComponent UUxtTransformConstraint UUxtMoveAxisConstraint Inherited Members UUxtTransformConstraint::HandType UUxtTransformConstraint::Initialize(const FTransform &WorldPose) UUxtTransformConstraint::InteractionMode UUxtTransformConstraint::TargetComponent UUxtTransformConstraint::WorldPoseOnManipulationStart Namespace : Assembly : .dll Syntax public: class UUxtMoveAxisConstraint : public xtTransformConstraint Fields | Improve this Doc View Source bUseLocalSpaceForConstraint Use local or global space for constraint calculations Declaration public: bool bUseLocalSpaceForConstraint= false Field Value Type Description bool | Improve this Doc View Source ConstraintOnMovement Defines the axis the movement constraint should be applied to. Declaration public: int32 ConstraintOnMovement= 0 Field Value Type Description int32 Methods | Improve this Doc View Source ApplyConstraint(FTransform &Transform) Applies constraints to transforms during manipulation Declaration public: virtual void ApplyConstraint(FTransform &Transform) const Parameters Type Name Description FTransform & Transform Overrides UUxtTransformConstraint::ApplyConstraint(FTransform &Transform) | Improve this Doc View Source GetConstraintType() Enabled manipulation modes. Declaration public: virtual EUxtTransformMode GetConstraintType() const Returns Type Description EUxtTransformMode Overrides UUxtTransformConstraint::GetConstraintType()"
  },
  "api/_u_uxt_min_max_scale_constraint.html": {
    "href": "api/_u_uxt_min_max_scale_constraint.html",
    "title": "Class UUxtMinMaxScaleConstraint | UXT Documentation",
    "keywords": "Class UUxtMinMaxScaleConstraint Constraint that limits the min/max scale. Inheritance System::Object UActorComponent UUxtTransformConstraint UUxtMinMaxScaleConstraint Inherited Members UUxtTransformConstraint::HandType UUxtTransformConstraint::InteractionMode UUxtTransformConstraint::TargetComponent UUxtTransformConstraint::WorldPoseOnManipulationStart Namespace : Assembly : .dll Syntax public: class UUxtMinMaxScaleConstraint : public xtTransformConstraint Fields | Improve this Doc View Source bRelativeToInitialScale Whether the min/max values should be relative to the scale at interaction start. Declaration public: bool bRelativeToInitialScale= false Field Value Type Description bool | Improve this Doc View Source MaxScale Maximum scale allowed Declaration public: float MaxScale= 2.0f Field Value Type Description float | Improve this Doc View Source MinScale Minimum scale allowed Declaration public: float MinScale= 0.2f Field Value Type Description float Methods | Improve this Doc View Source ApplyConstraint(FTransform &Transform) Applies constraints to transforms during manipulation Declaration public: virtual void ApplyConstraint(FTransform &Transform) const Parameters Type Name Description FTransform & Transform Overrides UUxtTransformConstraint::ApplyConstraint(FTransform &Transform) | Improve this Doc View Source GetConstraintType() Enabled manipulation modes. Declaration public: virtual EUxtTransformMode GetConstraintType() const Returns Type Description EUxtTransformMode Overrides UUxtTransformConstraint::GetConstraintType() | Improve this Doc View Source Initialize(const FTransform &WorldPose) Intended to be called on manipulation started Declaration public: virtual void Initialize(const FTransform &WorldPose) Parameters Type Name Description const FTransform & WorldPose Overrides UUxtTransformConstraint::Initialize(const FTransform &WorldPose)"
  },
  "api/_u_uxt_icon_brush_editor_utility_widget.html": {
    "href": "api/_u_uxt_icon_brush_editor_utility_widget.html",
    "title": "Class UUxtIconBrushEditorUtilityWidget | UXT Documentation",
    "keywords": "Class UUxtIconBrushEditorUtilityWidget Inheritance System::Object UEditorUtilityWidget UUxtIconBrushEditorUtilityWidget Namespace : Assembly : .dll Syntax public: class UUxtIconBrushEditorUtilityWidget Fields | Improve this Doc View Source TabID Gets unique identifier for the tab this EditorUtilityWidget was spawned into. Declaration protected: FName TabID Field Value Type Description FName Methods | Improve this Doc View Source GetIconBrushFont() Gets the font associated with the UUxtIconBrush. Declaration protected: UFont * GetIconBrushFont() const Returns Type Description UFont * | Improve this Doc View Source GetIconBrushString(FString &IconString) Gets the string associated with the UUxtIconBrush. Declaration protected: bool GetIconBrushString(FString &IconString) const Parameters Type Name Description FString & IconString Returns Type Description bool | Improve this Doc View Source HasValidPropertyHandle() Returns true if a non-null PropertyHandle is set. Declaration public: bool HasValidPropertyHandle() const Returns Type Description bool | Improve this Doc View Source OnPropertyHandleChanged() Event which triggers when the PropertyHandle is changed. Declaration protected: void OnPropertyHandleChanged() | Improve this Doc View Source SetIconBrushFont(const UFont *Font) Sets the font associated with the UUxtIconBrush. Declaration protected: bool SetIconBrushFont(const UFont *Font) Parameters Type Name Description const UFont * Font Returns Type Description bool | Improve this Doc View Source SetIconBrushString(const FString &IconString) Sets the string associated with the UUxtIconBrush. Declaration protected: bool SetIconBrushString(const FString &IconString) Parameters Type Name Description const FString & IconString Returns Type Description bool | Improve this Doc View Source SetPropertyHandle(TSharedRef<IPropertyHandle> InPropertyHandle) Sets the property handle which will be queried and altered for FUxtIconBrush properties. Declaration public: void SetPropertyHandle(TSharedRef<IPropertyHandle> InPropertyHandle) Parameters Type Name Description TSharedRef<IPropertyHandle> InPropertyHandle | Improve this Doc View Source SetTabID(FName ID) Sets the unique identifier for the tab this EditorUtilityWidget was spawned into. Declaration public: void SetTabID(FName ID) Parameters Type Name Description FName ID"
  },
  "api/_u_uxt_fixed_rotation_to_world_constraint.html": {
    "href": "api/_u_uxt_fixed_rotation_to_world_constraint.html",
    "title": "Class UUxtFixedRotationToWorldConstraint | UXT Documentation",
    "keywords": "Class UUxtFixedRotationToWorldConstraint Component for fixing the rotation of a manipulated object relative to the world Usage: Attach to actor that the constraint should be applied to. Inheritance System::Object UActorComponent UUxtTransformConstraint UUxtFixedRotationToWorldConstraint Inherited Members UUxtTransformConstraint::HandType UUxtTransformConstraint::Initialize(const FTransform &WorldPose) UUxtTransformConstraint::InteractionMode UUxtTransformConstraint::TargetComponent UUxtTransformConstraint::WorldPoseOnManipulationStart Namespace : Assembly : .dll Syntax public: class UUxtFixedRotationToWorldConstraint : public xtTransformConstraint Methods | Improve this Doc View Source ApplyConstraint(FTransform &Transform) Applies constraints to transforms during manipulation Declaration public: virtual void ApplyConstraint(FTransform &Transform) const Parameters Type Name Description FTransform & Transform Overrides UUxtTransformConstraint::ApplyConstraint(FTransform &Transform) | Improve this Doc View Source GetConstraintType() Enabled manipulation modes. Declaration public: virtual EUxtTransformMode GetConstraintType() const Returns Type Description EUxtTransformMode Overrides UUxtTransformConstraint::GetConstraintType()"
  },
  "api/_u_uxt_base_object_collection.html": {
    "href": "api/_u_uxt_base_object_collection.html",
    "title": "Class UUxtBaseObjectCollection | UXT Documentation",
    "keywords": "Class UUxtBaseObjectCollection Base scene component class for object collections Inheritance System::Object USceneComponent UUxtBaseObjectCollection Namespace : Assembly : .dll Syntax public: class UUxtBaseObjectCollection Fields | Improve this Doc View Source SortCollection Declaration public: FUxtSortScrollingObjectCollectionDelegate SortCollection Field Value Type Description FUxtSortScrollingObjectCollectionDelegate Methods | Improve this Doc View Source CollectAttachedActors() Collect array of actors that are currently attached to the actor that this component is a part of. Declaration protected: const TArray<AActor *> & CollectAttachedActors() Returns Type Description const TArray<AActor *> & | Improve this Doc View Source CompareString(const FString &LHS, const FString &RHS) Helper function to allow Blueprint class to easily compare a pair of string objects within sort. Declaration public: static bool CompareString(const FString &LHS, const FString &RHS) Parameters Type Name Description const FString & LHS const FString & RHS Returns Type Description bool | Improve this Doc View Source CompareText(const FText &LHS, const FText &RHS) Helper function to allow Blueprint class to easily compare a pair of text objects within sort. Declaration public: static bool CompareText(const FText &LHS, const FText &RHS) Parameters Type Name Description const FText & LHS const FText & RHS Returns Type Description bool | Improve this Doc View Source GetAttachedActors() Get the array of attached actors. Declaration protected: const TArray<AActor *> & GetAttachedActors() const Returns Type Description const TArray<AActor *> & | Improve this Doc View Source SetSortCallback(const FUxtSortScrollingObjectCollectionDelegate &Callback) Set the the callback function to be used by the sort to compare actor pairs. In order to see results of sorting with the editor it is necessary to enable run in editor in the functions details panel. Declaration public: void SetSortCallback(const FUxtSortScrollingObjectCollectionDelegate &Callback) Parameters Type Name Description const FUxtSortScrollingObjectCollectionDelegate & Callback"
  },
  "Docs/ReleaseNotes.html": {
    "href": "Docs/ReleaseNotes.html",
    "title": "Release Notes | UXT Documentation",
    "keywords": "UX Tools 0.11.0 release notes What's new Breaking changes Known issues Full change list This release of the UX Tools supports only HoloLens 2. Support for other MR platforms remains a goal for us and we are hoping to be able to deliver it in the near future. Unreal 4.26 required. What's new These are some of this release's highlights. For a more comprehensive list of changes see the full change list . Examples plugin UX Tools example scenes have been moved to a separate plugin to make it easier to incorporate them as a starting point for new projects. Improved hand menu activation using user gaze The palm-up constraint has gained the Require Gaze option to ensure the user is deliberately trying to use the constraint and help prevent false activations. This is particularly useful for world-locking hand menus as it prevents the menu from unintentionally re-attaching to the hand. Pinch slider improvements The pinch slider actor has gained a number of quality of life improvements. These include: Customizable minimum / maximum values. GetValue, SetValue and OnSliderUpdateValue exposed directly on the actor to allow easy access to the slider's value relative to the custom min / max value. (note: if using the underlying UxtPinchSliderComponent , it's value will still be in the range 0-1) Stepped movement along the slider's tick marks. Bounds control improvements Constraint support Manipulation constraints (i.e. derived from UUxtTransformConstraint ) now also apply to manipulations performed via bounds control , making it easier to produce a consistent behavior when manipulating transforms. Uniform scaling Uniform scaling now works as expected. Before After Improved affordance selection via hand ray Previously, bounding box affordances were only revealed when hovering directly over them or over the bounding box contents. This could make them difficult to select if the bounding box was not a tight fit. We now also reveal affordances when the ray hovers the box itself. Before After New scale constraint A new constraint ( UxtMinMaxScaleConstraint ) to limit how much an actor can be scaled down or up via bounds control and manipulation components. Improved editor categories We have reworked the editor categories used by UX Tools to produce a more clear, simple and consistent interface. Breaking changes UxtGenericManipulatorComponent The Target Component now uses a component picker to select its target. Due to this, the generic manipulator can no longer target components on other actors when being configured from the editor. The ManipulationModes setting on the generic manipulator has been moved up the hierarchy to the UxtGrabTargetComponent and renamed to GrabModes . Its associated enum has been renamed to EUxtGrabMode . This change means that the UxtGrabTargetComponent will now respond to its GrabModes and will only trigger grab/release events when its grab mode has been satisfied. (e.g. when using only two handed grabs, a grab event is only triggered when both hands are grabbing the object) UxtGrabTargetComponent The UxtGrabTargetComponent has been converted from a SceneComponent to an ActorComponent . This affects the classes derived from UxtGrabTargetComponent such as the UxtManipulatorComponentBase and the UxtGenericManipulatorComponent . Most blueprints will continue to work with no issues but any blueprints that access one of these components as a variable will need to have the component removed and re-added for them to compile. UxtHandConstraintComponent UUxtHandConstraintComponent::IsHandUsableForConstraint() is now a non-const member function. UxtPinchSliderActor As part of adding a customizable minimum / maximum slider value, the InitialValue property has been replaced with a Value property. As part of this change, the GetInitialValue() and SetInitialValue(...) functions on the UxtPinchSliderActor are now called GetValue() and SetValue(...) . Previous settings can be easily carried forward: Add +PropertyRedirects=(OldName=\"UxtPinchSliderActor.InitialValue\", NewName=\"UxtPinchSliderActor.Value\") to DefaultUXTools.ini . (found in the plugin's configuration folder) Re-save any levels with sliders to update their properties. Remove the property redirect from DefaultUXTools.ini . UxtTransformConstraint The UxtTransformConstraint has been converted from a SceneComponent to an ActorComponent . This affects the classes derived from UxtTransformConstraint such as the UxtFaceUserConstraint , the UxtFixedDistanceConstraint , the UxtFixedRotationToUserConstraint , the UxtFixedRotationToWorldConstraint , the UxtMaintainApparentSizeConstraint , the UxtMoveAxisConstraint and the UxtRotationAxisConstraint . Most blueprints will continue to work with no issues but any blueprints that access one of these components as a variable will need to have the component removed and re-added for them to compile. UxtBoundsControlComponent Configuring each affordance's action separately is no longer allowed so, if any feature relied on that, an extension to the UUxtBoundsControlComponent should be implemented instead. Besides that, the EUxtAffordanceAction::Resize has been removed, so only EUxtAffordanceAction::Scale (action of corner affordances) can scale the object in the direction that the grabbed affordance is on, leaving the opposite affordance pinned to its location at the start of the interaction. Locked Axes property in UUxtBoundsControlConfig data assets no longer exists. Therefore, if you were using the Locked Axes flags to constrain movement or rotation of an object, you should now add the appropriate UUxtMoveAxisConstraint or UUxtRotationAxisConstraint (respectively) instead. The MinimumBoundsScale and MaximumBoundsScale properties have been removed in favor of using the UxtMinMaxScaleConstraint for controlling this behavior. Known issues UxtGenericManipulatorComponent When the target component's rotation does not match its parent actor's rotation, the parent actors rotation will be applied to the target component when manipulation is started. Full change list Commit Description 1648ad01 Add examples as dependency 12e0c5a2 Roll back rotation constraint's modifications 253d2b9f Add enabled UXTools plugin to .uproject a9cd53ce Fix spaces in some categories bda99d59 Improve descriptions and labels in example scenes db6127f6 Refactor to make scale constraint easier e44c7782 Improve Bounds Control and constraints' docs f0199b94 Fix level change crash 3384b9d1 Remove AR Session workaround for MobilePreview 0acbbad0 Refactor/normalize all categories 1c77f51b Stepped slider gif + heading fixups 9f29c2ab Disabling unfinished \"Mask Logic\" in Scrolling Object Collection e42416f7 Moving Home Button to \"On Release\" 1b7a5a09 Clarify breaking changes after testing upgrade from 0.10 70adb554 Update CI editor version to 4.26.0 (release) ce9742c7 Adding plugin images. 2a0a5fb5 Implement min/max scale constraint d32355c3 Rewrite bounds control and fix rotation constraint 099b6115 Add collision box to BoundsControlComponent 7f58f198 Update version to 0.11.0 2afc85b1 Fixing invalid enum value metadata tags from UxtScrollingObjectCollection 692c3365 Fix one handed only manipulation not responding if grabbed by both hands f6588058 Update UXTools to UE4.26 0c4ccdcf Manipulator improvements 50a77125 Add include to fix CI build c8da2565 Display current git commit in the Loader scene (packaged game only) d2a184e0 Add gaze requirement to PalmUpConstraint and Hand Menu fe8e77aa Update docs with information about Examples plugin e7c91b2f Use 2D corner handle on Slate2D example bounds control c0947793 Enable eye tracking in UXToolsGame package 01562b9c Slider improvements d5271e7c Update editor version to 4.25.4 c31e8318 Move Examples into a separate plugin 3b6173fe Cook Warning Fixes 0b84cca9 Enable debug info in CI package and add symbols to artifact eda87709 Export all public interfaces e62fbc89 Removing all built data and changing levels to not generate static lighting data. 6ad0acf8 Introduce roll for vertical normals"
  },
  "Docs/PressableButton.html": {
    "href": "Docs/PressableButton.html",
    "title": "Pressable Button | UXT Documentation",
    "keywords": "Pressable button A button gives the user a way to trigger an immediate action. It is one of the most foundational components in mixed reality. Creating a pressable button from scratch The first step of creating a button from scratch is adding the UxtPressableButtonComponent to an actor blueprint. This is a low level component that drives button logic. This is followed by creating some moving visuals. Moving visuals are essential for pressable button interaction as they're visualizing pressed and released state. Add a StaticMeshComponent (or any SceneComponent ) to the actor and set the visuals property of the UxtPressableButtonComponent to reference this new mesh. Also ensure that the local positive x-axis of this mesh component points in the direction the button is expected to be pushed. Any component children of this mesh will move along with it as the button is pushed. It is important to note that the UxtPressableButtonComponent uses the component assigned to the visuals property to construct a BoxComponent that is used for poke and far interactions. The UxtPressableButtonComponent uses the the visuals property component bounds, and child bounds, to create this box collider. If the button is configured correctly, the button should now react to presses during play. As well as this, the button planes visualizations will be visible in editor while UxtPressableButtonComponent is selected. These planes represent some of the properties of the button. The solid white plane is the front plane. if the finger crosses this plane from the front, the button will be pushed . The front plane aligns with the front face of the BoxComponent discussed earlier The dashed light grey plane is drawn so that it is PressedDistance away from the front plane. If the finger crosses this plane from the front, the button will be pressed . There is more information about this under Pressed Fraction . The solid dark grey plane is drawn so that it is MaxPushDistance away from the front plane. The moving visuals will not move beyond this plane. There is more information about this under Max Push Distance . A distinction is being made here between push and press . A button can be pushed without being pressed. A button will only fire OnButtonPressed once it has been pushed beyond the PressedDistance. If a button needs to respond to push, OnBeginPoke and OnEndPoke can be used. Some buttons may also have static visuals. Static visuals can be created by adding another mesh component, making sure that it is not a child of the moving visuals. Configuring the component hierarchy so that the buttons work should be simple. The only things that are essential are that the pressable button component is not a child of the moving visuals. Also ensure that only visuals that should move with press are children of the moving visuals. Here are some examples of configurations of the button hierarchy that will work: Although this button is behaving correctly, it's not doing anything useful. The pressable button events can be used in a blueprint in order to respond to press/release. There are a few useful events that can be used: OnBeginFocus : This event is called when a pointer starts giving focus to the button. OnUpdateFocus : This event is called for every tick that the button has focus from a pointer. A button will hold focus while it is being pressed. OnEndFocus : This event is called when a pointer stops giving focus to the button. OnBeginPoke : This event is called when a near pointer starts pushing the button. See description above for the difference between a push and a press. OnUpdatePoke : This event is called tick that a pointer is pushing the button. See description above for the difference between a push and a press. OnEndPoke : This event is called when a near pointer stops pushing the button. See description above for the difference between a push and a press. OnButtonPressed : Called when the current push distance of the button exceeds the pressed fraction . OnButtonReleased : Called when the current push distance of the button subceeds the released fraction . OnButtonEnabled : Called when the button is enabled. OnButtonDisabled : Called when the button is disabled. This will not raise a release event if the button is disabled while pressed. Here are some examples of these events in use in the SimpleButton blueprint sample provided with UXT: Button Actors To provide HoloLens 2 style button visuals and behaviors UX Tools contains an actor named named UxtPressableButtonActor . The UxtPressableButtonActor automatically constructs a customizable button front plate, back plate, icon, and label hierarchy. The button visuals are tied to custom shaders and materials, please see the graphics documentation for more information. Visual Configuration To aid in the time it takes to configure buttons, a handful of actor properties are exposed which react to changes made during edit time and runtime. For example, changing the Millimeter Size from (16, 32, 32) to (16, 64, 32) will automatically scale the button's front and back plates to create a wide button without effecting the button icon or label. Changing the Icon to a new unicode code point will generate the appropriate unicode character to index into a font containing the icon (e.g. Font_SegoeMDL2_Regular_42 ). Note, the font atlas will need to be updated to support any new icons which are not already present within the font atlas. Changing the Label will update the underlying text render component. Toggling the IsPlated checkbox will hide the back plate. Hiding the back plate is recommended when buttons are close enough to share a common back plate. To add a new icon, open the icon font, such as Font_SegoeMDL2_Regular_42 . Under \"Import Options\" select the \"Chars\" property. Paste your icon's unicode character into the \"Chars\" property and save the font. Finally reimport the font uasset. Scripting Logic Any blueprints which use UxtPressableButtonActor as a parent class (or any of its derived classes) can easily respond to button events by selecting the \"Button Component\" and binding to the available button events. In this case \"Hello\" will be printed when the button is pressed: If a blueprint needs to respond to a button event externally, such as a button child actor. This can be achieved with the below graph in the case of a child actor component: Acquire the child actor from the \"Child Button\" child actor component Get the \"Button Component\" from the child actor Bind the \"On Button Pressed\" event to a custom event In this case \"Hello\" will be printed when the button is pressed Button Actor Variants A handful of derived UxtPressableButtonActors exist to exhibit behavior not found on a typical pressable button. Non-typical behavior includes a binary button state achieved with the UUxtToggleGroup . To control groups of mutually exclusive UxtToggleStates like radio buttons . To make a group of buttons mutually exclusive supply a UUxtToggleGroup with a list of UxtToggleStates . UxtPressableToggleButton , displays an additional back plate based on the button's UxtToggleState checked property. UxtPressableCheckButton , displays a check box icon based on the button's UxtToggleState checked property. UxtPressableSwitchButton , displays a switch icon based on the button's UxtToggleState checked property. UxtPressableRadioButton , displays a radio circle icon based on the button's UxtToggleState checked property. Radio buttons are intended to be used with the UUxtToggleGroup to ensure only one button is checked at a time. Pressable Button Component Public Properties Push Behavior How the visuals should react when the button is pressed. Translate means the visuals move move along the local x-axis. Compress means the visuals will scale along the x-axis. Note, when compressed the visual's pivot should align with the back face of the compressible region. In other words, the plane visualized by the max push distance . Max Push Distance The maximum distance the button can move. Pressed Fraction The fraction of the maximum push distance that an unpressed button needs to be pushed in order for the button pressed event to fire. Released Fraction The fraction of the maximum push distance that a pressed button needs to be pushed in order for the button released event to fire. Recovery Speed The speed at which the button visuals return to the their resting position when no longer being touched by near interaction or selected using far interaction. Front Face Collision Margin The distance in front of the visuals front face to place the front of the button box collider. Visuals A reference to the scene component that represents the moving part of the button. The extents of the button collider will also be constructed using this scene component and child bounds. Collision Profile The collision profile used for the button collider, which is constructed using the moving visuals mesh component extents."
  },
  "Docs/PinchSlider.html": {
    "href": "Docs/PinchSlider.html",
    "title": "Pinch Slider | UXT Documentation",
    "keywords": "Pinch slider A pinch slider component allows the user to continuously change a value by moving the slider thumb along a track. Creating a pinch slider from scratch Create a new actor blueprint with a UxtPinchSliderComponent as the root component of the actor. Add a Sphere static mesh to the actor and call it Thumb . Set its scale to 0.025 . Select the UxtPinchSliderComponent and set the Visuals property to reference the sphere mesh. Add a Cylinder static mesh to the actor and call it Track . Set its scale to (0.01, 0.01, 0.5) and its X rotation to 90 degrees. If the slider is configured correctly it will look like this: Events Although the slider created above is behaving correctly, it's not doing anything useful. The UxtPinchSliderComponent has a number of events that can be used to respond to slider input: OnUpdateState : Event raised when slider changes state. OnBeginFocus : Event raised when a pointer starts focusing the slider. OnUpdateFocus : Event raised when a focusing pointer updates. OnEndFocus : Event raised when a pointer stops focusing the slider. OnBeginGrab : Event raised when slider is grabbed. OnUpdateValue : Event raised when slider's value changes. OnEndGrab : Event raised when slider is released. OnEnable : Event raised when slider is enabled. OnDisable : Event raised when slider is disabled. HoloLens 2 Pinch Slider UXTools provides a ready to use HoloLens 2 style pinch slider called the UxtPinchSliderActor . This slider can be configured and extended using Blueprints or C++. There is an example of this in BP_HandMenuSlider that can be found in the hand menu example scene."
  },
  "Docs/PalmUpConstraintComponent.html": {
    "href": "Docs/PalmUpConstraintComponent.html",
    "title": "Palm-Up Constraint Component | UXT Documentation",
    "keywords": "Palm-Up Constraint Component Hand constraint specialization that activates only when the palm is facing the player. Usage Create a PalmUpConstraintComponent on an Actor. See Hand constraint documentation for common settings. The Palm-Up constraint will activate when the palm normal is within a cone of size Max Palm Angle of the camera direction. Optional conditions Require Flat Hand : Requires the user to have their hand flat for the constraint to activate. Flatness is approximated by checking the triangle between palm, index finger tip and ring finger tip. If the triangle aligns to the palm within the Max Flat Hand Angle the hand is considered flat. Require Gaze : Requires the user to be looking at their hand for the constraint to activate. This will use eye gaze by default but will fall back to head gaze if no eye tracker is available. The activation area will shift towards the Hand Constraint's zone: Ulnar Side : The activation area shifts to the little finger metacarpal joint. Radial Side : The activation area shifts to between the index finger metacarpal and the thumb proximal joints. Above Finger Tips : The activation area shifts to between the middle finger tip and the ring finger tip joints. Below Wrist : The activation area shifts to the wrist joint."
  },
  "Docs/Installation.html": {
    "href": "Docs/Installation.html",
    "title": "Installation Guide | UXT Documentation",
    "keywords": "Installation Guide Prerequisites Before getting started with UX Tools, make sure that you have installed the required tools . Getting the prebuilt plugin If you just want to add UXT to your game project, the quickest way is through the packaged plugin provided in the release page: Download the packaged plugin zip from the latest release page (e.g. UXTools.0.11.0.zip ). Unzip the file directly into your project's Plugins folder. The Plugins folder should be located at the root of your project, where the .uproject file is. Create it if it doesn't exist. Make sure your game project is a code one, as opposed to blueprint-only, if you are planning to package it for HoloLens. Otherwise UE will fail to package it because it can't build the plugin sources. Open your project and enable the UX Tools plugin in the plugins menu. You now have access to all of the plugin features. The first thing you want to do is probably add a hand interaction actor per hand to your map or pawn so you can use your hands to drive the controls and behaviors provided in UXT. Next steps HoloLens 2 tutorial series Unreal development journey"
  },
  "Docs/InputSimulation.html": {
    "href": "Docs/InputSimulation.html",
    "title": "Input Simulation | UXT Documentation",
    "keywords": "Input Simulation Caution If you're new to MRTK or Mixed Reality development in Unreal, we recommend starting at the beginning of our Unreal development journey , which was specifically created to walk you through installation, core concepts, and usage. Input simulation is using mouse and keyboard input in the editor to simulate a Head-Mounted Display (HMD) as well as hand tracking and other features. This allows testing Mixed-Reality features, such as buttons and interactions, without a physical device. Input simulation is not intended as a long term substitute for actual hardware, but as a development tool to improve iteration times and allow testing in case of limited hardware availability. Input simulation is only enabled in the Unreal editor. Activation Input simulation will become active when playing in the Unreal editor and no head-mounted display (HMD) is connected. If a HMD is connected the input simulation is disabled and camera placement is controlled by the device. Controls Default controls for moving the camera are based on the DefaultPawn: W/S keys for moving forward/backward A/D keys for moving sideways Q/E keys for moving down/up Mouse movement controls head rotation In addition to default pawn movement there are virtual hands that can be controlled for simulating hand tracking: Hold Left Shift/Alt for controlling the left/right hand respectively. This disables head rotation with the mouse and moves the hand instead. Both hands can be controlled together by holding both control keys. T/Y keys for toggling hand visibility. UX Tools project settings contain an option to \"Start with Hands Enabled\". Hands can still be enabled with the T/Y keys even if they are not initially visible. Press the Left mouse button to perform a \"Pinch\" gesture. This also activates the \"grasp\" state of the hand controller, allowing object manipulation. Press the Middle mouse button to perform a \"Poke\" gesture. This can be used for poking buttons. Note that buttons can also be pressed by simply moving the hand towards the button, without performing any gestures. Holding the Right mouse button enables rotation of the controlled hands: X axis changes yaw angle. Y axis changes pitch angle. Scroll wheel changes roll angle. To reset the hand rotation press the visibility keys (T/Y) twice. This will reset the hand location and rotation to defaults. While holding Left Shift/Alt, press the Home key to perform a menu gesture, with a flat palm facing up. This is a quick way to open a hand menu without rotating the hand. Pressing the Home key again or a mouse button changes the pose back to default. Hand Animation Hand input is simulated with skeletal meshes that are animated according to user input. The main input simulation actor adds two instances of the skeletal hand mesh for the left and right hand respectively. The mesh asset is expected to model the right hand, while the left hand mesh is mirrored on the Y axis. An animation blueprint is used to toggle between different possible hand poses, such as a default relaxed hand, poking with the index finger, or pinching between thumb and index finger. Changing the current pose is bound to user input, usually the left and middle mouse buttons. The animation blueprint handles transition and blending between poses. After the mesh animation, the input simulation actor reads the position and rotation of bones matching the relevant hand joints by name (see EWMRHandKeypoint enum). This data is then passed to the input simulation subsystem to emulate device data when requested. Updating Hand Animation Assets The hand animation is best created from an FBX file. The file should contain: A mesh model for the right hand. A skeleton that animates the mesh. Bones in the skeleton that match the EWMRHandKeypoint enum by name: Palm, Wrist, ThumbMetacarpal, ThumbProximal, ThumbDistal, ThumbTip, IndexMetacarpal, etc.. Note that these bones do not necessarily have to deform the mesh, they only define the simulated joint positions. However, the joint bones should be aligned with the visible mesh to avoid confusion. Animation poses for the relevant hand gestures: Flat, Relaxed, Poke, Pinch, Grab, PalmUp, etc. The FBX file is imported, generating a mesh, skeleton, material(s), and animation assets. Open the hand animation asset that contains the desired hand poses. With Create Asset > Create PoseAsset > Current Animation create a pose asset that can blend between the various hand poses. Open the new pose asset and rename the relevant poses with meaningful names, e.g. \"Flat\", \"Relaxed\", \"Pinch\", \"Poke\". Open the InputSimulationHands_AnimInstance asset. This is the animation blueprint that drives the skeletal animation. In the AnimGraph find the PoseAsset blend node and in the Details panel change the linked pose asset to the one created above."
  },
  "Docs/HandConstraintComponent.html": {
    "href": "Docs/HandConstraintComponent.html",
    "title": "Hand Constraint Component | UXT Documentation",
    "keywords": "Hand Constraint Component Component that calculates a goal based on hand tracking and moves the owning actor. It keeps the actor position and rotation aligned with a hand while avoiding overlap with fingers. Several zones around the hand supported: radial and ulnar for the thumb side and its opposite, as well as above and below the hand. The goal position is computed by casting a ray in the direction of the one at a bounding box around the hand joints. The constraint can be oriented on either the hand rotation alone or facing the player. Usage Create a HandConstraintComponent on an Actor. Set the Hand property to select which hand should be tracked. If 'Any Hand' is selected, the first tracked hand will be used and switch to the opposite when tracking is lost. The Zone defines the general area around the hand that the actor is placed in. GoalMargin can be used to increase the distance from the hand for larger actors. At runtime the component will move the actor towards the goal position and rotation. Movement can be disabled with the MoveOwningActor option. In that case the goal position and rotation will still be computed and can be used in blueprints. The component will by default use smoothing to avoid jittering artifacts resulting from hand tracking. Smoothing can be disabled by setting LocationLerpTime and/or RotationLerpTime properties to zero. The higher these values, the more smoothing will be applied and the longer it will take for the actor to reach the goal. Rotation Modes Two main rotation modes are supported: Look-at-Camera : The actor X axis is oriented towards the player head, with Z in the global \"up\" direction. Hand Rotation : The actor aligns with the palm. X axis is facing the inside of the palm, Z aligns with the direction of fingers. The zone direction and the rotation can be configured independently. For example the zone offset can be aligned with the palm, while the rotation faces the camera: Constraint Activation The constraint becomes active when a usable hand could be found, which matches the Hand property. If Any Hand is selected, either left or right hand will be used, depending on which hand starts tracking first. If the current Tracked Hand is lost the opposite hand will be used. The constraint becomes inactive when neither hand is found. By default the constraint will always have a valid goal if a usable hand is tracking. Extended constraint variants can have further conditions, such as the Palm-Up constraint which only becomes when the hand faces the camera. Events Constraint Activated/Deactivated : Called when the constraint becomes active or inactive respectively. The basic HandConstraintComponent only deactivates when hand tracking is lost. Extended hand constraint classes can have additional conditions. For example the Palm-Up constraint also requires that the palm is facing the camera. Begin/End Tracking : Called when a hand starts tracking or when tracking is lost. This includes the case where the Hand settings is 'Any Hand' and tracking switches from one hand to the other. In this case first the EndTracking event for the old hand is called and then the BeginTracking event for the new hand."
  },
  "Docs/Graphics.html": {
    "href": "Docs/Graphics.html",
    "title": "Graphics | UXT Documentation",
    "keywords": "Graphics UX Tools contains a handful of graphics and rendering techniques to implement Fluent Design System principles, and remain performant on Mixed Reality devices. Materials Many mobile stereo headsets are fill rate bound, to reduce fill rate materials should be as simple, or inexpensive as possible. A handful of inexpensive material instances are included with the toolkit which derive from M_SimpleLit_Color. M_SimpleLit_Color uses the Unreal unlit lighting model to avoid extra computations, but uses the MF_SimpleLit material function to perform basic realtime Blinn-Phong lighting on a single (virtual) directional light. The virtual directional light's properties are passed in via the MPC_UXSettings material parameter collection . Note Unreal's built in light types are not included within MF_SimpleLit calculations. MPC_UXSettings contains global shader constants that are used to drive lighting effects as well as UI effects. For example, the left and right pointer positions are updated each frame within MPC_UXSettings to drive lighting effects emitted from the hand interaction pointers. Shaders To achieve visual parity with the HoloLens 2 shell, a couple of shaders exist in the \"UX Tools plugin root\"/Shaders/Public/ directory. A shader source directory mapping is created by the UX Tools plugin to allow any UE4 material to reference shaders within that directory as /Plugin/UXTools/Public/Shader_Name.ush . Note Note, many of the shaders within this directory are generated from an external tool, and are not formatted for user readability. A couple of shaders are described below in more detail, as well as any special considerations which must be made when using the shader. Button Box The M_ButtonBox material and Bounding_Box.ush shader generate glowing edges on a cube with optional circular blob. The blob appears only on the active face set with the Blob_Active_Face parameter. The shader must be used with the correct corresponding cube model. The special model enables the shader to render only the visible areas of the surfaces. The last two letters of the SM_FrontPlate_xx model name indicates which face is active. For example, SM_FrontPlate_PY indicates the positive y-axis. Rounded Edge Thick The M_RoundedEdgeThick material and Rounded_Edge_Thick.ush shader are designed to render a quad as an outlined rounded rectangle with depth. The shader works with a special mesh that approximates the round corners using triangles and includes additional information for anti-aliased silhouette edges. UX Tools includes several models named SM_BackPlateRoundedThick_# where # is the number of triangles per rounded corner. Use the model with the fewest triangles that works for your scenario. Note Note, the SM_BackPlateRoundedThick_# mesh and Rounded_Edge_Thick.ush shader assume the local y-axis is up, and not Unreal's traditional z-axis up. These assumptions were made when the Rounded_Edge_Thick.ush shader was authored in a separate content creation tool. To resolve these assumptions the UxtBackPlateComponent and Rounded_Edge_Thick.ush perform an additional rotation. This rotation is transparent to the end user and should not effect anything but advanced use cases. Thick Finger Ring The M_FingerTipRing material and Thick_Finger_Ring.ush shader with the M_FingerTipRing model are used to create a volumetric finger tip affordance. Bounding Box The M_BoundsControl material and Bounding_Box.ush shader generate glowing edges on a cube with optional glowing blob and on/off transition effect. The shader must be used with the SM_BoundsControl model. The special models enable the shader to render only the visible areas of the box surfaces. The above shader uses additive blending; if alpha blending is preferred a second method of creating the Bounding Box effects exists which works by splitting the box affordance into parts: The finger tip blob visuals are rendered using the SM_BoundsControlFace model with the M_BoundsControlFace material. Six copies of the SM_BoundsControlEdge model are scaled and offset to create the bound edges and rendered with the M_BoundsControlEdge shader. See also Pressable button component Bounds Control"
  },
  "Docs/BoundsControl.html": {
    "href": "Docs/BoundsControl.html",
    "title": "Bounds Control | UXT Documentation",
    "keywords": "BoundsControl Bounds Control is a component that allows the user to change the position, rotation, and size of an actor, using affordances . Affordances are grabbable areas on corners (scale), edges (rotate), and faces (translate) of the actor's bounding box. To enable bounds control on an actor, add an UUxtBoundsControlComponent to it. The component has a default configuration that can be tweaked to change the behavior and appearance as needed. Bounds Control Config UxtBoundsControlConfig data assets are used to configure: Affordances array. Each has: Placement . Enumerator with the position of the affordance around the actor. For example, CornerFrontTopLeft , EdgeBottomRight or FaceBack . See EUxtAffordancePlacement for a complete list. Rotation of the instanced mesh. IsSlate . Whether it should be considered a 2D element or not. If so, it won't scale along the X axis. UniformScaling . Whether uniform or non-uniform scaling is desired. There are some presets in BoundsControl/Presets : BoundsControlDefault : All corner and edge affordances with uniform scaling. BoundsControlSlate2D : Only front corners and edges, with non-uniform scaling. Integration with manipulator constraints The UUxtBoundsControlComponent works out of the box with the same constraint components that Manipulators use. For example, simply adding and configuring a UUxtRotationAxisConstraint component will prevent rotation around the appropriate axes when interacting via affordances. Affordance meshes At runtime a separate actor is created for displaying affordances. Each affordance is a StaticMesh component on the BoundsControlActor. The mesh used for each kind of affordance (Corner, Edge, Face, Center) can be changed on the bounds control component ( Corner Affordance Mesh etc.). When creating custom affordance meshes you can fine tune the orientation of each affordance by duplicating one of the preset layouts and modifying the Rotation properties. It is recommended to use simple box collision primitives to make affordances grabbable."
  },
  "Docs/WidgetComponent.html": {
    "href": "Docs/WidgetComponent.html",
    "title": "WidgetComponent | UXT Documentation",
    "keywords": "WidgetComponent The UXT widget component is used to make UXT interaction work with Unreal Engine's own widget component. Usage Create your widget as normal: Create a widget class blueprint asset, and design your UI there. Create an actor and add a UE4 widget component . Set the widget class to your widget asset. After doing this, you should be able to see your widget when you play in editor. However, you will not be able to interact with the widget using the simulated hands. Stop play in editor and add a UXT widget component to your actor: This should be all the set up required. When you play in editor now, you should be able to use far interaction and poke to interact with the ui elements in your widget actor. Behavior Details The UXT widget component only supports far interaction and near poke, and not near grab. For this reason, some UI elements may not behave like their UXT counterparts. For example, the slider widget follows the poking finger, whereas the UXT pinch slider requires a grab for near interaction."
  },
  "Docs/Utilities.html": {
    "href": "Docs/Utilities.html",
    "title": "Utilities | UXT Documentation",
    "keywords": "Utilities UX Tools contains a handful of utilities that augment the Unreal Engine editor. Editor Utility Blueprints Editor utilities can be authored using scripted actions . Scripted actions are accessed by right-clicking actors or assets. Align Actors The Align Actors action aides in the layout of UX controls, or any actor type. To access the action select multiple actors you wish to align. Then right-click in a viewport or outliner window. Finally, select Scripted Actions > Align Actors . A properties window will pop up prompting for alignment settings. Note, the first actor selected is used as the alignment origin. The actor's bounds are used to ensure actors don't interpenetrate when aligned. Editor Utility Widgets Editor utility widgets can be used to modify the User Interface (UI) of the Unreal Editor. Icon Brush Editor The Icon Brush Editor editor utility widget aides in editing a UxtIconBrush by visually searching though the characters in a UFont . To open the editor click the \"Open Icon Brush Editor\" button from any UxtIconBrush details panel. Once opened, the editor should display a window similar to the one below: Selecting different icons, outlined in green, will apply the icon selection to the current UxtIconBrush . The Icon Brush Editor comes in handy when selecting new icons for controls. The BP_ButtonHoloLens2 blueprint makes the viewer accessible via the top level details panel :"
  },
  "api/_f_uxt_input_animation_utils.html": {
    "href": "api/_f_uxt_input_animation_utils.html",
    "title": "Struct FUxtInputAnimationUtils | UXT Documentation",
    "keywords": "Struct FUxtInputAnimationUtils Namespace : Assembly : .dll Syntax public: struct FUxtInputAnimationUtils Fields | Improve this Doc View Source InputPitchScale Declaration public: static const float InputPitchScale= 1.75f Field Value Type Description const float | Improve this Doc View Source InputRollScale Declaration public: static const float InputRollScale= 5.0f Field Value Type Description const float | Improve this Doc View Source InputYawScale Declaration public: static const float InputYawScale= 2.5f Field Value Type Description const float Methods | Improve this Doc View Source GetHandRotationInputValue(EAxis::Type RotationAxis, float MoveValue) Scale hand rotation input value. Declaration public: static float GetHandRotationInputValue(EAxis::Type RotationAxis, float MoveValue) Parameters Type Name Description EAxis::Type RotationAxis float MoveValue Returns Type Description float | Improve this Doc View Source GetHeadRotationInputValue(EAxis::Type RotationAxis, float MoveValue) Scale head rotation input value. Declaration public: static float GetHeadRotationInputValue(EAxis::Type RotationAxis, float MoveValue) Parameters Type Name Description EAxis::Type RotationAxis float MoveValue Returns Type Description float | Improve this Doc View Source GetInputRotationAxis(EAxis::Type MoveAxis) Select rotation axis for head or hand rotation modes. Declaration public: static EAxis::Type GetInputRotationAxis(EAxis::Type MoveAxis) Parameters Type Name Description EAxis::Type MoveAxis Returns Type Description EAxis::Type"
  },
  "api/_u_uxt_rotation_axis_constraint.html": {
    "href": "api/_u_uxt_rotation_axis_constraint.html",
    "title": "Class UUxtRotationAxisConstraint | UXT Documentation",
    "keywords": "Class UUxtRotationAxisConstraint Component for limiting the rotation axes for Manipulator Usage: Attach to actor that the constraint should be applied to. Inheritance System::Object UActorComponent UUxtTransformConstraint UUxtRotationAxisConstraint Inherited Members UUxtTransformConstraint::HandType UUxtTransformConstraint::Initialize(const FTransform &WorldPose) UUxtTransformConstraint::InteractionMode UUxtTransformConstraint::TargetComponent UUxtTransformConstraint::WorldPoseOnManipulationStart Namespace : Assembly : .dll Syntax public: class UUxtRotationAxisConstraint : public xtTransformConstraint Fields | Improve this Doc View Source bUseLocalSpaceForConstraint Use local or global space for constraint calculations Declaration public: bool bUseLocalSpaceForConstraint= false Field Value Type Description bool | Improve this Doc View Source ConstraintOnRotation Defines the axis the rotation constraint should be applied to. Declaration public: int32 ConstraintOnRotation= 0 Field Value Type Description int32 Methods | Improve this Doc View Source ApplyConstraint(FTransform &Transform) Applies constraints to transforms during manipulation Declaration public: virtual void ApplyConstraint(FTransform &Transform) const Parameters Type Name Description FTransform & Transform Overrides UUxtTransformConstraint::ApplyConstraint(FTransform &Transform) | Improve this Doc View Source GetConstraintType() Enabled manipulation modes. Declaration public: virtual EUxtTransformMode GetConstraintType() const Returns Type Description EUxtTransformMode Overrides UUxtTransformConstraint::GetConstraintType()"
  },
  "api/_u_uxt_pressable_button_component.html": {
    "href": "api/_u_uxt_pressable_button_component.html",
    "title": "Class UUxtPressableButtonComponent | UXT Documentation",
    "keywords": "Class UUxtPressableButtonComponent Component that turns the actor it is attached to into a pressable rectangular button. Inheritance System::Object USceneComponent UUxtUIElementComponent UUxtPressableButtonComponent Inherited Members IUxtFarHandler::CanHandleFar(UPrimitiveComponent *Primitive) IUxtPokeHandler::CanHandlePoke(UPrimitiveComponent *Primitive) IUxtPokeTarget::GetClosestPoint(const UPrimitiveComponent *Primitive, const FVector &Point, FVector &OutClosestPoint, FVector &OutNormal) IUxtCollectionObject::GetFarTarget() IUxtPokeTarget::GetPokeBehaviour() IUxtCollectionObject::GetPokeTarget() UUxtUIElementComponent::GetUIVisibilityInHierarchy() UUxtUIElementComponent::GetUIVisibilitySelf() IUxtFarTarget::IsFarFocusable(const UPrimitiveComponent *Primitive) IUxtPokeTarget::IsPokeFocusable(const UPrimitiveComponent *Primitive) UUxtUIElementComponent::OnAttachmentChanged() IUxtPokeHandler::OnBeginPoke(UUxtNearPointerComponent *Pointer) IUxtPokeHandler::OnEndPoke(UUxtNearPointerComponent *Pointer) IUxtFarHandler::OnEnterFarFocus(UUxtFarPointerComponent *Pointer) IUxtPokeHandler::OnEnterPokeFocus(UUxtNearPointerComponent *Pointer) IUxtFarHandler::OnExitFarFocus(UUxtFarPointerComponent *Pointer) IUxtPokeHandler::OnExitPokeFocus(UUxtNearPointerComponent *Pointer) IUxtFarHandler::OnFarDragged(UUxtFarPointerComponent *Pointer) IUxtFarHandler::OnFarPressed(UUxtFarPointerComponent *Pointer) IUxtFarHandler::OnFarReleased(UUxtFarPointerComponent *Pointer) UUxtUIElementComponent::OnHideElement UUxtUIElementComponent::OnShowElement IUxtFarHandler::OnUpdatedFarFocus(UUxtFarPointerComponent *Pointer) IUxtPokeHandler::OnUpdatePoke(UUxtNearPointerComponent *Pointer) IUxtPokeHandler::OnUpdatePokeFocus(UUxtNearPointerComponent *Pointer) UUxtUIElementComponent::RefreshUIElement() UUxtUIElementComponent::SetUIVisibility(EUxtUIElementVisibility NewVisibility) UUxtUIElementComponent::UUxtUIElementComponent() Namespace : Assembly : .dll Syntax public: class UUxtPressableButtonComponent : public xtUIElementComponent, public xtPokeTarget, public xtPokeHandler, public xtFarTarget, public xtFarHandler, public xtCollectionObject Constructors | Improve this Doc View Source UUxtPressableButtonComponent() Declaration public: UUxtPressableButtonComponent() Fields | Improve this Doc View Source OnBeginFocus Event raised when a pointer starts focusing the button. WasFocused indicates if the button was already focused by another pointer. Declaration public: FUxtButtonBeginFocusDelegate OnBeginFocus Field Value Type Description FUxtButtonBeginFocusDelegate | Improve this Doc View Source OnBeginPoke Event raised when a pointer starts poking the Pressable Button. Declaration public: FUxtButtonBeginPokeDelegate OnBeginPoke Field Value Type Description FUxtButtonBeginPokeDelegate | Improve this Doc View Source OnButtonDisabled Event raised when the button is disabled. Declaration public: FUxtButtonDisabledDelegate OnButtonDisabled Field Value Type Description FUxtButtonDisabledDelegate | Improve this Doc View Source OnButtonEnabled Event raised when the button is enabled. Declaration public: FUxtButtonEnabledDelegate OnButtonEnabled Field Value Type Description FUxtButtonEnabledDelegate | Improve this Doc View Source OnButtonPressed Event raised when the button reaches the pressed distance. Declaration public: FUxtButtonPressedDelegate OnButtonPressed Field Value Type Description FUxtButtonPressedDelegate | Improve this Doc View Source OnButtonReleased Event raised when the a pressed button reaches the released distance. Declaration public: FUxtButtonReleasedDelegate OnButtonReleased Field Value Type Description FUxtButtonReleasedDelegate | Improve this Doc View Source OnEndFocus Event raised when a pointer ends focusing the Pressable Button. IsFocused indicates if the Pressable Button is still focused by another pointer. Declaration public: FUxtButtonEndFocusDelegate OnEndFocus Field Value Type Description FUxtButtonEndFocusDelegate | Improve this Doc View Source OnEndPoke Event raised when a pointer ends poking the Pressable Button. Declaration public: FUxtButtonEndPokeDelegate OnEndPoke Field Value Type Description FUxtButtonEndPokeDelegate | Improve this Doc View Source OnUpdateFocus Event raised when a focusing pointer updates. Declaration public: FUxtButtonUpdateFocusDelegate OnUpdateFocus Field Value Type Description FUxtButtonUpdateFocusDelegate | Improve this Doc View Source OnUpdatePoke Event raised while a pointer is poking the Pressable Button. Declaration public: FUxtButtonUpdatePokeDelegate OnUpdatePoke Field Value Type Description FUxtButtonUpdatePokeDelegate | Improve this Doc View Source PressedFraction Fraction of the maximum travel distance at which the button will raise the pressed event. Declaration public: float PressedFraction= 0.5f Field Value Type Description float | Improve this Doc View Source RecoverySpeed Button movement speed while recovering Declaration public: float RecoverySpeed= 50 Field Value Type Description float | Improve this Doc View Source ReleasedFraction Fraction of the maximum travel distance at which a pressed button will raise the released event. Declaration public: float ReleasedFraction= 0.2f Field Value Type Description float Methods | Improve this Doc View Source BeginPlay() Declaration protected: virtual void BeginPlay() override Overrides UUxtUIElementComponent::BeginPlay() | Improve this Doc View Source CanHandleFar_Implementation(UPrimitiveComponent *Primitive) Declaration protected: virtual bool CanHandleFar_Implementation(UPrimitiveComponent *Primitive) const override Parameters Type Name Description UPrimitiveComponent * Primitive Returns Type Description bool | Improve this Doc View Source CanHandlePoke_Implementation(UPrimitiveComponent *Primitive) Declaration protected: virtual bool CanHandlePoke_Implementation(UPrimitiveComponent *Primitive) const override Parameters Type Name Description UPrimitiveComponent * Primitive Returns Type Description bool | Improve this Doc View Source GetClosestPoint_Implementation(const UPrimitiveComponent *Primitive, const FVector &Point, FVector &OutClosestPoint, FVector &OutNormal) Declaration protected: virtual bool GetClosestPoint_Implementation(const UPrimitiveComponent *Primitive, const FVector &Point, FVector &OutClosestPoint, FVector &OutNormal) const override Parameters Type Name Description const UPrimitiveComponent * Primitive const FVector & Point FVector & OutClosestPoint FVector & OutNormal Returns Type Description bool | Improve this Doc View Source GetFrontFaceCollisionFraction() Get the distance from the visuals front face to the collider front face. Declaration public: float GetFrontFaceCollisionFraction() const Returns Type Description float | Improve this Doc View Source GetMaxPushDistance() Gets the maximum distance the button can be pushed Declaration public: float GetMaxPushDistance() const Returns Type Description float | Improve this Doc View Source GetPokeBehaviour_Implementation() Declaration protected: virtual EUxtPokeBehaviour GetPokeBehaviour_Implementation() const override Returns Type Description EUxtPokeBehaviour | Improve this Doc View Source GetPushBehavior() Gets the button behavior when pushed Declaration public: EUxtPushBehavior GetPushBehavior() const Returns Type Description EUxtPushBehavior | Improve this Doc View Source GetScaleAdjustedMaxPushDistance() Gets the maximum distance the button can be pushed scaled by the transform's 'x' scale. Declaration public: float GetScaleAdjustedMaxPushDistance() const Returns Type Description float | Improve this Doc View Source GetState() Get the current state of the button Declaration public: EUxtButtonState GetState() const Returns Type Description EUxtButtonState | Improve this Doc View Source GetVisuals() Get scene component used for the moving visuals Declaration public: USceneComponent * GetVisuals() const Returns Type Description USceneComponent * | Improve this Doc View Source IsFarFocusable_Implementation(const UPrimitiveComponent *Primitive) Declaration protected: virtual bool IsFarFocusable_Implementation(const UPrimitiveComponent *Primitive) const override Parameters Type Name Description const UPrimitiveComponent * Primitive Returns Type Description bool | Improve this Doc View Source IsPokeFocusable_Implementation(const UPrimitiveComponent *Primitive) Declaration protected: virtual bool IsPokeFocusable_Implementation(const UPrimitiveComponent *Primitive) const override Parameters Type Name Description const UPrimitiveComponent * Primitive Returns Type Description bool | Improve this Doc View Source OnBeginPoke_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnBeginPoke_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnEndPoke_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnEndPoke_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnEnterFarFocus_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnEnterFarFocus_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnEnterPokeFocus_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnEnterPokeFocus_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnExitFarFocus_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnExitFarFocus_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnExitPokeFocus_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnExitPokeFocus_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnFarPressed_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnFarPressed_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnFarReleased_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnFarReleased_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnUpdatedFarFocus_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnUpdatedFarFocus_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnUpdatePoke_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnUpdatePoke_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnUpdatePokeFocus_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnUpdatePokeFocus_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source SetCollisionProfile(FName Profile) Set collision profile used by the button collider Declaration public: void SetCollisionProfile(FName Profile) Parameters Type Name Description FName Profile | Improve this Doc View Source SetEnabled(bool Enabled) Set if the button is enabled Declaration public: void SetEnabled(bool Enabled) Parameters Type Name Description bool Enabled | Improve this Doc View Source SetFrontFaceCollisionFraction(float Distance) Set the distance from the visuals front face to the collider front face. Declaration public: void SetFrontFaceCollisionFraction(float Distance) Parameters Type Name Description float Distance | Improve this Doc View Source SetMaxPushDistance(float Distance) Sets the maximum distance the button can be pushed, does nothing when the push behavior is set to compress because the maximum distance is auto calculated Declaration public: void SetMaxPushDistance(float Distance) Parameters Type Name Description float Distance | Improve this Doc View Source SetPushBehavior(EUxtPushBehavior Behavior) Sets the button behavior when pushed Declaration public: void SetPushBehavior(EUxtPushBehavior Behavior) Parameters Type Name Description EUxtPushBehavior Behavior | Improve this Doc View Source SetUseAbsolutePushDistance(bool bAbsolute) Switch between world and local space for button distances Declaration public: void SetUseAbsolutePushDistance(bool bAbsolute) Parameters Type Name Description bool bAbsolute | Improve this Doc View Source SetVisuals(const FComponentReference &ComponentReference) Set scene component reference to be used for the moving visuals. This method should be called if the visual reference should be serialized. Declaration public: void SetVisuals(const FComponentReference &ComponentReference) Parameters Type Name Description const FComponentReference & ComponentReference | Improve this Doc View Source SetVisuals(USceneComponent *Visuals) Set scene component to be used for the moving visuals Declaration public: void SetVisuals(USceneComponent *Visuals) Parameters Type Name Description USceneComponent * Visuals | Improve this Doc View Source TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) Declaration protected: virtual void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) override Parameters Type Name Description float DeltaTime ELevelTick TickType FActorComponentTickFunction * ThisTickFunction | Improve this Doc View Source VisualBoundsFilter(const USceneComponent *Component) Filter function used by the button when calculating the hierarchy bounds of the visuals Declaration public: static bool VisualBoundsFilter(const USceneComponent *Component) Parameters Type Name Description const USceneComponent * Component Returns Type Description bool"
  },
  "api/_i_uxt_far_handler.html": {
    "href": "api/_i_uxt_far_handler.html",
    "title": "Class IUxtFarHandler | UXT Documentation",
    "keywords": "Class IUxtFarHandler Interface to be implemented by components to handle far interactions. Inheritance System::Object IUxtFarHandler Namespace : Assembly : .dll Syntax public: class IUxtFarHandler Methods | Improve this Doc View Source CanHandleFar(UPrimitiveComponent *Primitive) Returns true if the this can handle events from this primitive. Declaration public: bool CanHandleFar(UPrimitiveComponent *Primitive) const Parameters Type Name Description UPrimitiveComponent * Primitive Returns Type Description bool | Improve this Doc View Source OnEnterFarFocus(UUxtFarPointerComponent *Pointer) Raised when a far pointer starts focusing a primitive. Declaration public: void OnEnterFarFocus(UUxtFarPointerComponent *Pointer) Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnExitFarFocus(UUxtFarPointerComponent *Pointer) Raised when a far pointer stops focusing a primitive. Declaration public: void OnExitFarFocus(UUxtFarPointerComponent *Pointer) Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnFarDragged(UUxtFarPointerComponent *Pointer) Raised when a focusing far pointer is dragged. Declaration public: void OnFarDragged(UUxtFarPointerComponent *Pointer) Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnFarPressed(UUxtFarPointerComponent *Pointer) Raised when a focusing far pointer is pressed. Declaration public: void OnFarPressed(UUxtFarPointerComponent *Pointer) Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnFarReleased(UUxtFarPointerComponent *Pointer) Raised when a focusing far pointer is released. Declaration public: void OnFarReleased(UUxtFarPointerComponent *Pointer) Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnUpdatedFarFocus(UUxtFarPointerComponent *Pointer) Raised when a focusing far pointer is updated. Declaration public: void OnUpdatedFarFocus(UUxtFarPointerComponent *Pointer) Parameters Type Name Description UUxtFarPointerComponent * Pointer"
  },
  "api/_i_uxt_collection_object.html": {
    "href": "api/_i_uxt_collection_object.html",
    "title": "Class IUxtCollectionObject | UXT Documentation",
    "keywords": "Class IUxtCollectionObject Interface for components that can be poked. Inheritance System::Object IUxtCollectionObject Namespace : Assembly : .dll Syntax public: class IUxtCollectionObject Methods | Improve this Doc View Source GetFarTarget() Declaration public: TScriptInterface<IUxtFarTarget> GetFarTarget() Returns Type Description TScriptInterface< IUxtFarTarget > | Improve this Doc View Source GetPokeTarget() Declaration public: TScriptInterface<IUxtPokeTarget> GetPokeTarget() Returns Type Description TScriptInterface< IUxtPokeTarget >"
  },
  "api/_f_u_x_tools_editor_module.html": {
    "href": "api/_f_u_x_tools_editor_module.html",
    "title": "Class FUXToolsEditorModule | UXT Documentation",
    "keywords": "Class FUXToolsEditorModule Inheritance System::Object IModuleInterface FUXToolsEditorModule Namespace : Assembly : .dll Syntax public: class FUXToolsEditorModule Methods | Improve this Doc View Source ShutdownModule() Declaration public: virtual void ShutdownModule() override | Improve this Doc View Source StartupModule() Declaration public: virtual void StartupModule() override"
  },
  "api/_f_uxt_tooltip_spawner_component_visualizer.html": {
    "href": "api/_f_uxt_tooltip_spawner_component_visualizer.html",
    "title": "Class FUxtTooltipSpawnerComponentVisualizer | UXT Documentation",
    "keywords": "Class FUxtTooltipSpawnerComponentVisualizer class used to create a representation of the tooltip spawner which is a preview of the spawned widget. Inheritance System::Object FComponentVisualizer FUxtTooltipSpawnerComponentVisualizer Namespace : Assembly : .dll Syntax public: class FUxtTooltipSpawnerComponentVisualizer"
  },
  "api/_f_uxt_pointer_focus.html": {
    "href": "api/_f_uxt_pointer_focus.html",
    "title": "Struct FUxtPointerFocus | UXT Documentation",
    "keywords": "Struct FUxtPointerFocus Utility class that is used by components to manage different pointers and their focus targets. Namespace : Assembly : .dll Syntax public: struct FUxtPointerFocus Constructors | Improve this Doc View Source ~FUxtPointerFocus() Declaration public: virtual ~FUxtPointerFocus() Methods | Improve this Doc View Source ClearFocus(UUxtNearPointerComponent *Pointer) Clear the focused target. Declaration public: void ClearFocus(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source FindClosestPointOnComponent(UActorComponent *Target, const FVector &Point) Find the closest primitive and point on the owner of the given component. Declaration protected: FUxtPointerFocusSearchResult FindClosestPointOnComponent(UActorComponent *Target, const FVector &Point) const Parameters Type Name Description UActorComponent * Target const FVector & Point Returns Type Description FUxtPointerFocusSearchResult | Improve this Doc View Source FindClosestTarget(const TArray<FOverlapResult> &Overlaps, const FVector &Point) Find the closest target object, primitive, and point among the overlaps. Declaration protected: FUxtPointerFocusSearchResult FindClosestTarget(const TArray<FOverlapResult> &Overlaps, const FVector &Point) const Parameters Type Name Description const TArray<FOverlapResult> & Overlaps const FVector & Point Returns Type Description FUxtPointerFocusSearchResult | Improve this Doc View Source FindInterfaceComponent(AActor *Owner) Find a component of the actor that implements the required interface. Find a component of the actor that implements the given interface type. Declaration public: UActorComponent * FindInterfaceComponent(AActor *Owner) const Parameters Type Name Description AActor * Owner Returns Type Description UActorComponent * | Improve this Doc View Source GetClosestPointOnTarget(const UActorComponent *Target, const UPrimitiveComponent *Primitive, const FVector &Point, FVector &OutClosestPoint, FVector &OutNormal) Find the closest point on the given primitive using the distance function of the target interface. Declaration protected: virtual bool GetClosestPointOnTarget(const UActorComponent *Target, const UPrimitiveComponent *Primitive, const FVector &Point, FVector &OutClosestPoint, FVector &OutNormal) const =0 Parameters Type Name Description const UActorComponent * Target const UPrimitiveComponent * Primitive const FVector & Point FVector & OutClosestPoint FVector & OutNormal Returns Type Description bool | Improve this Doc View Source GetClosestTargetNormal() Get the poke normal from the closest point on the surface Declaration public: const FVector & GetClosestTargetNormal() const Returns Type Description const FVector & | Improve this Doc View Source GetClosestTargetPoint() Get the closest point on the surface of the focused target Declaration public: const FVector & GetClosestTargetPoint() const Returns Type Description const FVector & | Improve this Doc View Source GetFocusedPrimitive() Get the currently focused primitive component Declaration public: UPrimitiveComponent * GetFocusedPrimitive() const Returns Type Description UPrimitiveComponent * | Improve this Doc View Source GetFocusedTarget() Get the currently focused target object. Declaration public: UObject * GetFocusedTarget() const Returns Type Description UObject * | Improve this Doc View Source GetFocusedTargetChecked() Get the currently focused target object. Returns null if the target does not implement the expected interface. Declaration public: UObject * GetFocusedTargetChecked() const Returns Type Description UObject * | Improve this Doc View Source GetInterfaceClass() Get the interface class that targets for the pointer must implement. Declaration protected: virtual UClass * GetInterfaceClass() const =0 Returns Type Description UClass * | Improve this Doc View Source ImplementsTargetInterface(UObject *Target) Returns true if the given object implements the required target interface. Declaration protected: virtual bool ImplementsTargetInterface(UObject *Target) const =0 Parameters Type Name Description UObject * Target Returns Type Description bool | Improve this Doc View Source RaiseEnterFocusEvent(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) Notify the target object that it has entered focus. Declaration protected: virtual void RaiseEnterFocusEvent(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) const =0 Parameters Type Name Description UPrimitiveComponent * Target UUxtNearPointerComponent * Pointer | Improve this Doc View Source RaiseExitFocusEvent(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) Notify the target object that it has exited focus. Declaration protected: virtual void RaiseExitFocusEvent(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) const =0 Parameters Type Name Description UPrimitiveComponent * Target UUxtNearPointerComponent * Pointer | Improve this Doc View Source RaiseUpdateFocusEvent(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) Notify the focused target object that the pointer has been updated. Declaration protected: virtual void RaiseUpdateFocusEvent(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) const =0 Parameters Type Name Description UPrimitiveComponent * Target UUxtNearPointerComponent * Pointer | Improve this Doc View Source SelectClosestPointOnTarget(UUxtNearPointerComponent *Pointer, const FTransform &PointerTransform, UActorComponent *NewTarget) Select the closest primitive from the owner of the given target component. The target component will be the new focus, unless no usable primitive can be found. Declaration public: void SelectClosestPointOnTarget(UUxtNearPointerComponent *Pointer, const FTransform &PointerTransform, UActorComponent *NewTarget) Parameters Type Name Description UUxtNearPointerComponent * Pointer const FTransform & PointerTransform UActorComponent * NewTarget | Improve this Doc View Source SelectClosestTarget(UUxtNearPointerComponent *Pointer, const FTransform &PointerTransform, const TArray<FOverlapResult> &Overlaps) Select and set the focused target among the list of overlaps. Declaration public: void SelectClosestTarget(UUxtNearPointerComponent *Pointer, const FTransform &PointerTransform, const TArray<FOverlapResult> &Overlaps) Parameters Type Name Description UUxtNearPointerComponent * Pointer const FTransform & PointerTransform const TArray<FOverlapResult> & Overlaps | Improve this Doc View Source SetFocus(UUxtNearPointerComponent *Pointer, const FTransform &PointerTransform, const FUxtPointerFocusSearchResult &FocusResult) Set the focus to the given target object, primitive, and point on the target. Declaration protected: void SetFocus(UUxtNearPointerComponent *Pointer, const FTransform &PointerTransform, const FUxtPointerFocusSearchResult &FocusResult) Parameters Type Name Description UUxtNearPointerComponent * Pointer const FTransform & PointerTransform const FUxtPointerFocusSearchResult & FocusResult | Improve this Doc View Source UpdateClosestTarget(const FTransform &PointerTransform) Update the ClosestTargetPoint while focus is locked Declaration public: void UpdateClosestTarget(const FTransform &PointerTransform) Parameters Type Name Description const FTransform & PointerTransform | Improve this Doc View Source UpdateFocus(UUxtNearPointerComponent *Pointer) Notify the focused target of a pointer update. Declaration public: void UpdateFocus(UUxtNearPointerComponent *Pointer) const Parameters Type Name Description UUxtNearPointerComponent * Pointer"
  },
  "api/_f_uxt_icon_brush_customization.html": {
    "href": "api/_f_uxt_icon_brush_customization.html",
    "title": "Class FUxtIconBrushCustomization | UXT Documentation",
    "keywords": "Class FUxtIconBrushCustomization Provides a custom property panel for the UxtIconBrush. Inheritance System::Object IPropertyTypeCustomization FUxtIconBrushCustomization Namespace : Assembly : .dll Syntax public: class FUxtIconBrushCustomization Methods | Improve this Doc View Source CustomizeChildren(TSharedRef<IPropertyHandle> PropertyHandle, IDetailChildrenBuilder &ChildBuilder, IPropertyTypeCustomizationUtils &CustomizationUtils) Declaration protected: virtual void CustomizeChildren(TSharedRef<IPropertyHandle> PropertyHandle, IDetailChildrenBuilder &ChildBuilder, IPropertyTypeCustomizationUtils &CustomizationUtils) override Parameters Type Name Description TSharedRef<IPropertyHandle> PropertyHandle IDetailChildrenBuilder & ChildBuilder IPropertyTypeCustomizationUtils & CustomizationUtils | Improve this Doc View Source CustomizeHeader(TSharedRef<IPropertyHandle> PropertyHandle, FDetailWidgetRow &HeaderRow, IPropertyTypeCustomizationUtils &CustomizationUtils) Declaration protected: virtual void CustomizeHeader(TSharedRef<IPropertyHandle> PropertyHandle, FDetailWidgetRow &HeaderRow, IPropertyTypeCustomizationUtils &CustomizationUtils) override Parameters Type Name Description TSharedRef<IPropertyHandle> PropertyHandle FDetailWidgetRow & HeaderRow IPropertyTypeCustomizationUtils & CustomizationUtils | Improve this Doc View Source MakeInstance() Declaration public: static TSharedRef<IPropertyTypeCustomization> MakeInstance() Returns Type Description TSharedRef<IPropertyTypeCustomization>"
  },
  "api/_f_uxt_grab_pointer_data.html": {
    "href": "api/_f_uxt_grab_pointer_data.html",
    "title": "Struct FUxtGrabPointerData | UXT Documentation",
    "keywords": "Struct FUxtGrabPointerData Utility struct that stores transient data for a pointer which is interacting with a grabbable component. Namespace : Assembly : .dll Syntax public: struct FUxtGrabPointerData Fields | Improve this Doc View Source FarPointer The far pointer that is interacting with the component Declaration public: UUxtFarPointerComponent * FarPointer= nullptr Field Value Type Description UUxtFarPointerComponent * | Improve this Doc View Source FarRayHitPointInPointer Far pointer only property -> describes the relative transform of the grab point to the pointer transform (pointer origin / orientation) This is needed to calculate the new grab point on the object on pointer translations / rotations Declaration public: FTransform FarRayHitPointInPointer= FTransform::Identity Field Value Type Description FTransform | Improve this Doc View Source GrabPointTransform Last updated grab point transform. (Pointer transform in near pointer case, ray hit transform in far pointer case) Declaration public: FTransform GrabPointTransform Field Value Type Description FTransform | Improve this Doc View Source GripToGrabPoint Transform of the grab point in near pointer's grip local space at the start of the interaction. This is useful to prevent grab point's position changes after grab starts from altering object's transform (e.g. animation of InputSim's hand). Far pointer doesn't need this because its grip transform is already at grab point. Declaration public: FTransform GripToGrabPoint Field Value Type Description FTransform | Improve this Doc View Source GripToObject Transform of the object in pointer's grip local space at the start of the interaction. Declaration public: FTransform GripToObject Field Value Type Description FTransform | Improve this Doc View Source LocalGrabPoint Transform of the pointer when it started interacting, in the local space of the target component. This allows computing pointer offset in relation to the current actor transform. Declaration public: FTransform LocalGrabPoint Field Value Type Description FTransform | Improve this Doc View Source NearPointer The near pointer that is interacting with the component. Declaration public: UUxtNearPointerComponent * NearPointer= nullptr Field Value Type Description UUxtNearPointerComponent * | Improve this Doc View Source StartTime The time at which interaction started, in seconds since application start. Declaration public: float StartTime Field Value Type Description float"
  },
  "api/_f_uxt_button_brush.html": {
    "href": "api/_f_uxt_button_brush.html",
    "title": "Struct FUxtButtonBrush | UXT Documentation",
    "keywords": "Struct FUxtButtonBrush Structure containing data representing categorized button assets and properties. Namespace : Assembly : .dll Syntax public: struct FUxtButtonBrush Fields | Improve this Doc View Source Audio Structure for button audio. Declaration public: FUxtButtonAudioBrush Audio Field Value Type Description FUxtButtonAudioBrush | Improve this Doc View Source Visuals Structure for button visuals. Declaration public: FUxtButtonVisualsBrush Visuals Field Value Type Description FUxtButtonVisualsBrush"
  },
  "api/_a_uxt_pressable_check_button_actor.html": {
    "href": "api/_a_uxt_pressable_check_button_actor.html",
    "title": "Class AUxtPressableCheckButtonActor | UXT Documentation",
    "keywords": "Class AUxtPressableCheckButtonActor A derived actor of AUxtPressableToggleButtonActor which represents the toggle state with a check icon. Inheritance System::Object AActor AUxtBasePressableButtonActor AUxtPressableButtonActor AUxtPressableToggleButtonActor AUxtPressableCheckButtonActor Inherited Members AUxtPressableButtonActor::AnimateFocus(float DeltaTime) AUxtPressableButtonActor::AnimatePulse(float DeltaTime) AUxtPressableButtonActor::AudioComponent AUxtBasePressableButtonActor::AUxtBasePressableButtonActor() AUxtPressableButtonActor::AUxtPressableButtonActor() AUxtPressableToggleButtonActor::AUxtPressableToggleButtonActor() AUxtPressableButtonActor::BackPlateMeshComponent AUxtPressableButtonActor::BackPlatePivotComponent AUxtPressableButtonActor::bCanEditIconBrush AUxtPressableToggleButtonActor::BeginPlay() AUxtPressableButtonActor::BeginPulse(const UUxtPointerComponent *Pointer) AUxtPressableButtonActor::bIsPlated AUxtPressableToggleButtonActor::bToggleOnRelease AUxtPressableButtonActor::ButtonBrush AUxtBasePressableButtonActor::ButtonComponent AUxtPressableButtonActor::ConstructIcon() AUxtPressableButtonActor::ConstructLabel() AUxtPressableToggleButtonActor::ConstructVisuals() AUxtPressableButtonActor::CreateAndAttachComponent(FName Name, USceneComponent *Parent) AUxtPressableButtonActor::FocusTimer AUxtPressableButtonActor::FrontPlateCenterComponent AUxtPressableButtonActor::FrontPlateMeshComponent AUxtPressableButtonActor::FrontPlatePivotComponent AUxtPressableButtonActor::GetButtonBrush() AUxtBasePressableButtonActor::GetButtonComponent() AUxtBasePressableButtonActor::GetFarTarget() AUxtBasePressableButtonActor::GetFarTarget_Implementation() AUxtPressableButtonActor::GetIconBrush() AUxtPressableButtonActor::GetLabel() AUxtPressableButtonActor::GetLabelTextBrush() AUxtPressableButtonActor::GetMillimeterSize() AUxtBasePressableButtonActor::GetPokeTarget() AUxtBasePressableButtonActor::GetPokeTarget_Implementation() AUxtPressableButtonActor::GetSize() AUxtPressableButtonActor::IconComponent AUxtPressableToggleButtonActor::IsInitiallyChecked() AUxtPressableButtonActor::IsPlated() AUxtPressableButtonActor::IsPulsing() AUxtPressableButtonActor::Label AUxtPressableButtonActor::LabelComponent AUxtPressableButtonActor::LabelTextBrush AUxtPressableButtonActor::MaterialIndex AUxtPressableButtonActor::MillimeterSize AUxtPressableButtonActor::OnBeginFocus(UUxtPressableButtonComponent *Button, UUxtPointerComponent *Pointer, bool WasAlreadyFocused) AUxtPressableButtonActor::OnButtonDisabled(UUxtPressableButtonComponent *Button) AUxtPressableButtonActor::OnButtonEnabled(UUxtPressableButtonComponent *Button) AUxtPressableToggleButtonActor::OnButtonPressed(UUxtPressableButtonComponent *Button, UUxtPointerComponent *Pointer) AUxtPressableToggleButtonActor::OnButtonReleased(UUxtPressableButtonComponent *Button, UUxtPointerComponent *Pointer) AUxtPressableToggleButtonActor::OnButtonToggled(UUxtToggleStateComponent *ToggleState) AUxtPressableToggleButtonActor::OnConstruction(const FTransform &Transform) AUxtPressableButtonActor::PrePulseMaterial AUxtPressableButtonActor::PulseFadeTimer AUxtPressableButtonActor::PulseMaterialInstance AUxtPressableButtonActor::PulseTimer AUxtPressableToggleButtonActor::RemoveTogglePlate() AUxtPressableButtonActor::SetButtonBrush(const FUxtButtonBrush &Brush) AUxtPressableButtonActor::SetIconBrush(const FUxtIconBrush &Brush) AUxtPressableToggleButtonActor::SetIsInitiallyChecked(bool InitiallyChecked) AUxtPressableButtonActor::SetIsPlated(bool IsPlated) AUxtPressableButtonActor::SetLabel(const FText &NewLabel) AUxtPressableButtonActor::SetLabelTextBrush(const FUxtTextBrush &Brush) AUxtPressableButtonActor::SetMillimeterSize(FVector Size) AUxtPressableButtonActor::SetSize(FVector Size) AUxtPressableButtonActor::Tick(float DeltaTime) AUxtPressableToggleButtonActor::TogglePlateComponent AUxtPressableToggleButtonActor::ToggleStateComponent AUxtPressableButtonActor::UPROPERTY(EditAnywhere, Category=\"Uxt Pressable Button\", BlueprintGetter=\"GetIconBrush\", BlueprintSetter=\"SetIconBrush\", meta=(EditCondition=\"bCanEditIconBrush\")) Namespace : Assembly : .dll Syntax public: class AUxtPressableCheckButtonActor : public xtPressableToggleButtonActor Constructors | Improve this Doc View Source AUxtPressableCheckButtonActor() Declaration public: AUxtPressableCheckButtonActor() | Improve this Doc View Source UPROPERTY(EditAnywhere, Category=\"Uxt Pressable Button\", BlueprintGetter=\"GetUncheckedIconBrush\", BlueprintSetter=\"SetUncheckedIconBrush\") Structure which contains properties for the button's icon when unchecked. Declaration protected: UPROPERTY(EditAnywhere, Category=\"Uxt Pressable Button\", BlueprintGetter=\"GetUncheckedIconBrush\", BlueprintSetter=\"SetUncheckedIconBrush\") FUxtIconBrush UncheckedIconBrush Parameters Type Name Description EditAnywhere _a_uxt_pressable_check_button_actor_UPROPERTY_EditAnywhere_Category_BlueprintGetter_BlueprintSetter_ Category _a_uxt_pressable_check_button_actor_UPROPERTY_EditAnywhere_Category_BlueprintGetter_BlueprintSetter_ BlueprintGetter _a_uxt_pressable_check_button_actor_UPROPERTY_EditAnywhere_Category_BlueprintGetter_BlueprintSetter_ BlueprintSetter _a_uxt_pressable_check_button_actor_UPROPERTY_EditAnywhere_Category_BlueprintGetter_BlueprintSetter_ Methods | Improve this Doc View Source GetCheckedIconBrush() Accessor to the button's checked icon brush. Declaration public: const FUxtIconBrush & GetCheckedIconBrush() const Returns Type Description const FUxtIconBrush & | Improve this Doc View Source GetUncheckedIconBrush() Accessor to the button's unchecked icon brush. Declaration public: const FUxtIconBrush & GetUncheckedIconBrush() const Returns Type Description const FUxtIconBrush & | Improve this Doc View Source SetCheckedIconBrush(const FUxtIconBrush &Brush) Applies a new checked icon brush. Declaration public: void SetCheckedIconBrush(const FUxtIconBrush &Brush) Parameters Type Name Description const FUxtIconBrush & Brush | Improve this Doc View Source SetUncheckedIconBrush(const FUxtIconBrush &Brush) Applies a new unchecked icon brush. Declaration public: void SetUncheckedIconBrush(const FUxtIconBrush &Brush) Parameters Type Name Description const FUxtIconBrush & Brush | Improve this Doc View Source UpdateToggleVisuals() Alters the toggle visuals when the toggle state changes. Declaration public: virtual void UpdateToggleVisuals() override Overrides AUxtPressableToggleButtonActor::UpdateToggleVisuals()"
  },
  "api/_a_uxt_base_pressable_button_actor.html": {
    "href": "api/_a_uxt_base_pressable_button_actor.html",
    "title": "Class AUxtBasePressableButtonActor | UXT Documentation",
    "keywords": "Class AUxtBasePressableButtonActor Abstract base class for all pressable button actors. Ensures a UUxtPressableButtonComponent as the root component. Inheritance System::Object AActor AUxtBasePressableButtonActor Namespace : Assembly : .dll Syntax public: class AUxtBasePressableButtonActor : public xtCollectionObject Constructors | Improve this Doc View Source AUxtBasePressableButtonActor() Declaration public: AUxtBasePressableButtonActor() Fields | Improve this Doc View Source ButtonComponent Handle to the root button component. Declaration protected: UUxtPressableButtonComponent * ButtonComponent= nullptr Field Value Type Description UUxtPressableButtonComponent * Methods | Improve this Doc View Source GetButtonComponent() Returns UUxtPressableButtonComponent subobject. Declaration public: UUxtPressableButtonComponent * GetButtonComponent() const Returns Type Description UUxtPressableButtonComponent * | Improve this Doc View Source GetFarTarget() Returns UUxtPressableButtonComponent as the far target. Declaration public: TScriptInterface<IUxtFarTarget> GetFarTarget() Returns Type Description TScriptInterface< IUxtFarTarget > | Improve this Doc View Source GetFarTarget_Implementation() Declaration public: virtual TScriptInterface<IUxtFarTarget> GetFarTarget_Implementation() override Returns Type Description TScriptInterface< IUxtFarTarget > | Improve this Doc View Source GetPokeTarget() Returns UUxtPressableButtonComponent as the poke target. Declaration public: TScriptInterface<IUxtPokeTarget> GetPokeTarget() Returns Type Description TScriptInterface< IUxtPokeTarget > | Improve this Doc View Source GetPokeTarget_Implementation() Declaration public: virtual TScriptInterface<IUxtPokeTarget> GetPokeTarget_Implementation() override Returns Type Description TScriptInterface< IUxtPokeTarget >"
  },
  "api/_u_x_tools_w_m_r.html": {
    "href": "api/_u_x_tools_w_m_r.html",
    "title": "Class UXToolsWMR | UXT Documentation",
    "keywords": "Class UXToolsWMR Inheritance System::Object ModuleRules UXToolsWMR Namespace : Assembly : .dll Syntax public: class UXToolsWMR Constructors | Improve this Doc View Source UXToolsWMR(ReadOnlyTargetRules Target) Declaration public: UXToolsWMR(ReadOnlyTargetRules Target) Parameters Type Name Description ReadOnlyTargetRules Target"
  },
  "api/_u_x_tools_shaders.html": {
    "href": "api/_u_x_tools_shaders.html",
    "title": "Class UXToolsShaders | UXT Documentation",
    "keywords": "Class UXToolsShaders Inheritance System::Object ModuleRules UXToolsShaders Namespace : Assembly : .dll Syntax public: class UXToolsShaders Constructors | Improve this Doc View Source UXToolsShaders(ReadOnlyTargetRules Target) Declaration public: UXToolsShaders(ReadOnlyTargetRules Target) Parameters Type Name Description ReadOnlyTargetRules Target"
  },
  "api/_u_uxt_touch_based_hand_tracker_component.html": {
    "href": "api/_u_uxt_touch_based_hand_tracker_component.html",
    "title": "Class UUxtTouchBasedHandTrackerComponent | UXT Documentation",
    "keywords": "Class UUxtTouchBasedHandTrackerComponent Component added automatically by UXT to the player controller to enable driving far interactions via touch input. The hand tracker interface is used just to provide the pointer pose and grab/select states, GetJointState() returns that pointer pose for all joints. Inheritance System::Object UActorComponent UUxtTouchBasedHandTrackerComponent Inherited Members IUxtHandTracker::GetHandTracker() IUxtHandTracker::GetModularFeatureName() IUxtHandTracker::~IUxtHandTracker() Namespace : Assembly : .dll Syntax public: class UUxtTouchBasedHandTrackerComponent : public xtHandTracker Methods | Improve this Doc View Source BeginPlay() Declaration public: virtual void BeginPlay() override | Improve this Doc View Source EndPlay(const EEndPlayReason::Type EndPlayReason) Declaration public: virtual void EndPlay(const EEndPlayReason::Type EndPlayReason) override Parameters Type Name Description const EEndPlayReason::Type EndPlayReason | Improve this Doc View Source GetIsGrabbing(EControllerHand Hand, bool &OutIsGrabbing) Obtain current grabbing state. Returns false if the hand is not tracked this frame, in which case the value of the output parameter is unchanged. Declaration public: virtual bool GetIsGrabbing(EControllerHand Hand, bool &OutIsGrabbing) const Parameters Type Name Description EControllerHand Hand bool & OutIsGrabbing Returns Type Description bool Overrides IUxtHandTracker::GetIsGrabbing(EControllerHand Hand, bool &OutIsGrabbing) | Improve this Doc View Source GetIsSelectPressed(EControllerHand Hand, bool &OutIsSelectPressed) Obtain current selection state. Returns false if the hand is not tracked this frame, in which case the value of the output parameter is unchanged. Declaration public: virtual bool GetIsSelectPressed(EControllerHand Hand, bool &OutIsSelectPressed) const Parameters Type Name Description EControllerHand Hand bool & OutIsSelectPressed Returns Type Description bool Overrides IUxtHandTracker::GetIsSelectPressed(EControllerHand Hand, bool &OutIsSelectPressed) | Improve this Doc View Source GetJointState(EControllerHand Hand, EUxtHandJoint Joint, FQuat &OutOrientation, FVector &OutPosition, float &OutRadius) Obtain the state of the given joint. Returns false if the hand is not tracked this frame, in which case the values of the output parameters are unchanged. Declaration public: virtual bool GetJointState(EControllerHand Hand, EUxtHandJoint Joint, FQuat &OutOrientation, FVector &OutPosition, float &OutRadius) const Parameters Type Name Description EControllerHand Hand EUxtHandJoint Joint FQuat & OutOrientation FVector & OutPosition float & OutRadius Returns Type Description bool Overrides IUxtHandTracker::GetJointState(EControllerHand Hand, EUxtHandJoint Joint, FQuat &OutOrientation, FVector &OutPosition, float &OutRadius) | Improve this Doc View Source GetPointerPose(EControllerHand Hand, FQuat &OutOrientation, FVector &OutPosition) Obtain the pointer pose. Returns false if the hand is not tracked this frame, in which case the value of the output parameter is unchanged. Declaration public: virtual bool GetPointerPose(EControllerHand Hand, FQuat &OutOrientation, FVector &OutPosition) const Parameters Type Name Description EControllerHand Hand FQuat & OutOrientation FVector & OutPosition Returns Type Description bool Overrides IUxtHandTracker::GetPointerPose(EControllerHand Hand, FQuat &OutOrientation, FVector &OutPosition)"
  },
  "api/_u_uxt_touchable_volume_component.html": {
    "href": "api/_u_uxt_touchable_volume_component.html",
    "title": "Class UUxtTouchableVolumeComponent | UXT Documentation",
    "keywords": "Class UUxtTouchableVolumeComponent Component that turns the actor it is attached to into a touchable volume. Inheritance System::Object USceneComponent UUxtUIElementComponent UUxtTouchableVolumeComponent Inherited Members IUxtFarHandler::CanHandleFar(UPrimitiveComponent *Primitive) IUxtPokeHandler::CanHandlePoke(UPrimitiveComponent *Primitive) IUxtPokeTarget::GetClosestPoint(const UPrimitiveComponent *Primitive, const FVector &Point, FVector &OutClosestPoint, FVector &OutNormal) IUxtPokeTarget::GetPokeBehaviour() UUxtUIElementComponent::GetUIVisibilityInHierarchy() UUxtUIElementComponent::GetUIVisibilitySelf() IUxtFarTarget::IsFarFocusable(const UPrimitiveComponent *Primitive) IUxtPokeTarget::IsPokeFocusable(const UPrimitiveComponent *Primitive) UUxtUIElementComponent::OnAttachmentChanged() IUxtPokeHandler::OnBeginPoke(UUxtNearPointerComponent *Pointer) IUxtPokeHandler::OnEndPoke(UUxtNearPointerComponent *Pointer) IUxtFarHandler::OnEnterFarFocus(UUxtFarPointerComponent *Pointer) IUxtPokeHandler::OnEnterPokeFocus(UUxtNearPointerComponent *Pointer) IUxtFarHandler::OnExitFarFocus(UUxtFarPointerComponent *Pointer) IUxtPokeHandler::OnExitPokeFocus(UUxtNearPointerComponent *Pointer) IUxtFarHandler::OnFarDragged(UUxtFarPointerComponent *Pointer) IUxtFarHandler::OnFarPressed(UUxtFarPointerComponent *Pointer) IUxtFarHandler::OnFarReleased(UUxtFarPointerComponent *Pointer) UUxtUIElementComponent::OnHideElement UUxtUIElementComponent::OnShowElement IUxtFarHandler::OnUpdatedFarFocus(UUxtFarPointerComponent *Pointer) IUxtPokeHandler::OnUpdatePoke(UUxtNearPointerComponent *Pointer) IUxtPokeHandler::OnUpdatePokeFocus(UUxtNearPointerComponent *Pointer) UUxtUIElementComponent::RefreshUIElement() UUxtUIElementComponent::SetUIVisibility(EUxtUIElementVisibility NewVisibility) UUxtUIElementComponent::UUxtUIElementComponent() Namespace : Assembly : .dll Syntax public: class UUxtTouchableVolumeComponent : public xtUIElementComponent, public xtPokeTarget, public xtPokeHandler, public xtFarTarget, public xtFarHandler Fields | Improve this Doc View Source OnBeginFocus Event raised when a pointer starts focusing the touchable volume. WasFocused indicates if the volume was already focused by another pointer. Declaration public: FUxtVolumeBeginFocusDelegate OnBeginFocus Field Value Type Description FUxtVolumeBeginFocusDelegate | Improve this Doc View Source OnBeginPoke Event raised when a pointer starts poking the touchable volume. Declaration public: FUxtVolumeBeginPokeDelegate OnBeginPoke Field Value Type Description FUxtVolumeBeginPokeDelegate | Improve this Doc View Source OnEndFocus Event raised when a pointer ends focusing the touchable volume. IsFocused indicates if the volume is still focused by another pointer. Declaration public: FUxtVolumeEndFocusDelegate OnEndFocus Field Value Type Description FUxtVolumeEndFocusDelegate | Improve this Doc View Source OnEndPoke Event raised when a pointer ends poking the touchable volume. Declaration public: FUxtVolumeEndPokeDelegate OnEndPoke Field Value Type Description FUxtVolumeEndPokeDelegate | Improve this Doc View Source OnUpdateFocus Event raised when a focusing pointer updates. Declaration public: FUxtVolumeUpdateFocusDelegate OnUpdateFocus Field Value Type Description FUxtVolumeUpdateFocusDelegate | Improve this Doc View Source OnUpdatePoke Event raised while a pointer is poking the touchable volume. Declaration public: FUxtVolumeUpdatePokeDelegate OnUpdatePoke Field Value Type Description FUxtVolumeUpdatePokeDelegate | Improve this Doc View Source OnVolumeDisabled Event raised when the volume is disabled. Declaration public: FUxtVolumeDisabledDelegate OnVolumeDisabled Field Value Type Description FUxtVolumeDisabledDelegate | Improve this Doc View Source OnVolumeEnabled Event raised when the volume is enabled. Declaration public: FUxtVolumeEnabledDelegate OnVolumeEnabled Field Value Type Description FUxtVolumeEnabledDelegate | Improve this Doc View Source TouchablePrimitives List of primitives used as touchable targets. If the list is empty then all primitives of the actor are used. Declaration public: TSet<UPrimitiveComponent *> TouchablePrimitives Field Value Type Description TSet<UPrimitiveComponent *> Methods | Improve this Doc View Source BeginPlay() Declaration protected: virtual void BeginPlay() override Overrides UUxtUIElementComponent::BeginPlay() | Improve this Doc View Source CanHandleFar_Implementation(UPrimitiveComponent *Primitive) Declaration protected: virtual bool CanHandleFar_Implementation(UPrimitiveComponent *Primitive) const override Parameters Type Name Description UPrimitiveComponent * Primitive Returns Type Description bool | Improve this Doc View Source CanHandlePoke_Implementation(UPrimitiveComponent *Primitive) Declaration protected: virtual bool CanHandlePoke_Implementation(UPrimitiveComponent *Primitive) const override Parameters Type Name Description UPrimitiveComponent * Primitive Returns Type Description bool | Improve this Doc View Source GetClosestPoint_Implementation(const UPrimitiveComponent *Primitive, const FVector &Point, FVector &OutClosestPoint, FVector &OutNormal) Declaration protected: virtual bool GetClosestPoint_Implementation(const UPrimitiveComponent *Primitive, const FVector &Point, FVector &OutClosestPoint, FVector &OutNormal) const override Parameters Type Name Description const UPrimitiveComponent * Primitive const FVector & Point FVector & OutClosestPoint FVector & OutNormal Returns Type Description bool | Improve this Doc View Source GetPokeBehaviour_Implementation() Declaration protected: virtual EUxtPokeBehaviour GetPokeBehaviour_Implementation() const override Returns Type Description EUxtPokeBehaviour | Improve this Doc View Source IsFarFocusable_Implementation(const UPrimitiveComponent *Primitive) Declaration protected: virtual bool IsFarFocusable_Implementation(const UPrimitiveComponent *Primitive) const override Parameters Type Name Description const UPrimitiveComponent * Primitive Returns Type Description bool | Improve this Doc View Source IsPokeFocusable_Implementation(const UPrimitiveComponent *Primitive) Declaration protected: virtual bool IsPokeFocusable_Implementation(const UPrimitiveComponent *Primitive) const override Parameters Type Name Description const UPrimitiveComponent * Primitive Returns Type Description bool | Improve this Doc View Source OnBeginPoke_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnBeginPoke_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnEndPoke_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnEndPoke_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnEnterFarFocus_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnEnterFarFocus_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnEnterPokeFocus_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnEnterPokeFocus_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnExitFarFocus_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnExitFarFocus_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnExitPokeFocus_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnExitPokeFocus_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnFarPressed_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnFarPressed_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnFarReleased_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnFarReleased_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnInputTouchBeginHandler(ETouchIndex::Type FingerIndex, UPrimitiveComponent *TouchedComponent) Declaration protected: void OnInputTouchBeginHandler(ETouchIndex::Type FingerIndex, UPrimitiveComponent *TouchedComponent) Parameters Type Name Description ETouchIndex::Type FingerIndex UPrimitiveComponent * TouchedComponent | Improve this Doc View Source OnInputTouchEndHandler(ETouchIndex::Type FingerIndex, UPrimitiveComponent *TouchedComponent) Declaration protected: void OnInputTouchEndHandler(ETouchIndex::Type FingerIndex, UPrimitiveComponent *TouchedComponent) Parameters Type Name Description ETouchIndex::Type FingerIndex UPrimitiveComponent * TouchedComponent | Improve this Doc View Source OnInputTouchLeaveHandler(ETouchIndex::Type FingerIndex, UPrimitiveComponent *TouchedComponent) Declaration protected: void OnInputTouchLeaveHandler(ETouchIndex::Type FingerIndex, UPrimitiveComponent *TouchedComponent) Parameters Type Name Description ETouchIndex::Type FingerIndex UPrimitiveComponent * TouchedComponent | Improve this Doc View Source OnUpdatedFarFocus_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnUpdatedFarFocus_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnUpdatePoke_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnUpdatePoke_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnUpdatePokeFocus_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnUpdatePokeFocus_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source SetEnabled(bool Enabled) Set if the touchable volume is enabled Declaration public: void SetEnabled(bool Enabled) Parameters Type Name Description bool Enabled"
  },
  "api/_u_uxt_toggle_group_component.html": {
    "href": "api/_u_uxt_toggle_group_component.html",
    "title": "Class UUxtToggleGroupComponent | UXT Documentation",
    "keywords": "Class UUxtToggleGroupComponent Component which controls the state of a collection of UUxtToggleStateComponent to behave like a radio group. The component ensures that only one toggle state can be toggled on at a time. Optionally, all states can be toggled off if the SelectedIndex is set to INDEX_NONE. Inheritance System::Object UActorComponent UUxtToggleGroupComponent Inherited Members UUxtToggleGroupComponent Namespace : Assembly : .dll Syntax public: class UUxtToggleGroupComponent Fields | Improve this Doc View Source OnGroupSelectionChanged Event which broadcasts when the toggle group selection changes. Declaration public: FUxtToggleGroupSelectionChangedDelegate OnGroupSelectionChanged Field Value Type Description FUxtToggleGroupSelectionChangedDelegate | Improve this Doc View Source ToggleStates A collection of toggle states that act as one toggle group, only one state can be toggle on at a time. Declaration protected: TArray<ToggleStateWeak> ToggleStates Field Value Type Description TArray<ToggleStateWeak> Methods | Improve this Doc View Source AddToggleState(UUxtToggleStateComponent *ToggleState) Adds a toggle state to the end of the ToggleStates list. Returns true if the insertion was successful. Declaration public: bool AddToggleState(UUxtToggleStateComponent *ToggleState) Parameters Type Name Description UUxtToggleStateComponent * ToggleState Returns Type Description bool | Improve this Doc View Source BeginPlay() Extracts references from the ToggleReferences and sets the initial selection. Declaration protected: virtual void BeginPlay() override | Improve this Doc View Source EmptyGroup() Removes all toggle states from the ToggleStates list and invalidates the selected index. Declaration public: void EmptyGroup() | Improve this Doc View Source GetGroupCount() Returns how many toggle states are within the group. Declaration public: int32 GetGroupCount() const Returns Type Description int32 | Improve this Doc View Source GetSelectedIndex() Accessor to the selected index. Declaration public: int32 GetSelectedIndex() const Returns Type Description int32 | Improve this Doc View Source GetToggleStateIndex(const UUxtToggleStateComponent *ToggleState) Returns the index of the ToggleState in the ToggleStates list, if the ToggleState does not exist returns INDEX_NONE (-1). Declaration public: int32 GetToggleStateIndex(const UUxtToggleStateComponent *ToggleState) const Parameters Type Name Description const UUxtToggleStateComponent * ToggleState Returns Type Description int32 | Improve this Doc View Source InsertToggleState(UUxtToggleStateComponent *ToggleState, int32 Index) Adds a toggle state to a specific index within the ToggleStates list. Increments the selection index if the toggle state is added before the current selection index. Returns true if the insertion was successful. Declaration public: bool InsertToggleState(UUxtToggleStateComponent *ToggleState, int32 Index) Parameters Type Name Description UUxtToggleStateComponent * ToggleState int32 Index Returns Type Description bool | Improve this Doc View Source OnToggled(UUxtToggleStateComponent *ToggleState) Delegate for when any toggle state within ToggleStates is toggled. Declaration protected: virtual void OnToggled(UUxtToggleStateComponent *ToggleState) Parameters Type Name Description UUxtToggleStateComponent * ToggleState | Improve this Doc View Source RemoveToggleState(UUxtToggleStateComponent *ToggleState) Removes a toggle state from the ToggleStates list. Returns true if the removal was successful. Declaration public: bool RemoveToggleState(UUxtToggleStateComponent *ToggleState) Parameters Type Name Description UUxtToggleStateComponent * ToggleState Returns Type Description bool | Improve this Doc View Source SetSelectedIndex(int32 Index) Mutates the selected index, broadcasts events, and performs bounds checking. Declaration public: void SetSelectedIndex(int32 Index) Parameters Type Name Description int32 Index"
  },
  "api/_u_uxt_text_render_component.html": {
    "href": "api/_u_uxt_text_render_component.html",
    "title": "Class UUxtTextRenderComponent | UXT Documentation",
    "keywords": "Class UUxtTextRenderComponent A text render component which automatically configures assets and properties best suited for text rendering in UX Tools. Inheritance System::Object UTextRenderComponent UUxtTextRenderComponent Namespace : Assembly : .dll Syntax public: class UUxtTextRenderComponent Constructors | Improve this Doc View Source UUxtTextRenderComponent() Declaration public: UUxtTextRenderComponent()"
  },
  "api/_u_uxt_pointer_component.html": {
    "href": "api/_u_uxt_pointer_component.html",
    "title": "Class UUxtPointerComponent | UXT Documentation",
    "keywords": "Class UUxtPointerComponent Base component for UXT pointers. Inheritance System::Object UActorComponent UUxtPointerComponent Namespace : Assembly : .dll Syntax public: class UUxtPointerComponent Constructors | Improve this Doc View Source UUxtPointerComponent() Declaration public: UUxtPointerComponent()=default Fields | Improve this Doc View Source bFocusLocked The lock state of the pointer. Declaration protected: bool bFocusLocked= false Field Value Type Description bool | Improve this Doc View Source GetCursorTransform() Get the cursor transform. Declaration public: FTransform GetCursorTransform() const PURE_VIRTUAL(UUxtPointerComponent Field Value Type Description FTransform | Improve this Doc View Source GetFocusTarget() Get the target currently being focused by the pointer, if any. Declaration public: UObject * GetFocusTarget() const PURE_VIRTUAL(UUxtPointerComponent Field Value Type Description UObject * | Improve this Doc View Source Hand The hand to be used for targeting. TODO: replace with generic input device. Declaration public: EControllerHand Hand= EControllerHand::AnyHand Field Value Type Description EControllerHand Methods | Improve this Doc View Source GetFocusLocked() Get the lock state of the pointer. Declaration public: bool GetFocusLocked() const Returns Type Description bool | Improve this Doc View Source SetFocusLocked(bool bLocked) Set the lock state of the pointer. Locked pointers don't update their hit, remaining focused on the primitive they were hitting until unlocked. Declaration public: virtual void SetFocusLocked(bool bLocked) Parameters Type Name Description bool bLocked"
  },
  "api/_u_uxt_grab_pointer_data_function_library.html": {
    "href": "api/_u_uxt_grab_pointer_data_function_library.html",
    "title": "Class UUxtGrabPointerDataFunctionLibrary | UXT Documentation",
    "keywords": "Class UUxtGrabPointerDataFunctionLibrary Utility functions for FGrabPointerData. Inheritance System::Object UBlueprintFunctionLibrary UUxtGrabPointerDataFunctionLibrary Namespace : Assembly : .dll Syntax public: class UUxtGrabPointerDataFunctionLibrary Methods | Improve this Doc View Source GetGrabLocation(const FTransform &Transform, const FUxtGrabPointerData &GrabData) Compute the grab point in world space. Declaration public: static FVector GetGrabLocation(const FTransform &Transform, const FUxtGrabPointerData &GrabData) Parameters Type Name Description const FTransform & Transform const FUxtGrabPointerData & GrabData Returns Type Description FVector | Improve this Doc View Source GetGrabPointTransform(const FUxtGrabPointerData &GrabData) Compute the grab point transform in world space. Declaration public: static FTransform GetGrabPointTransform(const FUxtGrabPointerData &GrabData) Parameters Type Name Description const FUxtGrabPointerData & GrabData Returns Type Description FTransform | Improve this Doc View Source GetGrabRotation(const FTransform &Transform, const FUxtGrabPointerData &GrabData) Compute the grab rotation in world space. Declaration public: static FRotator GetGrabRotation(const FTransform &Transform, const FUxtGrabPointerData &GrabData) Parameters Type Name Description const FTransform & Transform const FUxtGrabPointerData & GrabData Returns Type Description FRotator | Improve this Doc View Source GetGrabTransform(const FTransform &Transform, const FUxtGrabPointerData &GrabData) Compute the grab transform in world space. Declaration public: static FTransform GetGrabTransform(const FTransform &Transform, const FUxtGrabPointerData &GrabData) Parameters Type Name Description const FTransform & Transform const FUxtGrabPointerData & GrabData Returns Type Description FTransform | Improve this Doc View Source GetGripTransform(const FUxtGrabPointerData &GrabData) Returns the pointer's grip transform in world space. This represents a reference point in the pointer, which corresponds to the actual grip joint's transform for the near pointer and the hit point's transform for the far pointer. Declaration public: static FTransform GetGripTransform(const FUxtGrabPointerData &GrabData) Parameters Type Name Description const FUxtGrabPointerData & GrabData Returns Type Description FTransform | Improve this Doc View Source GetLocationOffset(const FTransform &Transform, const FUxtGrabPointerData &GrabData) Compute the world space offset between pointer grab point and target. Declaration public: static FVector GetLocationOffset(const FTransform &Transform, const FUxtGrabPointerData &GrabData) Parameters Type Name Description const FTransform & Transform const FUxtGrabPointerData & GrabData Returns Type Description FVector | Improve this Doc View Source GetPointerLocation(const FUxtGrabPointerData &GrabData) Returns the world space pointer location Declaration public: static FVector GetPointerLocation(const FUxtGrabPointerData &GrabData) Parameters Type Name Description const FUxtGrabPointerData & GrabData Returns Type Description FVector | Improve this Doc View Source GetPointerTransform(const FUxtGrabPointerData &GrabData) Returns the world space pointer transform (at pointer origin). Declaration public: static FTransform GetPointerTransform(const FUxtGrabPointerData &GrabData) Parameters Type Name Description const FUxtGrabPointerData & GrabData Returns Type Description FTransform | Improve this Doc View Source GetRotationOffset(const FTransform &Transform, const FUxtGrabPointerData &GrabData) Compute the world space rotation between pointer grab point and target. Declaration public: static FRotator GetRotationOffset(const FTransform &Transform, const FUxtGrabPointerData &GrabData) Parameters Type Name Description const FTransform & Transform const FUxtGrabPointerData & GrabData Returns Type Description FRotator | Improve this Doc View Source GetTargetLocation(const FUxtGrabPointerData &GrabData) Compute the pointer target in world space. Declaration public: static FVector GetTargetLocation(const FUxtGrabPointerData &GrabData) Parameters Type Name Description const FUxtGrabPointerData & GrabData Returns Type Description FVector | Improve this Doc View Source GetTargetRotation(const FUxtGrabPointerData &GrabData) Compute the target rotation in world space. Declaration public: static FRotator GetTargetRotation(const FUxtGrabPointerData &GrabData) Parameters Type Name Description const FUxtGrabPointerData & GrabData Returns Type Description FRotator"
  },
  "api/_u_uxt_finger_cursor_component.html": {
    "href": "api/_u_uxt_finger_cursor_component.html",
    "title": "Class UUxtFingerCursorComponent | UXT Documentation",
    "keywords": "Class UUxtFingerCursorComponent When added to an actor with a near pointer, this component displays a ring cursor oriented towards the current poke target and scaled according to the distance. Inheritance System::Object UUxtRingCursorComponent UUxtFingerCursorComponent Namespace : Assembly : .dll Syntax public: class UUxtFingerCursorComponent Constructors | Improve this Doc View Source UUxtFingerCursorComponent() Declaration public: UUxtFingerCursorComponent() Fields | Improve this Doc View Source AlignWithSurfaceDistance Distance at which the cursor starts to align with pokable surfaces. Declaration protected: float AlignWithSurfaceDistance= 10.0f Field Value Type Description float | Improve this Doc View Source bShowOnGrabTargets Show the finger cursor on grab targets. Declaration public: bool bShowOnGrabTargets= false Field Value Type Description bool | Improve this Doc View Source CursorScale Cursor scale. Declaration public: float CursorScale= 1.0f Field Value Type Description float Methods | Improve this Doc View Source BeginPlay() Declaration protected: virtual void BeginPlay() override | Improve this Doc View Source TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) Declaration protected: virtual void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) override Parameters Type Name Description float DeltaTime ELevelTick TickType FActorComponentTickFunction * ThisTickFunction"
  },
  "api/_u_uxt_far_target.html": {
    "href": "api/_u_uxt_far_target.html",
    "title": "Class UUxtFarTarget | UXT Documentation",
    "keywords": "Class UUxtFarTarget Inheritance System::Object UInterface UUxtFarTarget Namespace : Assembly : .dll Syntax public: class UUxtFarTarget"
  },
  "api/_u_uxt_far_cursor_component.html": {
    "href": "api/_u_uxt_far_cursor_component.html",
    "title": "Class UUxtFarCursorComponent | UXT Documentation",
    "keywords": "Class UUxtFarCursorComponent When added to an actor with a far pointer this component displays a flat ring cursor at the pointer's hit point oriented following the hit normal. Inheritance System::Object UUxtRingCursorComponent UUxtFarCursorComponent Namespace : Assembly : .dll Syntax public: class UUxtFarCursorComponent Constructors | Improve this Doc View Source UUxtFarCursorComponent() Declaration public: UUxtFarCursorComponent() Fields | Improve this Doc View Source HoverDistance Distance over the hit surface to place the cursor at. Declaration public: float HoverDistance= 0.5f Field Value Type Description float | Improve this Doc View Source IdleRadius Cursor radius when idle at 1m from the camera. The actual radius will scale with the distance to the camera to keep a constant screen size. Declaration public: float IdleRadius= 0.6f Field Value Type Description float | Improve this Doc View Source PressedRadius Cursor radius when pressed at 1m from the camera. The actual radius will scale with the distance to the camera to keep a constant screen size. Declaration public: float PressedRadius= 0.42f Field Value Type Description float Methods | Improve this Doc View Source BeginPlay() Declaration protected: virtual void BeginPlay() override | Improve this Doc View Source EndPlay(const EEndPlayReason::Type EndPlayReason) Declaration protected: virtual void EndPlay(const EEndPlayReason::Type EndPlayReason) override Parameters Type Name Description const EEndPlayReason::Type EndPlayReason | Improve this Doc View Source TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) Declaration protected: virtual void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) override Parameters Type Name Description float DeltaTime ELevelTick TickType FActorComponentTickFunction * ThisTickFunction"
  },
  "api/_f_u_x_tools_shaders_module.html": {
    "href": "api/_f_u_x_tools_shaders_module.html",
    "title": "Class FUXToolsShadersModule | UXT Documentation",
    "keywords": "Class FUXToolsShadersModule Module for shader specific functionality. Inheritance System::Object IModuleInterface FUXToolsShadersModule Namespace : Assembly : .dll Syntax public: class FUXToolsShadersModule Methods | Improve this Doc View Source ShutdownModule() Declaration public: virtual void ShutdownModule() override | Improve this Doc View Source StartupModule() IModuleInterface implementation Declaration public: virtual void StartupModule() override"
  },
  "api/_f_uxt_text_brush.html": {
    "href": "api/_f_uxt_text_brush.html",
    "title": "Struct FUxtTextBrush | UXT Documentation",
    "keywords": "Struct FUxtTextBrush Structure which contains data representing the appearance of text. Namespace : Assembly : .dll Syntax public: struct FUxtTextBrush Fields | Improve this Doc View Source DefaultColor The default color of the brush, by default the text color. Declaration public: FColor DefaultColor= FColor::White Field Value Type Description FColor | Improve this Doc View Source DisabledColor The disabled color of the brush, by default the text color. Declaration public: FColor DisabledColor= FColor(32, 32, 32) Field Value Type Description FColor | Improve this Doc View Source Font The font used by the text. Declaration public: UFont * Font= nullptr Field Value Type Description UFont * | Improve this Doc View Source Material The material used by the text. Declaration public: UMaterialInterface * Material= nullptr Field Value Type Description UMaterialInterface * | Improve this Doc View Source RelativeLocation The text's location compared to it's parent component. Declaration public: FVector RelativeLocation= FVector::ZeroVector Field Value Type Description FVector | Improve this Doc View Source RelativeRotation The text's rotation compared to it's parent component. Declaration public: FRotator RelativeRotation= FRotator::ZeroRotator Field Value Type Description FRotator | Improve this Doc View Source Size The size of the text, normally the font size. Declaration public: float Size= 1.0f Field Value Type Description float"
  },
  "api/_f_uxt_runtime_settings_button_set.html": {
    "href": "api/_f_uxt_runtime_settings_button_set.html",
    "title": "Struct FUxtRuntimeSettingsButtonSet | UXT Documentation",
    "keywords": "Struct FUxtRuntimeSettingsButtonSet Namespace : Assembly : .dll Syntax public: struct FUxtRuntimeSettingsButtonSet Constructors | Improve this Doc View Source UPROPERTY(EditAnywhere, Category=\"Uxt Runtime Settings\", Meta=(DisplayName=\"Buttons\", Tooltip=\"Buttons that are triggered by a simulated hand gesture.\")) Declaration public: UPROPERTY(EditAnywhere, Category=\"Uxt Runtime Settings\", Meta=(DisplayName=\"Buttons\", Tooltip=\"Buttons that are triggered by a simulated hand gesture.\")) TSet<EHMDInputControllerButtons> Buttons Parameters Type Name Description EditAnywhere _f_uxt_runtime_settings_button_set_UPROPERTY_EditAnywhere_Category_Meta_ Category _f_uxt_runtime_settings_button_set_UPROPERTY_EditAnywhere_Category_Meta_ Meta _f_uxt_runtime_settings_button_set_UPROPERTY_EditAnywhere_Category_Meta_"
  },
  "api/_f_uxt_interaction_utils.html": {
    "href": "api/_f_uxt_interaction_utils.html",
    "title": "Class FUxtInteractionUtils | UXT Documentation",
    "keywords": "Class FUxtInteractionUtils Inheritance System::Object FUxtInteractionUtils Namespace : Assembly : .dll Syntax public: class FUxtInteractionUtils Methods | Improve this Doc View Source GetDefaultClosestPointOnPrimitive(const UPrimitiveComponent *Primitive, const FVector &Point, FVector &OutPointOnSurface, float &OutDistanceSqr) Calculates the point on the target surface that is closest to the point passed in. Return value indicates whether a point was found. Declaration public: static bool GetDefaultClosestPointOnPrimitive(const UPrimitiveComponent *Primitive, const FVector &Point, FVector &OutPointOnSurface, float &OutDistanceSqr) Parameters Type Name Description const UPrimitiveComponent * Primitive const FVector & Point FVector & OutPointOnSurface float & OutDistanceSqr Returns Type Description bool"
  },
  "api/_i_uxt_grab_handler.html": {
    "href": "api/_i_uxt_grab_handler.html",
    "title": "Class IUxtGrabHandler | UXT Documentation",
    "keywords": "Class IUxtGrabHandler Interface for components that can be grabbed. Inheritance System::Object IUxtGrabHandler Namespace : Assembly : .dll Syntax public: class IUxtGrabHandler Methods | Improve this Doc View Source CanHandleGrab(UPrimitiveComponent *Primitive) Returns true if the this can handle events from this primitive. Declaration public: bool CanHandleGrab(UPrimitiveComponent *Primitive) const Parameters Type Name Description UPrimitiveComponent * Primitive Returns Type Description bool | Improve this Doc View Source OnBeginGrab(UUxtNearPointerComponent *Pointer) Raised when a pointer starts grabbing while overlapping the actor. Declaration public: void OnBeginGrab(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnEndGrab(UUxtNearPointerComponent *Pointer) Raised when a pointer stops grabbing or stops overlapping the actor while grabbing. Declaration public: void OnEndGrab(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnEnterGrabFocus(UUxtNearPointerComponent *Pointer) Raised when a pointer focuses the actor. Declaration public: void OnEnterGrabFocus(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnExitGrabFocus(UUxtNearPointerComponent *Pointer) Raised when a pointer stops focusing the actor. Declaration public: void OnExitGrabFocus(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnUpdateGrab(UUxtNearPointerComponent *Pointer) Raised when a pointer has been updated while grabbing. Declaration public: void OnUpdateGrab(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnUpdateGrabFocus(UUxtNearPointerComponent *Pointer) Raised when a pointer has been updated while focused. Declaration public: void OnUpdateGrabFocus(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer"
  },
  "api/_i_uxt_far_target.html": {
    "href": "api/_i_uxt_far_target.html",
    "title": "Class IUxtFarTarget | UXT Documentation",
    "keywords": "Class IUxtFarTarget Interface to implement to enable far interaction for given primitives. Inheritance System::Object IUxtFarTarget Namespace : Assembly : .dll Syntax public: class IUxtFarTarget Methods | Improve this Doc View Source IsFarFocusable(const UPrimitiveComponent *Primitive) Returns true if the given primitive should be considerered a valid focus target. Declaration public: bool IsFarFocusable(const UPrimitiveComponent *Primitive) const Parameters Type Name Description const UPrimitiveComponent * Primitive Returns Type Description bool"
  },
  "api/_f_uxt_poke_pointer_focus.html": {
    "href": "api/_f_uxt_poke_pointer_focus.html",
    "title": "Struct FUxtPokePointerFocus | UXT Documentation",
    "keywords": "Struct FUxtPokePointerFocus Focus implementation for the poke pointers. Inherited Members FUxtPointerFocus::ClearFocus(UUxtNearPointerComponent *Pointer) FUxtPointerFocus::FindClosestPointOnComponent(UActorComponent *Target, const FVector &Point) FUxtPointerFocus::FindClosestTarget(const TArray<FOverlapResult> &Overlaps, const FVector &Point) FUxtPointerFocus::FindInterfaceComponent(AActor *Owner) FUxtPointerFocus::GetClosestTargetNormal() FUxtPointerFocus::GetClosestTargetPoint() FUxtPointerFocus::GetFocusedPrimitive() FUxtPointerFocus::GetFocusedTarget() FUxtPointerFocus::GetFocusedTargetChecked() FUxtPointerFocus::SelectClosestPointOnTarget(UUxtNearPointerComponent *Pointer, const FTransform &PointerTransform, UActorComponent *NewTarget) FUxtPointerFocus::SelectClosestTarget(UUxtNearPointerComponent *Pointer, const FTransform &PointerTransform, const TArray<FOverlapResult> &Overlaps) FUxtPointerFocus::SetFocus(UUxtNearPointerComponent *Pointer, const FTransform &PointerTransform, const FUxtPointerFocusSearchResult &FocusResult) FUxtPointerFocus::UpdateClosestTarget(const FTransform &PointerTransform) FUxtPointerFocus::UpdateFocus(UUxtNearPointerComponent *Pointer) FUxtPointerFocus::~FUxtPointerFocus() Namespace : Assembly : .dll Syntax public: struct FUxtPokePointerFocus : public xtPointerFocus Methods | Improve this Doc View Source BeginPoke(UUxtNearPointerComponent *Pointer) Notify the target object that poke has started. Declaration public: void BeginPoke(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source EndPoke(UUxtNearPointerComponent *Pointer) Notify the target object that poke has ended. Declaration public: void EndPoke(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source GetClosestPointOnTarget(const UActorComponent *Target, const UPrimitiveComponent *Primitive, const FVector &Point, FVector &OutClosestPoint, FVector &OutNormal) Find the closest point on the given primitive using the distance function of the target interface. Declaration protected: virtual bool GetClosestPointOnTarget(const UActorComponent *Target, const UPrimitiveComponent *Primitive, const FVector &Point, FVector &OutClosestPoint, FVector &OutNormal) const override Parameters Type Name Description const UActorComponent * Target const UPrimitiveComponent * Primitive const FVector & Point FVector & OutClosestPoint FVector & OutNormal Returns Type Description bool Overrides FUxtPointerFocus::GetClosestPointOnTarget(const UActorComponent *Target, const UPrimitiveComponent *Primitive, const FVector &Point, FVector &OutClosestPoint, FVector &OutNormal) | Improve this Doc View Source GetInterfaceClass() Get the interface class that targets for the pointer must implement. Declaration protected: virtual UClass * GetInterfaceClass() const override Returns Type Description UClass * Overrides FUxtPointerFocus::GetInterfaceClass() | Improve this Doc View Source ImplementsTargetInterface(UObject *Target) Returns true if the given object implements the required target interface. Declaration protected: virtual bool ImplementsTargetInterface(UObject *Target) const override Parameters Type Name Description UObject * Target Returns Type Description bool Overrides FUxtPointerFocus::ImplementsTargetInterface(UObject *Target) | Improve this Doc View Source IsPoking() Declaration public: bool IsPoking() const Returns Type Description bool | Improve this Doc View Source RaiseEnterFocusEvent(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) Notify the target object that it has entered focus. Declaration protected: virtual void RaiseEnterFocusEvent(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) const override Parameters Type Name Description UPrimitiveComponent * Target UUxtNearPointerComponent * Pointer Overrides FUxtPointerFocus::RaiseEnterFocusEvent(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) | Improve this Doc View Source RaiseExitFocusEvent(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) Notify the target object that it has exited focus. Declaration protected: virtual void RaiseExitFocusEvent(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) const override Parameters Type Name Description UPrimitiveComponent * Target UUxtNearPointerComponent * Pointer Overrides FUxtPointerFocus::RaiseExitFocusEvent(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) | Improve this Doc View Source RaiseUpdateFocusEvent(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) Notify the focused target object that the pointer has been updated. Declaration protected: virtual void RaiseUpdateFocusEvent(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) const override Parameters Type Name Description UPrimitiveComponent * Target UUxtNearPointerComponent * Pointer Overrides FUxtPointerFocus::RaiseUpdateFocusEvent(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) | Improve this Doc View Source UpdatePoke(UUxtNearPointerComponent *Pointer) Notify the poked target object that the pointer has been updated. Declaration public: void UpdatePoke(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer"
  },
  "api/_u_x_tools_input_simulation.html": {
    "href": "api/_u_x_tools_input_simulation.html",
    "title": "Class UXToolsInputSimulation | UXT Documentation",
    "keywords": "Class UXToolsInputSimulation Inheritance System::Object ModuleRules UXToolsInputSimulation Namespace : Assembly : .dll Syntax public: class UXToolsInputSimulation Constructors | Improve this Doc View Source UXToolsInputSimulation(ReadOnlyTargetRules Target) Declaration public: UXToolsInputSimulation(ReadOnlyTargetRules Target) Parameters Type Name Description ReadOnlyTargetRules Target"
  },
  "api/_u_x_tools_editor.html": {
    "href": "api/_u_x_tools_editor.html",
    "title": "Class UXToolsEditor | UXT Documentation",
    "keywords": "Class UXToolsEditor Inheritance System::Object ModuleRules UXToolsEditor Namespace : Assembly : .dll Syntax public: class UXToolsEditor Constructors | Improve this Doc View Source UXToolsEditor(ReadOnlyTargetRules Target) Declaration public: UXToolsEditor(ReadOnlyTargetRules Target) Parameters Type Name Description ReadOnlyTargetRules Target"
  },
  "api/_a_uxt_pressable_toggle_button_actor.html": {
    "href": "api/_a_uxt_pressable_toggle_button_actor.html",
    "title": "Class AUxtPressableToggleButtonActor | UXT Documentation",
    "keywords": "Class AUxtPressableToggleButtonActor A derived actor of AUxtPressableButtonActor with a UUxtToggleStateComponent component to track state and visuals for a button can which can be toggled on or off (checked or unchecked). Inheritance System::Object AActor AUxtBasePressableButtonActor AUxtPressableButtonActor AUxtPressableToggleButtonActor Inherited Members AUxtPressableButtonActor::AnimateFocus(float DeltaTime) AUxtPressableButtonActor::AnimatePulse(float DeltaTime) AUxtPressableButtonActor::AudioComponent AUxtBasePressableButtonActor::AUxtBasePressableButtonActor() AUxtPressableButtonActor::AUxtPressableButtonActor() AUxtPressableButtonActor::BackPlateMeshComponent AUxtPressableButtonActor::BackPlatePivotComponent AUxtPressableButtonActor::bCanEditIconBrush AUxtPressableButtonActor::BeginPulse(const UUxtPointerComponent *Pointer) AUxtPressableButtonActor::bIsPlated AUxtPressableButtonActor::ButtonBrush AUxtBasePressableButtonActor::ButtonComponent AUxtPressableButtonActor::ConstructIcon() AUxtPressableButtonActor::ConstructLabel() AUxtPressableButtonActor::CreateAndAttachComponent(FName Name, USceneComponent *Parent) AUxtPressableButtonActor::FocusTimer AUxtPressableButtonActor::FrontPlateCenterComponent AUxtPressableButtonActor::FrontPlateMeshComponent AUxtPressableButtonActor::FrontPlatePivotComponent AUxtPressableButtonActor::GetButtonBrush() AUxtBasePressableButtonActor::GetButtonComponent() AUxtBasePressableButtonActor::GetFarTarget() AUxtBasePressableButtonActor::GetFarTarget_Implementation() AUxtPressableButtonActor::GetIconBrush() AUxtPressableButtonActor::GetLabel() AUxtPressableButtonActor::GetLabelTextBrush() AUxtPressableButtonActor::GetMillimeterSize() AUxtBasePressableButtonActor::GetPokeTarget() AUxtBasePressableButtonActor::GetPokeTarget_Implementation() AUxtPressableButtonActor::GetSize() AUxtPressableButtonActor::IconComponent AUxtPressableButtonActor::IsPlated() AUxtPressableButtonActor::IsPulsing() AUxtPressableButtonActor::Label AUxtPressableButtonActor::LabelComponent AUxtPressableButtonActor::LabelTextBrush AUxtPressableButtonActor::MaterialIndex AUxtPressableButtonActor::MillimeterSize AUxtPressableButtonActor::OnBeginFocus(UUxtPressableButtonComponent *Button, UUxtPointerComponent *Pointer, bool WasAlreadyFocused) AUxtPressableButtonActor::OnButtonDisabled(UUxtPressableButtonComponent *Button) AUxtPressableButtonActor::OnButtonEnabled(UUxtPressableButtonComponent *Button) AUxtPressableButtonActor::PrePulseMaterial AUxtPressableButtonActor::PulseFadeTimer AUxtPressableButtonActor::PulseMaterialInstance AUxtPressableButtonActor::PulseTimer AUxtPressableButtonActor::SetButtonBrush(const FUxtButtonBrush &Brush) AUxtPressableButtonActor::SetIconBrush(const FUxtIconBrush &Brush) AUxtPressableButtonActor::SetIsPlated(bool IsPlated) AUxtPressableButtonActor::SetLabel(const FText &NewLabel) AUxtPressableButtonActor::SetLabelTextBrush(const FUxtTextBrush &Brush) AUxtPressableButtonActor::SetMillimeterSize(FVector Size) AUxtPressableButtonActor::SetSize(FVector Size) AUxtPressableButtonActor::Tick(float DeltaTime) AUxtPressableButtonActor::UPROPERTY(EditAnywhere, Category=\"Uxt Pressable Button\", BlueprintGetter=\"GetIconBrush\", BlueprintSetter=\"SetIconBrush\", meta=(EditCondition=\"bCanEditIconBrush\")) Namespace : Assembly : .dll Syntax public: class AUxtPressableToggleButtonActor : public xtPressableButtonActor Constructors | Improve this Doc View Source AUxtPressableToggleButtonActor() Declaration public: AUxtPressableToggleButtonActor() | Improve this Doc View Source UPROPERTY(EditAnywhere, Category=\"Uxt Pressable Button\", BlueprintGetter=\"IsInitiallyChecked\", BlueprintSetter=\"SetIsInitiallyChecked\") Should the button be toggled on or off at BeginPlay? Declaration protected: UPROPERTY(EditAnywhere, Category=\"Uxt Pressable Button\", BlueprintGetter=\"IsInitiallyChecked\", BlueprintSetter=\"SetIsInitiallyChecked\") bool bIsInitiallyChecked Parameters Type Name Description EditAnywhere _a_uxt_pressable_toggle_button_actor_UPROPERTY_EditAnywhere_Category_BlueprintGetter_BlueprintSetter_ Category _a_uxt_pressable_toggle_button_actor_UPROPERTY_EditAnywhere_Category_BlueprintGetter_BlueprintSetter_ BlueprintGetter _a_uxt_pressable_toggle_button_actor_UPROPERTY_EditAnywhere_Category_BlueprintGetter_BlueprintSetter_ BlueprintSetter _a_uxt_pressable_toggle_button_actor_UPROPERTY_EditAnywhere_Category_BlueprintGetter_BlueprintSetter_ Fields | Improve this Doc View Source bToggleOnRelease Should the button toggle on press or release? Declaration protected: bool bToggleOnRelease= false Field Value Type Description bool | Improve this Doc View Source TogglePlateComponent Visual component to indicate the toggled state. Declaration protected: UUxtBackPlateComponent * TogglePlateComponent= nullptr Field Value Type Description UUxtBackPlateComponent * | Improve this Doc View Source ToggleStateComponent Component which keeps track of the toggled state. Declaration protected: UUxtToggleStateComponent * ToggleStateComponent= nullptr Field Value Type Description UUxtToggleStateComponent * Methods | Improve this Doc View Source BeginPlay() Subscribes to toggle events and sets the initial toggle state. Declaration public: virtual void BeginPlay() override | Improve this Doc View Source ConstructVisuals() Adds toggle visuals and components. Declaration public: virtual void ConstructVisuals() override Overrides AUxtPressableButtonActor::ConstructVisuals() | Improve this Doc View Source IsInitiallyChecked() Gets if the button was toggled on at BeginPlay. Declaration public: bool IsInitiallyChecked() const Returns Type Description bool | Improve this Doc View Source OnButtonPressed(UUxtPressableButtonComponent *Button, UUxtPointerComponent *Pointer) Button pressed event delegate. Declaration protected: virtual void OnButtonPressed(UUxtPressableButtonComponent *Button, UUxtPointerComponent *Pointer) override Parameters Type Name Description UUxtPressableButtonComponent * Button UUxtPointerComponent * Pointer Overrides AUxtPressableButtonActor::OnButtonPressed(UUxtPressableButtonComponent *Button, UUxtPointerComponent *Pointer) | Improve this Doc View Source OnButtonReleased(UUxtPressableButtonComponent *Button, UUxtPointerComponent *Pointer) Button released event delegate. Declaration protected: virtual void OnButtonReleased(UUxtPressableButtonComponent *Button, UUxtPointerComponent *Pointer) override Parameters Type Name Description UUxtPressableButtonComponent * Button UUxtPointerComponent * Pointer Overrides AUxtPressableButtonActor::OnButtonReleased(UUxtPressableButtonComponent *Button, UUxtPointerComponent *Pointer) | Improve this Doc View Source OnButtonToggled(UUxtToggleStateComponent *ToggleState) Updates the toggle visuals when the toggles state changes. Declaration protected: virtual void OnButtonToggled(UUxtToggleStateComponent *ToggleState) Parameters Type Name Description UUxtToggleStateComponent * ToggleState | Improve this Doc View Source OnConstruction(const FTransform &Transform) Ensures the toggle visuals get updated when constructed. Declaration public: virtual void OnConstruction(const FTransform &Transform) override Parameters Type Name Description const FTransform & Transform Overrides AUxtPressableButtonActor::OnConstruction(const FTransform &Transform) | Improve this Doc View Source RemoveTogglePlate() Option to remove the toggle plate if it is not needed for this button (for example in derived classes). Declaration public: void RemoveTogglePlate() | Improve this Doc View Source SetIsInitiallyChecked(bool InitiallyChecked) Sets if the button was toggled on at BeginPlay. This method has no function after BeginPlay. Declaration public: void SetIsInitiallyChecked(bool InitiallyChecked) Parameters Type Name Description bool InitiallyChecked | Improve this Doc View Source UpdateToggleVisuals() Alters the toggle visuals when the toggle state changes. Declaration public: virtual void UpdateToggleVisuals()"
  },
  "api/_a_uxt_pressable_radio_button_actor.html": {
    "href": "api/_a_uxt_pressable_radio_button_actor.html",
    "title": "Class AUxtPressableRadioButtonActor | UXT Documentation",
    "keywords": "Class AUxtPressableRadioButtonActor A derived actor of AUxtPressableToggleButtonActor which represents the toggle state with a circle icon. Radio buttons are normally used in groups alongside the UUxtToggleGroupComponent . Inheritance System::Object AActor AUxtBasePressableButtonActor AUxtPressableButtonActor AUxtPressableToggleButtonActor AUxtPressableRadioButtonActor Inherited Members AUxtPressableButtonActor::AnimateFocus(float DeltaTime) AUxtPressableButtonActor::AnimatePulse(float DeltaTime) AUxtPressableButtonActor::AudioComponent AUxtBasePressableButtonActor::AUxtBasePressableButtonActor() AUxtPressableButtonActor::AUxtPressableButtonActor() AUxtPressableToggleButtonActor::AUxtPressableToggleButtonActor() AUxtPressableButtonActor::BackPlateMeshComponent AUxtPressableButtonActor::BackPlatePivotComponent AUxtPressableButtonActor::bCanEditIconBrush AUxtPressableToggleButtonActor::BeginPlay() AUxtPressableButtonActor::BeginPulse(const UUxtPointerComponent *Pointer) AUxtPressableButtonActor::bIsPlated AUxtPressableToggleButtonActor::bToggleOnRelease AUxtPressableButtonActor::ButtonBrush AUxtBasePressableButtonActor::ButtonComponent AUxtPressableButtonActor::ConstructLabel() AUxtPressableToggleButtonActor::ConstructVisuals() AUxtPressableButtonActor::CreateAndAttachComponent(FName Name, USceneComponent *Parent) AUxtPressableButtonActor::FocusTimer AUxtPressableButtonActor::FrontPlateCenterComponent AUxtPressableButtonActor::FrontPlateMeshComponent AUxtPressableButtonActor::FrontPlatePivotComponent AUxtPressableButtonActor::GetButtonBrush() AUxtBasePressableButtonActor::GetButtonComponent() AUxtBasePressableButtonActor::GetFarTarget() AUxtBasePressableButtonActor::GetFarTarget_Implementation() AUxtPressableButtonActor::GetIconBrush() AUxtPressableButtonActor::GetLabel() AUxtPressableButtonActor::GetLabelTextBrush() AUxtPressableButtonActor::GetMillimeterSize() AUxtBasePressableButtonActor::GetPokeTarget() AUxtBasePressableButtonActor::GetPokeTarget_Implementation() AUxtPressableButtonActor::GetSize() AUxtPressableButtonActor::IconComponent AUxtPressableToggleButtonActor::IsInitiallyChecked() AUxtPressableButtonActor::IsPlated() AUxtPressableButtonActor::IsPulsing() AUxtPressableButtonActor::Label AUxtPressableButtonActor::LabelComponent AUxtPressableButtonActor::LabelTextBrush AUxtPressableButtonActor::MaterialIndex AUxtPressableButtonActor::MillimeterSize AUxtPressableButtonActor::OnBeginFocus(UUxtPressableButtonComponent *Button, UUxtPointerComponent *Pointer, bool WasAlreadyFocused) AUxtPressableButtonActor::OnButtonDisabled(UUxtPressableButtonComponent *Button) AUxtPressableButtonActor::OnButtonEnabled(UUxtPressableButtonComponent *Button) AUxtPressableToggleButtonActor::OnButtonPressed(UUxtPressableButtonComponent *Button, UUxtPointerComponent *Pointer) AUxtPressableToggleButtonActor::OnButtonReleased(UUxtPressableButtonComponent *Button, UUxtPointerComponent *Pointer) AUxtPressableToggleButtonActor::OnButtonToggled(UUxtToggleStateComponent *ToggleState) AUxtPressableToggleButtonActor::OnConstruction(const FTransform &Transform) AUxtPressableButtonActor::PrePulseMaterial AUxtPressableButtonActor::PulseFadeTimer AUxtPressableButtonActor::PulseMaterialInstance AUxtPressableButtonActor::PulseTimer AUxtPressableToggleButtonActor::RemoveTogglePlate() AUxtPressableButtonActor::SetButtonBrush(const FUxtButtonBrush &Brush) AUxtPressableButtonActor::SetIconBrush(const FUxtIconBrush &Brush) AUxtPressableToggleButtonActor::SetIsInitiallyChecked(bool InitiallyChecked) AUxtPressableButtonActor::SetIsPlated(bool IsPlated) AUxtPressableButtonActor::SetLabel(const FText &NewLabel) AUxtPressableButtonActor::SetLabelTextBrush(const FUxtTextBrush &Brush) AUxtPressableButtonActor::SetMillimeterSize(FVector Size) AUxtPressableButtonActor::SetSize(FVector Size) AUxtPressableButtonActor::Tick(float DeltaTime) AUxtPressableToggleButtonActor::TogglePlateComponent AUxtPressableToggleButtonActor::ToggleStateComponent AUxtPressableToggleButtonActor::UPROPERTY(EditAnywhere, Category=\"Uxt Pressable Button\", BlueprintGetter=\"IsInitiallyChecked\", BlueprintSetter=\"SetIsInitiallyChecked\") AUxtPressableButtonActor::UPROPERTY(EditAnywhere, Category=\"Uxt Pressable Button\", BlueprintGetter=\"GetIconBrush\", BlueprintSetter=\"SetIconBrush\", meta=(EditCondition=\"bCanEditIconBrush\")) Namespace : Assembly : .dll Syntax public: class AUxtPressableRadioButtonActor : public xtPressableToggleButtonActor Constructors | Improve this Doc View Source AUxtPressableRadioButtonActor() Declaration public: AUxtPressableRadioButtonActor() Fields | Improve this Doc View Source CenterIconComponent Displays the radio button's center icon which gets toggled on and off. Declaration protected: UTextRenderComponent * CenterIconComponent= nullptr Field Value Type Description UTextRenderComponent * Methods | Improve this Doc View Source ConstructIcon() Adds toggle visuals. Declaration public: virtual void ConstructIcon() override Overrides AUxtPressableButtonActor::ConstructIcon() | Improve this Doc View Source UpdateToggleVisuals() Alters the toggle visuals when the toggle state changes. Declaration public: virtual void UpdateToggleVisuals() override Overrides AUxtPressableToggleButtonActor::UpdateToggleVisuals()"
  },
  "api/_u_uxt_grab_handler.html": {
    "href": "api/_u_uxt_grab_handler.html",
    "title": "Class UUxtGrabHandler | UXT Documentation",
    "keywords": "Class UUxtGrabHandler Inheritance System::Object UInterface UUxtGrabHandler Namespace : Assembly : .dll Syntax public: class UUxtGrabHandler"
  },
  "api/_u_uxt_function_library.html": {
    "href": "api/_u_uxt_function_library.html",
    "title": "Class UUxtFunctionLibrary | UXT Documentation",
    "keywords": "Class UUxtFunctionLibrary Library of utility functions for UX Tools. Inheritance System::Object UBlueprintFunctionLibrary UUxtFunctionLibrary Namespace : Assembly : .dll Syntax public: class UUxtFunctionLibrary Fields | Improve this Doc View Source bUseTestData When true, the methods in this class will use test data. Intended for tests and internal usage only. Declaration public: static bool bUseTestData= false Field Value Type Description bool | Improve this Doc View Source TestHeadPose When bUseTestData is true, GetHeadPose will return this transform. Declaration public: static FTransform TestHeadPose= FTransform::Identity Field Value Type Description FTransform Methods | Improve this Doc View Source GetHeadPose(UObject *WorldContextObject) Returns the world space position and orientation of the head. Declaration public: static FTransform GetHeadPose(UObject *WorldContextObject) Parameters Type Name Description UObject * WorldContextObject Returns Type Description FTransform | Improve this Doc View Source GetSceneComponentFromReference(const FComponentReference &ComponentRef, AActor *Owner) Returns the scene component the passed component reference is pointing to if there is any - else will return nullptr. Replicates FComponentReference::GetComponent() functionality, except it does not use FProperty to detect components. This allows it to detect components not contained in a blueprint. Declaration public: static USceneComponent * GetSceneComponentFromReference(const FComponentReference &ComponentRef, AActor *Owner) Parameters Type Name Description const FComponentReference & ComponentRef AActor * Owner Returns Type Description USceneComponent * | Improve this Doc View Source IsInEditor() Returns true if we are running in editor (not game mode or VR preview). Declaration public: static bool IsInEditor() Returns Type Description bool"
  },
  "api/_i_uxt_poke_target.html": {
    "href": "api/_i_uxt_poke_target.html",
    "title": "Class IUxtPokeTarget | UXT Documentation",
    "keywords": "Class IUxtPokeTarget Interface to implement to enable poke interaction for given primitives. Inheritance System::Object IUxtPokeTarget Namespace : Assembly : .dll Syntax public: class IUxtPokeTarget Methods | Improve this Doc View Source GetClosestPoint(const UPrimitiveComponent *Primitive, const FVector &Point, FVector &OutClosestPoint, FVector &OutNormal) Returns the closest point to Point on the given Primitive. Also provides the surface normal. Declaration public: bool GetClosestPoint(const UPrimitiveComponent *Primitive, const FVector &Point, FVector &OutClosestPoint, FVector &OutNormal) const Parameters Type Name Description const UPrimitiveComponent * Primitive const FVector & Point FVector & OutClosestPoint FVector & OutNormal Returns Type Description bool | Improve this Doc View Source GetPokeBehaviour() Returns which poke behaviour this target supports. Declaration public: EUxtPokeBehaviour GetPokeBehaviour() const Returns Type Description EUxtPokeBehaviour | Improve this Doc View Source IsPokeFocusable(const UPrimitiveComponent *Primitive) Returns true if the given primitive should be considerered a valid focus target. Declaration public: bool IsPokeFocusable(const UPrimitiveComponent *Primitive) const Parameters Type Name Description const UPrimitiveComponent * Primitive Returns Type Description bool"
  },
  "api/_i_uxt_poke_handler.html": {
    "href": "api/_i_uxt_poke_handler.html",
    "title": "Class IUxtPokeHandler | UXT Documentation",
    "keywords": "Class IUxtPokeHandler Interface for components that can be poked. Inheritance System::Object IUxtPokeHandler Namespace : Assembly : .dll Syntax public: class IUxtPokeHandler Methods | Improve this Doc View Source CanHandlePoke(UPrimitiveComponent *Primitive) Returns true if the this can handle events from this primitive. Declaration public: bool CanHandlePoke(UPrimitiveComponent *Primitive) const Parameters Type Name Description UPrimitiveComponent * Primitive Returns Type Description bool | Improve this Doc View Source OnBeginPoke(UUxtNearPointerComponent *Pointer) Raised when a pointer poke volume starts overlapping the actor. Declaration public: void OnBeginPoke(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnEndPoke(UUxtNearPointerComponent *Pointer) Raised when a pointer poke volume stops overlapping the actor. Declaration public: void OnEndPoke(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnEnterPokeFocus(UUxtNearPointerComponent *Pointer) Raised when a pointer focuses the actor. Declaration public: void OnEnterPokeFocus(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnExitPokeFocus(UUxtNearPointerComponent *Pointer) Raised when a pointer stops focusing the actor. Declaration public: void OnExitPokeFocus(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnUpdatePoke(UUxtNearPointerComponent *Pointer) Raised while a pointer poke volume is overlapping the actor. Declaration public: void OnUpdatePoke(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnUpdatePokeFocus(UUxtNearPointerComponent *Pointer) Raised when a pointer has been updated while focused. Declaration public: void OnUpdatePokeFocus(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer"
  },
  "api/_u_uxt_tap_to_place_component.html": {
    "href": "api/_u_uxt_tap_to_place_component.html",
    "title": "Class UUxtTapToPlaceComponent | UXT Documentation",
    "keywords": "Class UUxtTapToPlaceComponent Tap to place is a control used to transform objects at a distance. The control allows you to select an object you wish to place using far interaction. After that, the object will be locked to your gaze and will be placed against surfaces and other objects. Any subsequent far release will end placement, even if the pointer is not pointing at the object being placed. Inheritance System::Object UActorComponent UUxtTapToPlaceComponent Inherited Members IUxtFarHandler::CanHandleFar(UPrimitiveComponent *Primitive) IUxtFarTarget::IsFarFocusable(const UPrimitiveComponent *Primitive) IUxtFarHandler::OnEnterFarFocus(UUxtFarPointerComponent *Pointer) IUxtFarHandler::OnExitFarFocus(UUxtFarPointerComponent *Pointer) IUxtFarHandler::OnFarDragged(UUxtFarPointerComponent *Pointer) IUxtFarHandler::OnFarPressed(UUxtFarPointerComponent *Pointer) IUxtFarHandler::OnFarReleased(UUxtFarPointerComponent *Pointer) IUxtFarHandler::OnUpdatedFarFocus(UUxtFarPointerComponent *Pointer) Namespace : Assembly : .dll Syntax public: class UUxtTapToPlaceComponent : public xtFarTarget, public xtFarHandler Constructors | Improve this Doc View Source UUxtTapToPlaceComponent() Declaration public: UUxtTapToPlaceComponent() Fields | Improve this Doc View Source bInterpolatePose Option to ignore interpolation between follow poses Declaration public: bool bInterpolatePose= true Field Value Type Description bool | Improve this Doc View Source DefaultPlacementDistance Distance to place the object at if no obstructing surface. Declaration public: float DefaultPlacementDistance= 150 Field Value Type Description float | Improve this Doc View Source KeepOrientationVertical Whether the orientation of the object should pitch or roll. Declaration public: bool KeepOrientationVertical= false Field Value Type Description bool | Improve this Doc View Source LerpTime Rate at which its owner will move toward default distance when angular leashing Declaration public: float LerpTime= 0.1f Field Value Type Description float | Improve this Doc View Source MaxRaycastDistance Max distance to cast to when checking for obstructing surfaces. Declaration public: float MaxRaycastDistance= 2000 Field Value Type Description float | Improve this Doc View Source OnBeginFocus Event raised when a pointer starts focusing the placeable object. bWasAlreadyFocused indicates if the object was already focused by another pointer. Declaration public: FUxtTapToPlaceBeginFocusDelegate OnBeginFocus Field Value Type Description FUxtTapToPlaceBeginFocusDelegate | Improve this Doc View Source OnBeginPlacing Event raised when a placeable object is selected. Declaration public: FUxtTapToPlaceBeginPlacingDelegate OnBeginPlacing Field Value Type Description FUxtTapToPlaceBeginPlacingDelegate | Improve this Doc View Source OnEndFocus Event raised when a pointer ends focusing the placeable object. bIsStillFocused indicates if the object is still focused by another pointer. Declaration public: FUxtTapToPlaceEndFocusDelegate OnEndFocus Field Value Type Description FUxtTapToPlaceEndFocusDelegate | Improve this Doc View Source OnEndPlacing Event raised when a placeable object is deselected and placed. Declaration public: FUxtTapToPlaceEndPlacingDelegate OnEndPlacing Field Value Type Description FUxtTapToPlaceEndPlacingDelegate | Improve this Doc View Source OnUpdateFocus Event raised when a focusing pointer updates. Declaration public: FUxtTapToPlaceUpdateFocusDelegate OnUpdateFocus Field Value Type Description FUxtTapToPlaceUpdateFocusDelegate | Improve this Doc View Source OrientationType How the object is oriented against hit surfaces. Declaration public: TEnumAsByte<EUxtTapToPlaceOrientBehavior> OrientationType= EUxtTapToPlaceOrientBehavior::AlignToSurface Field Value Type Description TEnumAsByte<EUxtTapToPlaceOrientBehavior> | Improve this Doc View Source PlacementType How the target should be placed, using head or far pointer. Declaration public: TEnumAsByte<EUxtTapToPlaceMode> PlacementType= EUxtTapToPlaceMode::Head Field Value Type Description TEnumAsByte<EUxtTapToPlaceMode> | Improve this Doc View Source TraceChannel Trace channel for raycast. Declaration public: TEnumAsByte<ECollisionChannel> TraceChannel= ECollisionChannel::ECC_Visibility Field Value Type Description TEnumAsByte<ECollisionChannel> Methods | Improve this Doc View Source BeginPlay() Declaration protected: virtual void BeginPlay() override | Improve this Doc View Source CanHandleFar_Implementation(UPrimitiveComponent *Primitive) Declaration protected: virtual bool CanHandleFar_Implementation(UPrimitiveComponent *Primitive) const override Parameters Type Name Description UPrimitiveComponent * Primitive Returns Type Description bool | Improve this Doc View Source EndPlacement() End placement of the target component. Declaration public: void EndPlacement() | Improve this Doc View Source EndPlay(const EEndPlayReason::Type EndPlayReason) Declaration protected: virtual void EndPlay(const EEndPlayReason::Type EndPlayReason) override Parameters Type Name Description const EEndPlayReason::Type EndPlayReason | Improve this Doc View Source GetTargetComponent() Get the component to transform. Declaration public: UPrimitiveComponent * GetTargetComponent() const Returns Type Description UPrimitiveComponent * | Improve this Doc View Source IsFarFocusable_Implementation(const UPrimitiveComponent *Primitive) Declaration protected: virtual bool IsFarFocusable_Implementation(const UPrimitiveComponent *Primitive) const override Parameters Type Name Description const UPrimitiveComponent * Primitive Returns Type Description bool | Improve this Doc View Source OnEnterFarFocus_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnEnterFarFocus_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnExitFarFocus_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnExitFarFocus_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnFarPressed_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnFarPressed_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnFarReleased_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnFarReleased_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnUpdatedFarFocus_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnUpdatedFarFocus_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source SetTargetComponent(UPrimitiveComponent *Target) Set the component to transform. Declaration public: void SetTargetComponent(UPrimitiveComponent *Target) Parameters Type Name Description UPrimitiveComponent * Target | Improve this Doc View Source StartPlacement() Start placement of the target component. Declaration public: void StartPlacement() | Improve this Doc View Source TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) Declaration protected: virtual void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) override Parameters Type Name Description float DeltaTime ELevelTick TickType FActorComponentTickFunction * ThisTickFunction"
  },
  "api/_u_uxt_runtime_settings.html": {
    "href": "api/_u_uxt_runtime_settings.html",
    "title": "Class UUxtRuntimeSettings | UXT Documentation",
    "keywords": "Class UUxtRuntimeSettings Settings for UXTools . Inheritance System::Object UObject UUxtRuntimeSettings Namespace : Assembly : .dll Syntax public: class UUxtRuntimeSettings Constructors | Improve this Doc View Source UPROPERTY(GlobalConfig, EditAnywhere, Category=\"Uxt Runtime Settings\", Meta=(DisplayName=\"Start With Positional Head Tracking\", Tooltip=\"Enable positional head tracking on game start.\")) Enable positional head tracking on game start. Declaration public: UPROPERTY(GlobalConfig, EditAnywhere, Category=\"Uxt Runtime Settings\", Meta=(DisplayName=\"Start With Positional Head Tracking\", Tooltip=\"Enable positional head tracking on game start.\")) bool bStartWithPositionalHeadTracking Parameters Type Name Description GlobalConfig _u_uxt_runtime_settings_UPROPERTY_GlobalConfig_EditAnywhere_Category_Meta_ EditAnywhere _u_uxt_runtime_settings_UPROPERTY_GlobalConfig_EditAnywhere_Category_Meta_ Category _u_uxt_runtime_settings_UPROPERTY_GlobalConfig_EditAnywhere_Category_Meta_ Meta _u_uxt_runtime_settings_UPROPERTY_GlobalConfig_EditAnywhere_Category_Meta_ | Improve this Doc View Source UUxtRuntimeSettings(const FObjectInitializer &ObjectInitializer) Declaration public: UUxtRuntimeSettings(const FObjectInitializer &ObjectInitializer) Parameters Type Name Description const FObjectInitializer & ObjectInitializer Fields | Improve this Doc View Source HandPoseButtonMappings Declaration public: FUxtRuntimeSettingsButtonSet HandPoseButtonMappings Field Value Type Description FUxtRuntimeSettingsButtonSet Methods | Improve this Doc View Source Get() Declaration public: static UUxtRuntimeSettings * Get() Returns Type Description UUxtRuntimeSettings *"
  },
  "api/_u_uxt_hand_tracking_function_library.html": {
    "href": "api/_u_uxt_hand_tracking_function_library.html",
    "title": "Class UUxtHandTrackingFunctionLibrary | UXT Documentation",
    "keywords": "Class UUxtHandTrackingFunctionLibrary Library of hand tracking functions for UX Tools. Inheritance System::Object UBlueprintFunctionLibrary UUxtHandTrackingFunctionLibrary Namespace : Assembly : .dll Syntax public: class UUxtHandTrackingFunctionLibrary Methods | Improve this Doc View Source GetHandJointState(EControllerHand Hand, EUxtHandJoint Joint, FQuat &OutOrientation, FVector &OutPosition, float &OutRadius) Obtain the state of the given joint. Returns false if the hand is not currently tracked, in which case the values of the output parameters are unchanged. Declaration public: static bool GetHandJointState(EControllerHand Hand, EUxtHandJoint Joint, FQuat &OutOrientation, FVector &OutPosition, float &OutRadius) Parameters Type Name Description EControllerHand Hand EUxtHandJoint Joint FQuat & OutOrientation FVector & OutPosition float & OutRadius Returns Type Description bool | Improve this Doc View Source GetHandPointerPose(EControllerHand Hand, FQuat &OutOrientation, FVector &OutPosition) Obtain the pointer pose. Returns false if the hand is not tracked this frame, in which case the value of the output parameter is unchanged. Declaration public: static bool GetHandPointerPose(EControllerHand Hand, FQuat &OutOrientation, FVector &OutPosition) Parameters Type Name Description EControllerHand Hand FQuat & OutOrientation FVector & OutPosition Returns Type Description bool | Improve this Doc View Source GetIsHandGrabbing(EControllerHand Hand, bool &OutIsGrabbing) Obtain current grabbed state. Returns false if the hand is not currently tracked, in which case the value of the output parameter is unchanged. Declaration public: static bool GetIsHandGrabbing(EControllerHand Hand, bool &OutIsGrabbing) Parameters Type Name Description EControllerHand Hand bool & OutIsGrabbing Returns Type Description bool | Improve this Doc View Source GetIsHandSelectPressed(EControllerHand Hand, bool &OutIsSelectPressed) Obtain current selection state. Returns false if the hand is not currently tracked, in which case the value of the output parameter is unchanged. Declaration public: static bool GetIsHandSelectPressed(EControllerHand Hand, bool &OutIsSelectPressed) Parameters Type Name Description EControllerHand Hand bool & OutIsSelectPressed Returns Type Description bool | Improve this Doc View Source IsHandTracked(EControllerHand Hand) Returns whether the given hand is tracked. Declaration public: static bool IsHandTracked(EControllerHand Hand) Parameters Type Name Description EControllerHand Hand Returns Type Description bool"
  },
  "api/_u_uxt_follow_component.html": {
    "href": "api/_u_uxt_follow_component.html",
    "title": "Class UUxtFollowComponent | UXT Documentation",
    "keywords": "Class UUxtFollowComponent The follow component has three different constraints that keeps its owner in front of the camera: Angular Clamp, Distance Clamp, and Orientation. The combination of Angular and Distance Clamp creates a frustum in front of the camera where its owner can be. If its owner is outside that frustum it is adjusted. Angular Clamp: The objective of this constraint is to ensure that the reference forward vector remains within the bounds set by the leashing parameters. To do this, determine the angles between toTarget and the leashing bounds about the global Z-axis and the reference's Y-axis. If the toTarget falls within the leashing bounds, then we don't have to modify it. Otherwise, we apply a correction rotation to bring it within bounds. This will ensure that the its owner stays within the top, bottom, right and left planes of the frustum. Distance Clamp: The objective of this constraint is to ensure that the following actor stays within bounds set by the distance parameters. To do this, we measure the current distance from the camera to the its owner. If the distance is within the MinimumDistance and MaximumDistance then we don't have to modify it. Otherwise, we push away or pull in the its owner along the reference forward vector. This will ensure that the its owner stays within the near and far planes of the frustum. Orientation: The two options provided are constant FaceCamera or WorldLock. While world locked there are three conditions that will cause the its owner to face the camera: Angular Clamps Distance Clamps The angle between the forward vector of the its owner and toTarget vector (vector between the camera and the its owner) is larger than dead zone angle parameter Inheritance System::Object UActorComponent UUxtFollowComponent Namespace : Assembly : .dll Syntax public: class UUxtFollowComponent Constructors | Improve this Doc View Source UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"UxtFollow\", meta=(EditCondition=\"bUseFixedVerticalOffset\", EditConditionHides)) Fixed vertical position offset distance. Declaration public: virtual UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"UxtFollow\", meta=(EditCondition=\"bUseFixedVerticalOffset\", EditConditionHides)) float FixedVerticalOffset=0.0f Parameters Type Name Description EditAnywhere _u_uxt_follow_component_UPROPERTY_EditAnywhere_BlueprintReadWrite_Category_meta_ BlueprintReadWrite _u_uxt_follow_component_UPROPERTY_EditAnywhere_BlueprintReadWrite_Category_meta_ Category _u_uxt_follow_component_UPROPERTY_EditAnywhere_BlueprintReadWrite_Category_meta_ meta _u_uxt_follow_component_UPROPERTY_EditAnywhere_BlueprintReadWrite_Category_meta_ | Improve this Doc View Source UUxtFollowComponent() Declaration public: UUxtFollowComponent() Fields | Improve this Doc View Source ActorToFollow Actor that this component will follow. If null, this component will follow the camera Declaration public: AActor * ActorToFollow Field Value Type Description AActor * | Improve this Doc View Source bIgnoreAngleClamp Option to ignore angle clamping Declaration public: bool bIgnoreAngleClamp= false Field Value Type Description bool | Improve this Doc View Source bIgnoreCameraPitchAndRoll Option to ignore the pitch and roll of the camera Declaration public: bool bIgnoreCameraPitchAndRoll= false Field Value Type Description bool | Improve this Doc View Source bIgnoreDistanceClamp Option to ignore distance clamping Declaration public: bool bIgnoreDistanceClamp= false Field Value Type Description bool | Improve this Doc View Source bInterpolatePose Option to ignore interpolation between follow poses Declaration public: bool bInterpolatePose= true Field Value Type Description bool | Improve this Doc View Source bUseFixedVerticalOffset Ignore vertical movement and lock the Y position of the object. Declaration public: bool bUseFixedVerticalOffset= false Field Value Type Description bool | Improve this Doc View Source DefaultDistance Default distance from eye to position its owner around, i.e. the sphere radius Declaration public: float DefaultDistance= 75.0f Field Value Type Description float | Improve this Doc View Source LerpTime Rate at which its owner will move toward default distance when angular leashing Declaration public: float LerpTime= 0.1f Field Value Type Description float | Improve this Doc View Source MaximumDistance Max distance from eye to its owner Declaration public: float MaximumDistance= 100.0f Field Value Type Description float | Improve this Doc View Source MaxViewHorizontalDegrees The horizontal angle from the camera forward axis to the owner will not exceed this value Declaration public: float MaxViewHorizontalDegrees= 30.0f Field Value Type Description float | Improve this Doc View Source MaxViewVerticalDegrees The vertical angle from the camera forward axis to the owner will not exceed this value Declaration public: float MaxViewVerticalDegrees= 30.0f Field Value Type Description float | Improve this Doc View Source MinimumDistance Min distance from eye to position its owner around, i.e. the sphere radius Declaration public: float MinimumDistance= 50.0f Field Value Type Description float | Improve this Doc View Source OrientationType Orientation Type Declaration public: TEnumAsByte<EUxtFollowOrientBehavior> OrientationType= EUxtFollowOrientBehavior::WorldLock Field Value Type Description TEnumAsByte<EUxtFollowOrientBehavior> | Improve this Doc View Source OrientToCameraDeadzoneDegrees The owner will not reorient until the angle between its forward vector and the vector to the camera is greater than this value Declaration public: float OrientToCameraDeadzoneDegrees= 60.0f Field Value Type Description float | Improve this Doc View Source VerticalMaxDistance Max vertical distance between the owner and camera Declaration public: float VerticalMaxDistance= 0.0f Field Value Type Description float Methods | Improve this Doc View Source BeginPlay() Declaration protected: virtual void BeginPlay() override | Improve this Doc View Source Recenter() Force the owner to recenter in the camera's field of view. Declaration public: void Recenter() | Improve this Doc View Source TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) Declaration protected: virtual void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) override Parameters Type Name Description float DeltaTime ELevelTick TickType FActorComponentTickFunction * ThisTickFunction"
  },
  "api/_u_uxt_face_user_constraint.html": {
    "href": "api/_u_uxt_face_user_constraint.html",
    "title": "Class UUxtFaceUserConstraint | UXT Documentation",
    "keywords": "Class UUxtFaceUserConstraint Component for fixing the rotation of a manipulated object such that it always faces (or faces away from) the user Usage: Attach to actor that the constraint should be applied to. Inheritance System::Object UActorComponent UUxtTransformConstraint UUxtFaceUserConstraint Inherited Members UUxtTransformConstraint::HandType UUxtTransformConstraint::Initialize(const FTransform &WorldPose) UUxtTransformConstraint::InteractionMode UUxtTransformConstraint::TargetComponent UUxtTransformConstraint::WorldPoseOnManipulationStart Namespace : Assembly : .dll Syntax public: class UUxtFaceUserConstraint : public xtTransformConstraint Fields | Improve this Doc View Source bFaceAway Option to use this constraint to face away from the user. Declaration public: bool bFaceAway= false Field Value Type Description bool Methods | Improve this Doc View Source ApplyConstraint(FTransform &Transform) Applies constraints to transforms during manipulation Declaration public: virtual void ApplyConstraint(FTransform &Transform) const Parameters Type Name Description FTransform & Transform Overrides UUxtTransformConstraint::ApplyConstraint(FTransform &Transform) | Improve this Doc View Source GetConstraintType() Enabled manipulation modes. Declaration public: virtual EUxtTransformMode GetConstraintType() const Returns Type Description EUxtTransformMode Overrides UUxtTransformConstraint::GetConstraintType()"
  },
  "api/_u_uxt_collection_object.html": {
    "href": "api/_u_uxt_collection_object.html",
    "title": "Class UUxtCollectionObject | UXT Documentation",
    "keywords": "Class UUxtCollectionObject Inheritance System::Object UInterface UUxtCollectionObject Namespace : Assembly : .dll Syntax public: class UUxtCollectionObject"
  },
  "api/_uxt_two_hand_manipulation_scale_logic.html": {
    "href": "api/_uxt_two_hand_manipulation_scale_logic.html",
    "title": "Class UxtTwoHandManipulationScaleLogic | UXT Documentation",
    "keywords": "Class UxtTwoHandManipulationScaleLogic Implements a scale logic that will scale an object based on the ratio of the distance between hands: object_scale = start_object_scale * curr_hand_dist / start_hand_dist Usage: When a manipulation starts, call Setup. Call Update with currently available grab pointers to get a new scale for the object. Inheritance System::Object UxtTwoHandManipulationScaleLogic Inherited Members UxtTwoHandManipulationScaleLogic Namespace : Assembly : .dll Syntax public: class UxtTwoHandManipulationScaleLogic Methods | Improve this Doc View Source Setup(GrabPointers PointerData, const FVector &ObjectScale) Sets up scale logic by storing initial object scale and hand distance Declaration public: void Setup(GrabPointers PointerData, const FVector &ObjectScale) Parameters Type Name Description GrabPointers PointerData const FVector & ObjectScale | Improve this Doc View Source Update(GrabPointers PointerData) Updates the scale based on the current grab pointer locations. Returns the new object scale. Declaration public: FVector Update(GrabPointers PointerData) const Parameters Type Name Description GrabPointers PointerData Returns Type Description FVector"
  },
  "api/_u_uxt_pinch_slider_component.html": {
    "href": "api/_u_uxt_pinch_slider_component.html",
    "title": "Class UUxtPinchSliderComponent | UXT Documentation",
    "keywords": "Class UUxtPinchSliderComponent A slider that can be moved by grabbing / pinching a slider thumb. The thumb visuals must be set using the 'Visuals' property. Inheritance System::Object USceneComponent UUxtUIElementComponent UUxtPinchSliderComponent Inherited Members IUxtFarHandler::CanHandleFar(UPrimitiveComponent *Primitive) IUxtGrabHandler::CanHandleGrab(UPrimitiveComponent *Primitive) UUxtUIElementComponent::GetUIVisibilityInHierarchy() UUxtUIElementComponent::GetUIVisibilitySelf() IUxtFarTarget::IsFarFocusable(const UPrimitiveComponent *Primitive) IUxtGrabTarget::IsGrabFocusable(const UPrimitiveComponent *Primitive) UUxtUIElementComponent::OnAttachmentChanged() IUxtGrabHandler::OnBeginGrab(UUxtNearPointerComponent *Pointer) IUxtGrabHandler::OnEndGrab(UUxtNearPointerComponent *Pointer) IUxtFarHandler::OnEnterFarFocus(UUxtFarPointerComponent *Pointer) IUxtGrabHandler::OnEnterGrabFocus(UUxtNearPointerComponent *Pointer) IUxtFarHandler::OnExitFarFocus(UUxtFarPointerComponent *Pointer) IUxtGrabHandler::OnExitGrabFocus(UUxtNearPointerComponent *Pointer) IUxtFarHandler::OnFarDragged(UUxtFarPointerComponent *Pointer) IUxtFarHandler::OnFarPressed(UUxtFarPointerComponent *Pointer) IUxtFarHandler::OnFarReleased(UUxtFarPointerComponent *Pointer) UUxtUIElementComponent::OnHideElement UUxtUIElementComponent::OnShowElement IUxtFarHandler::OnUpdatedFarFocus(UUxtFarPointerComponent *Pointer) IUxtGrabHandler::OnUpdateGrab(UUxtNearPointerComponent *Pointer) IUxtGrabHandler::OnUpdateGrabFocus(UUxtNearPointerComponent *Pointer) UUxtUIElementComponent::RefreshUIElement() UUxtUIElementComponent::SetUIVisibility(EUxtUIElementVisibility NewVisibility) UUxtUIElementComponent::UUxtUIElementComponent() Namespace : Assembly : .dll Syntax public: class UUxtPinchSliderComponent : public xtUIElementComponent, public xtGrabTarget, public xtGrabHandler, public xtFarTarget, public xtFarHandler Fields | Improve this Doc View Source OnBeginFocus Event raised when a pointer starts focusing the slider. Declaration public: FUxtPinchSliderBeginFocusDelegate OnBeginFocus Field Value Type Description FUxtPinchSliderBeginFocusDelegate | Improve this Doc View Source OnBeginGrab Event raised when slider is grabbed. Declaration public: FUxtPinchSliderBeginGrabDelegate OnBeginGrab Field Value Type Description FUxtPinchSliderBeginGrabDelegate | Improve this Doc View Source OnDisable Event raised when slider is disabled. Declaration public: FUxtPinchSliderDisableDelegate OnDisable Field Value Type Description FUxtPinchSliderDisableDelegate | Improve this Doc View Source OnEnable Event raised when slider is enabled. Declaration public: FUxtPinchSliderEnableDelegate OnEnable Field Value Type Description FUxtPinchSliderEnableDelegate | Improve this Doc View Source OnEndFocus Event raised when a pointer stops focusing the slider. Declaration public: FUxtPinchSliderEndFocusDelegate OnEndFocus Field Value Type Description FUxtPinchSliderEndFocusDelegate | Improve this Doc View Source OnEndGrab Event raised when slider is released. Declaration public: FUxtPinchSliderEndGrabDelegate OnEndGrab Field Value Type Description FUxtPinchSliderEndGrabDelegate | Improve this Doc View Source OnUpdateFocus Event raised when a focusing pointer updates. Declaration public: FUxtPinchSliderUpdateFocusDelegate OnUpdateFocus Field Value Type Description FUxtPinchSliderUpdateFocusDelegate | Improve this Doc View Source OnUpdateState Event raised when slider changes state. Declaration public: FUxtPinchSliderUpdateStateDelegate OnUpdateState Field Value Type Description FUxtPinchSliderUpdateStateDelegate | Improve this Doc View Source OnUpdateValue Event raised when slider's value changes. Declaration public: FUxtPinchSliderUpdateValueDelegate OnUpdateValue Field Value Type Description FUxtPinchSliderUpdateValueDelegate Methods | Improve this Doc View Source BeginPlay() Declaration protected: virtual void BeginPlay() override Overrides UUxtUIElementComponent::BeginPlay() | Improve this Doc View Source CanHandleFar_Implementation(UPrimitiveComponent *Primitive) Declaration protected: virtual bool CanHandleFar_Implementation(UPrimitiveComponent *Primitive) const override Parameters Type Name Description UPrimitiveComponent * Primitive Returns Type Description bool | Improve this Doc View Source CanHandleGrab_Implementation(UPrimitiveComponent *Primitive) Declaration protected: virtual bool CanHandleGrab_Implementation(UPrimitiveComponent *Primitive) const override Parameters Type Name Description UPrimitiveComponent * Primitive Returns Type Description bool | Improve this Doc View Source GetCollisionProfile() Declaration public: FName GetCollisionProfile() const Returns Type Description FName | Improve this Doc View Source GetNumSteps() Declaration public: int GetNumSteps() const Returns Type Description int | Improve this Doc View Source GetSmoothing() Declaration public: float GetSmoothing() const Returns Type Description float | Improve this Doc View Source GetState() Get the current state of the slider. Declaration public: EUxtSliderState GetState() const Returns Type Description EUxtSliderState | Improve this Doc View Source GetTrackLength() Declaration public: float GetTrackLength() const Returns Type Description float | Improve this Doc View Source GetUseSteppedMovement() Declaration public: bool GetUseSteppedMovement() const Returns Type Description bool | Improve this Doc View Source GetValue() Declaration public: float GetValue() const Returns Type Description float | Improve this Doc View Source GetValueLowerBound() Declaration public: float GetValueLowerBound() const Returns Type Description float | Improve this Doc View Source GetValueUpperBound() Declaration public: float GetValueUpperBound() const Returns Type Description float | Improve this Doc View Source GetVisuals() Get the static mesh representing the thumb visuals. Declaration public: UStaticMeshComponent * GetVisuals() const Returns Type Description UStaticMeshComponent * | Improve this Doc View Source IsFarFocusable_Implementation(const UPrimitiveComponent *Primitive) Declaration protected: virtual bool IsFarFocusable_Implementation(const UPrimitiveComponent *Primitive) const override Parameters Type Name Description const UPrimitiveComponent * Primitive Returns Type Description bool | Improve this Doc View Source IsGrabFocusable_Implementation(const UPrimitiveComponent *Primitive) Declaration protected: virtual bool IsGrabFocusable_Implementation(const UPrimitiveComponent *Primitive) const override Parameters Type Name Description const UPrimitiveComponent * Primitive Returns Type Description bool | Improve this Doc View Source OnBeginGrab_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnBeginGrab_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnEndGrab_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnEndGrab_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnEnterFarFocus_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnEnterFarFocus_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnEnterGrabFocus_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnEnterGrabFocus_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnExitFarFocus_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnExitFarFocus_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnExitGrabFocus_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnExitGrabFocus_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnFarDragged_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnFarDragged_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnFarPressed_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnFarPressed_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnFarReleased_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnFarReleased_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnUpdatedFarFocus_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnUpdatedFarFocus_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnUpdateGrab_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnUpdateGrab_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnUpdateGrabFocus_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnUpdateGrabFocus_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source SetCollisionProfile(FName NewCollisionProfile) Declaration public: void SetCollisionProfile(FName NewCollisionProfile) Parameters Type Name Description FName NewCollisionProfile | Improve this Doc View Source SetEnabled(bool bEnabled) Set if the slider is enabled. Declaration public: void SetEnabled(bool bEnabled) Parameters Type Name Description bool bEnabled | Improve this Doc View Source SetNumSteps(int NewNumSteps) Declaration public: void SetNumSteps(int NewNumSteps) Parameters Type Name Description int NewNumSteps | Improve this Doc View Source SetSmoothing(float NewSmoothing) Declaration public: void SetSmoothing(float NewSmoothing) Parameters Type Name Description float NewSmoothing | Improve this Doc View Source SetTrackLength(float NewTrackLength) Declaration public: void SetTrackLength(float NewTrackLength) Parameters Type Name Description float NewTrackLength | Improve this Doc View Source SetUseSteppedMovement(bool bNewUseSteppedMovement) Declaration public: void SetUseSteppedMovement(bool bNewUseSteppedMovement) Parameters Type Name Description bool bNewUseSteppedMovement | Improve this Doc View Source SetValue(float NewValue) Declaration public: void SetValue(float NewValue) Parameters Type Name Description float NewValue | Improve this Doc View Source SetValueLowerBound(float NewLowerBound) Declaration public: void SetValueLowerBound(float NewLowerBound) Parameters Type Name Description float NewLowerBound | Improve this Doc View Source SetValueUpperBound(float NewUpperBound) Declaration public: void SetValueUpperBound(float NewUpperBound) Parameters Type Name Description float NewUpperBound | Improve this Doc View Source SetVisuals(const FComponentReference &NewVisuals) Set the thumb visuals using a component reference, this is necessary if the visuals will be serialized. Declaration public: void SetVisuals(const FComponentReference &NewVisuals) Parameters Type Name Description const FComponentReference & NewVisuals | Improve this Doc View Source SetVisuals(UStaticMeshComponent *NewVisuals) Set the static mesh representing the thumb visuals. Declaration public: void SetVisuals(UStaticMeshComponent *NewVisuals) Parameters Type Name Description UStaticMeshComponent * NewVisuals"
  },
  "api/_u_uxt_input_simulation_local_player_subsystem.html": {
    "href": "api/_u_uxt_input_simulation_local_player_subsystem.html",
    "title": "Class UUxtInputSimulationLocalPlayerSubsystem | UXT Documentation",
    "keywords": "Class UUxtInputSimulationLocalPlayerSubsystem Subsystem that creates an actor for simulation when a game is started. Inheritance System::Object ULocalPlayerSubsystem UUxtInputSimulationLocalPlayerSubsystem Namespace : Assembly : .dll Syntax public: class UUxtInputSimulationLocalPlayerSubsystem Methods | Improve this Doc View Source Deinitialize() Declaration public: virtual void Deinitialize() override | Improve this Doc View Source GetSimulationState() Get the persistent simulation state Declaration public: UUxtInputSimulationState * GetSimulationState() const Returns Type Description UUxtInputSimulationState * | Improve this Doc View Source Initialize(FSubsystemCollectionBase &Collection) Declaration public: virtual void Initialize(FSubsystemCollectionBase &Collection) override Parameters Type Name Description FSubsystemCollectionBase & Collection | Improve this Doc View Source ShouldCreateSubsystem(UObject *Outer) Declaration public: virtual bool ShouldCreateSubsystem(UObject *Outer) const override Parameters Type Name Description UObject * Outer Returns Type Description bool"
  },
  "api/_u_uxt_input_simulation_head_movement_component.html": {
    "href": "api/_u_uxt_input_simulation_head_movement_component.html",
    "title": "Class UUxtInputSimulationHeadMovementComponent | UXT Documentation",
    "keywords": "Class UUxtInputSimulationHeadMovementComponent Movement component that applies user input. Works similar to UFloatingPawnMovement, but does not require a APawn actor. Inheritance System::Object UMovementComponent UUxtInputSimulationHeadMovementComponent Namespace : Assembly : .dll Syntax public: class UUxtInputSimulationHeadMovementComponent Methods | Improve this Doc View Source AddMovementInput(const FVector &Movement) Add cumulative movement input in world space. Declaration public: void AddMovementInput(const FVector &Movement) Parameters Type Name Description const FVector & Movement | Improve this Doc View Source AddRotationInput(const FRotator &Rotation) Add cumulative rotation input relative to current world space orientation. Declaration public: void AddRotationInput(const FRotator &Rotation) Parameters Type Name Description const FRotator & Rotation | Improve this Doc View Source BeginPlay() Declaration public: virtual void BeginPlay() override | Improve this Doc View Source IsHeadMovementEnabled() Declaration public: bool IsHeadMovementEnabled() const Returns Type Description bool | Improve this Doc View Source SetHeadMovementEnabled(bool bEnable) Declaration public: void SetHeadMovementEnabled(bool bEnable) Parameters Type Name Description bool bEnable | Improve this Doc View Source TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) Declaration public: virtual void TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) override Parameters Type Name Description float DeltaTime enum ELevelTick TickType FActorComponentTickFunction * ThisTickFunction"
  },
  "api/_u_uxt_grab_target.html": {
    "href": "api/_u_uxt_grab_target.html",
    "title": "Class UUxtGrabTarget | UXT Documentation",
    "keywords": "Class UUxtGrabTarget Inheritance System::Object UInterface UUxtGrabTarget Namespace : Assembly : .dll Syntax public: class UUxtGrabTarget"
  },
  "api/_u_uxt_far_beam_component.html": {
    "href": "api/_u_uxt_far_beam_component.html",
    "title": "Class UUxtFarBeamComponent | UXT Documentation",
    "keywords": "Class UUxtFarBeamComponent When added to an actor with a far pointer, this component displays a beam from the pointer ray start to the current hit point. Inheritance System::Object USplineMeshComponent UUxtFarBeamComponent Namespace : Assembly : .dll Syntax public: class UUxtFarBeamComponent Constructors | Improve this Doc View Source UUxtFarBeamComponent() Declaration public: UUxtFarBeamComponent() Fields | Improve this Doc View Source HoverDistance Distance over the hit surface to place beam end at. Declaration public: float HoverDistance= 0.5f Field Value Type Description float Methods | Improve this Doc View Source BeginPlay() Declaration public: virtual void BeginPlay() override | Improve this Doc View Source EndPlay(const EEndPlayReason::Type EndPlayReason) Declaration public: virtual void EndPlay(const EEndPlayReason::Type EndPlayReason) override Parameters Type Name Description const EEndPlayReason::Type EndPlayReason | Improve this Doc View Source SetBeamMaterial(UMaterial *NewMaterial) Declaration public: void SetBeamMaterial(UMaterial *NewMaterial) Parameters Type Name Description UMaterial * NewMaterial | Improve this Doc View Source TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) Declaration public: virtual void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) override Parameters Type Name Description float DeltaTime ELevelTick TickType FActorComponentTickFunction * ThisTickFunction"
  },
  "api/_uxt_constraint_manager.html": {
    "href": "api/_uxt_constraint_manager.html",
    "title": "Class UxtConstraintManager | UXT Documentation",
    "keywords": "Class UxtConstraintManager Manages constraints for a given object and ensures that Scale/Rotation/Translation constraints are executed separately. Inheritance System::Object UxtConstraintManager Namespace : Assembly : .dll Syntax public: class UxtConstraintManager Constructors | Improve this Doc View Source UxtConstraintManager(AActor &OwningActor) Registers all transform constraints attached to the actor. Declaration public: UxtConstraintManager(AActor &OwningActor) Parameters Type Name Description AActor & OwningActor Methods | Improve this Doc View Source ApplyRotationConstraints(FTransform &Transform, bool IsOneHanded, bool IsNear) Applies rotation constraint to transform Declaration public: void ApplyRotationConstraints(FTransform &Transform, bool IsOneHanded, bool IsNear) const Parameters Type Name Description FTransform & Transform bool IsOneHanded bool IsNear | Improve this Doc View Source ApplyScaleConstraints(FTransform &Transform, bool IsOneHanded, bool IsNear) Applies scale constraint to transform Declaration public: void ApplyScaleConstraints(FTransform &Transform, bool IsOneHanded, bool IsNear) const Parameters Type Name Description FTransform & Transform bool IsOneHanded bool IsNear | Improve this Doc View Source ApplyTranslationConstraints(FTransform &Transform, bool IsOneHanded, bool IsNear) Applies translation constraint to transform Declaration public: void ApplyTranslationConstraints(FTransform &Transform, bool IsOneHanded, bool IsNear) const Parameters Type Name Description FTransform & Transform bool IsOneHanded bool IsNear | Improve this Doc View Source Initialize(FTransform &WorldPose) Initialized all registered transform constraints Declaration public: void Initialize(FTransform &WorldPose) Parameters Type Name Description FTransform & WorldPose | Improve this Doc View Source Update(const FTransform &TargetTransform) Compares existing registered constraints with up to date constraint list attached to actor Declaration public: void Update(const FTransform &TargetTransform) Parameters Type Name Description const FTransform & TargetTransform"
  },
  "api/_uxt_affordance_interaction_cache.html": {
    "href": "api/_uxt_affordance_interaction_cache.html",
    "title": "Struct UxtAffordanceInteractionCache | UXT Documentation",
    "keywords": "Struct UxtAffordanceInteractionCache Internal cache that will be used during the interaction with an affordance. Namespace : Assembly : .dll Syntax public: struct UxtAffordanceInteractionCache Fields | Improve this Doc View Source InitialBounds Initial bounding box at the start of interaction. Declaration public: FBox InitialBounds Field Value Type Description FBox | Improve this Doc View Source InitialDiagonalDirection Initial diagonal direction (opposite to grabbed affordance). Declaration public: FVector InitialDiagonalDirection Field Value Type Description FVector | Improve this Doc View Source InitialGrabPointTransform Initial transform of the grab point (world space) Declaration public: FTransform InitialGrabPointTransform Field Value Type Description FTransform | Improve this Doc View Source InitialOppositeAffordanceLoc Initial location of the opposite affordance. Declaration public: FVector InitialOppositeAffordanceLoc Field Value Type Description FVector | Improve this Doc View Source InitialTransform Initial transform of the actor at the start of interaction. Declaration public: FTransform InitialTransform Field Value Type Description FTransform | Improve this Doc View Source IsValid Whether this cache is valid for use. It can be false when the opposite affordance can't be found due to misconfiguration, for example. Declaration public: bool IsValid= false Field Value Type Description bool | Improve this Doc View Source OppositeAffordancePrimitive Opposite affordance's primitive. Caching here prevents iterating over the map each frame. Declaration public: UPrimitiveComponent * OppositeAffordancePrimitive Field Value Type Description UPrimitiveComponent *"
  },
  "api/_f_u_x_tools_w_m_r_module.html": {
    "href": "api/_f_u_x_tools_w_m_r_module.html",
    "title": "Class FUXToolsWMRModule | UXT Documentation",
    "keywords": "Class FUXToolsWMRModule Module for WMR-specific functionality. Inheritance System::Object IModuleInterface FUXToolsWMRModule Namespace : Assembly : .dll Syntax public: class FUXToolsWMRModule Methods | Improve this Doc View Source ShutdownModule() Declaration public: virtual void ShutdownModule() override | Improve this Doc View Source StartupModule() IModuleInterface implementation Declaration public: virtual void StartupModule() override"
  },
  "api/_f_uxt_icon_brush.html": {
    "href": "api/_f_uxt_icon_brush.html",
    "title": "Struct FUxtIconBrush | UXT Documentation",
    "keywords": "Struct FUxtIconBrush Structure which contains data representing an icon's appearance. Icons are currently represented as Unicode characters or strings, but in the future could be textures, models, etc. Namespace : Assembly : .dll Syntax public: struct FUxtIconBrush Fields | Improve this Doc View Source ContentType Describes what the icon brush content represents. Declaration public: EUxtIconBrushContentType ContentType= EUxtIconBrushContentType::UnicodeCharacter Field Value Type Description EUxtIconBrushContentType | Improve this Doc View Source Icon String of characters representing a Unicode symbol, or a literal string. Declaration public: FString Icon= \"EBD2\" Field Value Type Description FString | Improve this Doc View Source TextBrush Text settings for the icon. Declaration public: FUxtTextBrush TextBrush Field Value Type Description FUxtTextBrush"
  },
  "api/_f_uxt_font_character.html": {
    "href": "api/_f_uxt_font_character.html",
    "title": "Struct FUxtFontCharacter | UXT Documentation",
    "keywords": "Struct FUxtFontCharacter Blueprint structure which contains data required to render a character within a offline font. Namespace : Assembly : .dll Syntax public: struct FUxtFontCharacter Fields | Improve this Doc View Source Size The normalized width and height of the character. Declaration public: FVector Size Field Value Type Description FVector | Improve this Doc View Source Text The single font character as a string. Declaration public: FString Text Field Value Type Description FString | Improve this Doc View Source Texture The texutre containing the font character. Declaration public: UTexture2D * Texture Field Value Type Description UTexture2D * | Improve this Doc View Source UVTransform The UV offset within the texture to find the character. Declaration public: FLinearColor UVTransform Field Value Type Description FLinearColor"
  },
  "api/_f_uxt_affordance_instance.html": {
    "href": "api/_f_uxt_affordance_instance.html",
    "title": "Struct FUxtAffordanceInstance | UXT Documentation",
    "keywords": "Struct FUxtAffordanceInstance Instance of an affordance on the bounds control actor. Namespace : Assembly : .dll Syntax public: struct FUxtAffordanceInstance Fields | Improve this Doc View Source ActiveTransition Percentage of transition to the grabbed state. Declaration public: float ActiveTransition= 0.0f Field Value Type Description float | Improve this Doc View Source Config Copy of the config used for generating the affordance. Declaration public: FUxtAffordanceConfig Config Field Value Type Description FUxtAffordanceConfig | Improve this Doc View Source DynamicMaterial Dynamic material for highlighting the affordance. Declaration public: UMaterialInstanceDynamic * DynamicMaterial Field Value Type Description UMaterialInstanceDynamic * | Improve this Doc View Source FocusCount Refcount of pointers currently focusing the affordance. Declaration public: int FocusCount= 0 Field Value Type Description int | Improve this Doc View Source FocusedTransition Percentage of transition to the focused state. Declaration public: float FocusedTransition= 0.0f Field Value Type Description float"
  },
  "api/_f_scrolling_collection_properties.html": {
    "href": "api/_f_scrolling_collection_properties.html",
    "title": "Struct FScrollingCollectionProperties | UXT Documentation",
    "keywords": "Struct FScrollingCollectionProperties Namespace : Assembly : .dll Syntax public: struct FScrollingCollectionProperties Fields | Improve this Doc View Source Center The Center of the viewable area, relative to the Scrolling Collection Component. Declaration public: FVector Center Field Value Type Description FVector | Improve this Doc View Source Height The height of the viewable area Declaration public: float Height Field Value Type Description float | Improve this Doc View Source Width The width of the viewable area Declaration public: float Width Field Value Type Description float"
  },
  "api/_u_uxt_far_pointer_component.html": {
    "href": "api/_u_uxt_far_pointer_component.html",
    "title": "Class UUxtFarPointerComponent | UXT Documentation",
    "keywords": "Class UUxtFarPointerComponent Component that casts a ray for the given hand-tracked hand and raises far interaction events on the far targets hit. A far target is an actor or component implementing the UUxtFarTarget interface. Inheritance System::Object UActorComponent UUxtPointerComponent UUxtFarPointerComponent Inherited Members UUxtPointerComponent::bFocusLocked UUxtPointerComponent::GetCursorTransform() UUxtPointerComponent::GetFocusLocked() UUxtPointerComponent::GetFocusTarget() UUxtPointerComponent::Hand UUxtPointerComponent::UUxtPointerComponent() Namespace : Assembly : .dll Syntax public: class UUxtFarPointerComponent : public xtPointerComponent Constructors | Improve this Doc View Source UUxtFarPointerComponent() Declaration public: UUxtFarPointerComponent() Fields | Improve this Doc View Source OnFarPointerDisabled Declaration public: FUxtFarPointerDisabledDelegate OnFarPointerDisabled Field Value Type Description FUxtFarPointerDisabledDelegate | Improve this Doc View Source OnFarPointerEnabled Declaration public: FUxtFarPointerEnabledDelegate OnFarPointerEnabled Field Value Type Description FUxtFarPointerEnabledDelegate | Improve this Doc View Source RayLength Pointer ray length from ray start. Declaration public: float RayLength= 500 Field Value Type Description float | Improve this Doc View Source RayStartOffset Start of the pointer ray expressed as an offset from the hand ray origin in the ray direction. Declaration public: float RayStartOffset= 5 Field Value Type Description float | Improve this Doc View Source TraceChannel Trace channel to be used in the pointer's line trace query. Declaration public: TEnumAsByte<ECollisionChannel> TraceChannel= ECollisionChannel::ECC_Visibility Field Value Type Description TEnumAsByte<ECollisionChannel> Methods | Improve this Doc View Source GetControllerOrientation() The underlying controller's orientation. Declaration public: FQuat GetControllerOrientation() const Returns Type Description FQuat | Improve this Doc View Source GetCursorTransform() Declaration public: virtual FTransform GetCursorTransform() const override Returns Type Description FTransform | Improve this Doc View Source GetFocusTarget() Declaration public: virtual UObject * GetFocusTarget() const override Returns Type Description UObject * | Improve this Doc View Source GetHitNormal() Current hit point normal or negative ray direction if there's no hit. Declaration public: FVector GetHitNormal() const Returns Type Description FVector | Improve this Doc View Source GetHitPoint() Current hit point location or ray end if there's no hit. Declaration public: FVector GetHitPoint() const Returns Type Description FVector | Improve this Doc View Source GetHitPrimitive() Primitive the pointer is currently hitting or null if none. Declaration public: UPrimitiveComponent * GetHitPrimitive() const Returns Type Description UPrimitiveComponent * | Improve this Doc View Source GetPointerOrientation() Orientation of the pointer ray. Declaration public: FQuat GetPointerOrientation() const Returns Type Description FQuat | Improve this Doc View Source GetPointerOrigin() Origin of the pointer ray as reported by the hand tracker. See GetRayStart() for actual start of the ray used for querying the scene. Declaration public: FVector GetPointerOrigin() const Returns Type Description FVector | Improve this Doc View Source GetRayStart() Start of the ray used for querying the scene. This is the pointer origin shifted by the ray start offset in the pointer forward direction. Declaration public: FVector GetRayStart() const Returns Type Description FVector | Improve this Doc View Source IsEnabled() Whether the pointer is currently enabled. Hit information is only valid while the pointer is enabled. Declaration public: bool IsEnabled() const Returns Type Description bool | Improve this Doc View Source IsPressed() Whether the pointer is currently pressed. Declaration public: bool IsPressed() const Returns Type Description bool | Improve this Doc View Source SetActive(bool bNewActive, bool bReset=false) Declaration public: virtual void SetActive(bool bNewActive, bool bReset=false) override Parameters Type Name Description bool bNewActive bool bReset | Improve this Doc View Source SetFocusLocked(bool bLocked) Set the lock state of the pointer. Locked pointers don't update their hit, remaining focused on the primitive they were hitting until unlocked. Declaration public: virtual void SetFocusLocked(bool bLocked) override Parameters Type Name Description bool bLocked Overrides UUxtPointerComponent::SetFocusLocked(bool bLocked) | Improve this Doc View Source TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) Declaration public: virtual void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) override Parameters Type Name Description float DeltaTime ELevelTick TickType FActorComponentTickFunction * ThisTickFunction"
  },
  "api/_u_uxt_far_handler.html": {
    "href": "api/_u_uxt_far_handler.html",
    "title": "Class UUxtFarHandler | UXT Documentation",
    "keywords": "Class UUxtFarHandler Inheritance System::Object UInterface UUxtFarHandler Namespace : Assembly : .dll Syntax public: class UUxtFarHandler"
  },
  "api/_u_uxt_widget_component.html": {
    "href": "api/_u_uxt_widget_component.html",
    "title": "Class UUxtWidgetComponent | UXT Documentation",
    "keywords": "Class UUxtWidgetComponent Widget Component that is interactable with near and far interaction. Inheritance System::Object UActorComponent UUxtWidgetComponent Inherited Members IUxtFarHandler::CanHandleFar(UPrimitiveComponent *Primitive) IUxtPokeHandler::CanHandlePoke(UPrimitiveComponent *Primitive) IUxtPokeTarget::GetClosestPoint(const UPrimitiveComponent *Primitive, const FVector &Point, FVector &OutClosestPoint, FVector &OutNormal) IUxtPokeTarget::GetPokeBehaviour() IUxtFarTarget::IsFarFocusable(const UPrimitiveComponent *Primitive) IUxtPokeTarget::IsPokeFocusable(const UPrimitiveComponent *Primitive) IUxtPokeHandler::OnBeginPoke(UUxtNearPointerComponent *Pointer) IUxtPokeHandler::OnEndPoke(UUxtNearPointerComponent *Pointer) IUxtFarHandler::OnEnterFarFocus(UUxtFarPointerComponent *Pointer) IUxtPokeHandler::OnEnterPokeFocus(UUxtNearPointerComponent *Pointer) IUxtFarHandler::OnExitFarFocus(UUxtFarPointerComponent *Pointer) IUxtPokeHandler::OnExitPokeFocus(UUxtNearPointerComponent *Pointer) IUxtFarHandler::OnFarDragged(UUxtFarPointerComponent *Pointer) IUxtFarHandler::OnFarPressed(UUxtFarPointerComponent *Pointer) IUxtFarHandler::OnFarReleased(UUxtFarPointerComponent *Pointer) IUxtFarHandler::OnUpdatedFarFocus(UUxtFarPointerComponent *Pointer) IUxtPokeHandler::OnUpdatePoke(UUxtNearPointerComponent *Pointer) IUxtPokeHandler::OnUpdatePokeFocus(UUxtNearPointerComponent *Pointer) Namespace : Assembly : .dll Syntax public: class UUxtWidgetComponent : public xtPokeTarget, public xtPokeHandler, public xtFarTarget, public xtFarHandler Fields | Improve this Doc View Source VirtualUserIndex Represents the Virtual User Index. Each virtual user should be represented by a different index number, this will maintain separate capture and focus states for them. Each controller or finger-tip should get a unique PointerIndex. Declaration public: int32 VirtualUserIndex= 0 Field Value Type Description int32 Methods | Improve this Doc View Source BeginPlay() Declaration protected: virtual void BeginPlay() override | Improve this Doc View Source CanHandleFar_Implementation(UPrimitiveComponent *Primitive) Declaration protected: virtual bool CanHandleFar_Implementation(UPrimitiveComponent *Primitive) const override Parameters Type Name Description UPrimitiveComponent * Primitive Returns Type Description bool | Improve this Doc View Source CanHandlePoke_Implementation(UPrimitiveComponent *Primitive) Declaration protected: virtual bool CanHandlePoke_Implementation(UPrimitiveComponent *Primitive) const override Parameters Type Name Description UPrimitiveComponent * Primitive Returns Type Description bool | Improve this Doc View Source GetClosestPoint_Implementation(const UPrimitiveComponent *Primitive, const FVector &Point, FVector &OutClosestPoint, FVector &OutNormal) Declaration protected: virtual bool GetClosestPoint_Implementation(const UPrimitiveComponent *Primitive, const FVector &Point, FVector &OutClosestPoint, FVector &OutNormal) const override Parameters Type Name Description const UPrimitiveComponent * Primitive const FVector & Point FVector & OutClosestPoint FVector & OutNormal Returns Type Description bool | Improve this Doc View Source GetPokeBehaviour_Implementation() Declaration protected: virtual EUxtPokeBehaviour GetPokeBehaviour_Implementation() const override Returns Type Description EUxtPokeBehaviour | Improve this Doc View Source IsFarFocusable_Implementation(const UPrimitiveComponent *Primitive) Declaration protected: virtual bool IsFarFocusable_Implementation(const UPrimitiveComponent *Primitive) const override Parameters Type Name Description const UPrimitiveComponent * Primitive Returns Type Description bool | Improve this Doc View Source IsPokeFocusable_Implementation(const UPrimitiveComponent *Primitive) Declaration protected: virtual bool IsPokeFocusable_Implementation(const UPrimitiveComponent *Primitive) const override Parameters Type Name Description const UPrimitiveComponent * Primitive Returns Type Description bool | Improve this Doc View Source OnBeginPoke_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnBeginPoke_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnEndPoke_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnEndPoke_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnEnterFarFocus_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnEnterFarFocus_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnEnterPokeFocus_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnEnterPokeFocus_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnExitFarFocus_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnExitFarFocus_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnExitPokeFocus_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnExitPokeFocus_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnFarPressed_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnFarPressed_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnFarReleased_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnFarReleased_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnUpdatedFarFocus_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnUpdatedFarFocus_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnUpdatePokeFocus_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnUpdatePokeFocus_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer"
  },
  "api/_u_uxt_u_i_element_component.html": {
    "href": "api/_u_uxt_u_i_element_component.html",
    "title": "Class UUxtUIElementComponent | UXT Documentation",
    "keywords": "Class UUxtUIElementComponent Controls visibility of a UI element in the scene. Parent-child relationships are managed via actor attachments. If the parent is hidden, all of its children will be hidden. It is recommended to have the UxtUIElementComponent as the root component as the actor as this allows it to automatically update if the actor is attached to a new parent actor. If it is not the root component, RefreshUIElement() will need to be called manually after attaching a new parent actor. Note: Manually changing actor visibility will not affect child UI elements and may lead to unwanted behavior. Inheritance System::Object USceneComponent UUxtUIElementComponent Namespace : Assembly : .dll Syntax public: class UUxtUIElementComponent Constructors | Improve this Doc View Source UUxtUIElementComponent() Declaration public: UUxtUIElementComponent()=default Fields | Improve this Doc View Source OnHideElement Event raised when the element is hidden. Declaration public: FUxtUIElementHideDelegate OnHideElement Field Value Type Description FUxtUIElementHideDelegate | Improve this Doc View Source OnShowElement Event raised when the element is shown. Declaration public: FUxtUIElementShowDelegate OnShowElement Field Value Type Description FUxtUIElementShowDelegate Methods | Improve this Doc View Source BeginPlay() Declaration protected: virtual void BeginPlay() override | Improve this Doc View Source GetUIVisibilityInHierarchy() Get the element's visibility in the scene. Declaration public: EUxtUIElementVisibility GetUIVisibilityInHierarchy() const Returns Type Description EUxtUIElementVisibility | Improve this Doc View Source GetUIVisibilitySelf() Get the element's visibility. This does not reflect if the element is visible in the scene. Declaration public: EUxtUIElementVisibility GetUIVisibilitySelf() const Returns Type Description EUxtUIElementVisibility | Improve this Doc View Source OnAttachmentChanged() Declaration protected: virtual void OnAttachmentChanged() override | Improve this Doc View Source RefreshUIElement() Refresh the element's visibility. This is only necessary after changing the element's parent actor when this is not the root component of the actor. Declaration public: void RefreshUIElement() | Improve this Doc View Source SetUIVisibility(EUxtUIElementVisibility NewVisibility) Set the element's visibility. The element will not be visible in the scene if it's parent is hidden. Declaration public: void SetUIVisibility(EUxtUIElementVisibility NewVisibility) Parameters Type Name Description EUxtUIElementVisibility NewVisibility"
  },
  "api/_f_uxt_hand_proximity_mesh_data.html": {
    "href": "api/_f_uxt_hand_proximity_mesh_data.html",
    "title": "Class FUxtHandProximityMeshData | UXT Documentation",
    "keywords": "Class FUxtHandProximityMeshData Utility class for constructing a cone-shaped mesh for proximity detection. The volume is constructed radially symmetric around the forward axis. The near face is a simple disc, while the front is a spherical section. The tip of the cylinder is the origin of the mesh. *------ * ------ * ------ * ------ * | * Far | Near Tip Axis <-- *------------------------ |------------- o Inheritance System::Object FUxtHandProximityMeshData Namespace : Assembly : .dll Syntax public: class FUxtHandProximityMeshData Fields | Improve this Doc View Source bEnableLighting Declaration public: bool bEnableLighting= false Field Value Type Description bool Methods | Improve this Doc View Source Build(float ConeAngle, float ConeOffset, float ConeSideLength, int32 NewNumSegments) Declaration public: void Build(float ConeAngle, float ConeOffset, float ConeSideLength, int32 NewNumSegments) Parameters Type Name Description float ConeAngle float ConeOffset float ConeSideLength int32 NewNumSegments | Improve this Doc View Source UpdateMesh(UProceduralMeshComponent *Mesh, int32 Section) Declaration public: void UpdateMesh(UProceduralMeshComponent *Mesh, int32 Section) const Parameters Type Name Description UProceduralMeshComponent * Mesh int32 Section"
  },
  "api/_f_uxt_button_visuals_brush.html": {
    "href": "api/_f_uxt_button_visuals_brush.html",
    "title": "Struct FUxtButtonVisualsBrush | UXT Documentation",
    "keywords": "Struct FUxtButtonVisualsBrush Structure containing data representing button visual assets and properties. Namespace : Assembly : .dll Syntax public: struct FUxtButtonVisualsBrush Fields | Improve this Doc View Source BackPlateMaterial The material used for the button back plate. Declaration public: UMaterialInterface * BackPlateMaterial= nullptr Field Value Type Description UMaterialInterface * | Improve this Doc View Source BackPlateMesh The mesh used for the button back plate. Declaration public: UStaticMesh * BackPlateMesh= nullptr Field Value Type Description UStaticMesh * | Improve this Doc View Source FrontPlateMaterial The material used for the button front plate. Declaration public: UMaterialInterface * FrontPlateMaterial= nullptr Field Value Type Description UMaterialInterface * | Improve this Doc View Source FrontPlateMesh The mesh used for the button front plate. Declaration public: UStaticMesh * FrontPlateMesh= nullptr Field Value Type Description UStaticMesh * | Improve this Doc View Source FrontPlatePulseLeftMaterial Handle to the default left pulse materials to use for the button front plate. Declaration public: UMaterialInterface * FrontPlatePulseLeftMaterial Field Value Type Description UMaterialInterface * | Improve this Doc View Source FrontPlatePulseRightMaterial Handle to the default right pulse materials to use for the button front plate. Declaration public: UMaterialInterface * FrontPlatePulseRightMaterial Field Value Type Description UMaterialInterface * | Improve this Doc View Source IconFocusCurve Curve which describes the motion of the focus animation. Declaration public: UCurveFloat * IconFocusCurve= nullptr Field Value Type Description UCurveFloat * | Improve this Doc View Source IconFocusSpeed When a button is focused, how quickly the icon animates to the focused location. Declaration public: float IconFocusSpeed= 20.f Field Value Type Description float | Improve this Doc View Source PulseFadeTime How long it takes the front plate pulse to fade out in seconds. Declaration public: float PulseFadeTime= 0.125f Field Value Type Description float | Improve this Doc View Source PulseTime How long it takes the front plate pulse to animate in size in seconds. Declaration public: float PulseTime= 0.4f Field Value Type Description float | Improve this Doc View Source TogglePlateMaterial The material used for the button toggle plate. Note, all buttons may not have a toggle plate. Declaration public: UMaterialInterface * TogglePlateMaterial= nullptr Field Value Type Description UMaterialInterface *"
  },
  "api/_f_uxt_affordance_config.html": {
    "href": "api/_f_uxt_affordance_config.html",
    "title": "Struct FUxtAffordanceConfig | UXT Documentation",
    "keywords": "Struct FUxtAffordanceConfig Affordances are grabbable actors placed on the bounding box which enable interaction. Namespace : Assembly : .dll Syntax public: struct FUxtAffordanceConfig Fields | Improve this Doc View Source Placement Preset type of the affordance. Declaration public: EUxtAffordancePlacement Placement= EUxtAffordancePlacement::Center Field Value Type Description EUxtAffordancePlacement | Improve this Doc View Source Rotation The Euler orientation of the affordance. Declaration public: FVector Rotation= FVector::ZeroVector Field Value Type Description FVector Methods | Improve this Doc View Source GetAction() Action that this affordance will perform when grabbed Declaration public: EUxtAffordanceAction GetAction() const Returns Type Description EUxtAffordanceAction | Improve this Doc View Source GetAffordanceKind() Kind of actor class to use. The matching actor class from the bounding box component will be used. Declaration public: EUxtAffordanceKind GetAffordanceKind() const Returns Type Description EUxtAffordanceKind | Improve this Doc View Source GetBoundsLocation() Location of the affordance in normalized bounding box space (-1..1). Declaration public: FVector GetBoundsLocation() const Returns Type Description FVector | Improve this Doc View Source GetBoundsRotation() Rotation of the affordance in bounding box space. Declaration public: FRotator GetBoundsRotation() const Returns Type Description FRotator | Improve this Doc View Source GetWorldLocationAndRotation(const FBox &Bounds, const FTransform &RootTransform, FVector &OutLocation, FQuat &OutRotation) Location and rotation of the affordance in world space, based on the root transform. Root transform scale is not included in the result. Declaration public: void GetWorldLocationAndRotation(const FBox &Bounds, const FTransform &RootTransform, FVector &OutLocation, FQuat &OutRotation) const Parameters Type Name Description const FBox & Bounds const FTransform & RootTransform FVector & OutLocation FQuat & OutRotation"
  },
  "api/_a_uxt_text_render_actor.html": {
    "href": "api/_a_uxt_text_render_actor.html",
    "title": "Class AUxtTextRenderActor | UXT Documentation",
    "keywords": "Class AUxtTextRenderActor A text render actor which automatically wraps the UUxtTextRenderComponent . Inheritance System::Object AActor AUxtTextRenderActor Namespace : Assembly : .dll Syntax public: class AUxtTextRenderActor Methods | Improve this Doc View Source GetTextRender() Returns TextRender subobject Declaration public: class UUxtTextRenderComponent * GetTextRender() const Returns Type Description class UUxtTextRenderComponent *"
  },
  "api/_a_uxt_pressable_switch_button_actor.html": {
    "href": "api/_a_uxt_pressable_switch_button_actor.html",
    "title": "Class AUxtPressableSwitchButtonActor | UXT Documentation",
    "keywords": "Class AUxtPressableSwitchButtonActor A derived actor of AUxtPressableRadioButtonActor which represents the toggle state with a switch that animates left and right. Inheritance System::Object AActor AUxtBasePressableButtonActor AUxtPressableButtonActor AUxtPressableToggleButtonActor AUxtPressableRadioButtonActor AUxtPressableSwitchButtonActor Inherited Members AUxtPressableButtonActor::AnimateFocus(float DeltaTime) AUxtPressableButtonActor::AnimatePulse(float DeltaTime) AUxtPressableButtonActor::AudioComponent AUxtBasePressableButtonActor::AUxtBasePressableButtonActor() AUxtPressableButtonActor::AUxtPressableButtonActor() AUxtPressableRadioButtonActor::AUxtPressableRadioButtonActor() AUxtPressableToggleButtonActor::AUxtPressableToggleButtonActor() AUxtPressableButtonActor::BackPlateMeshComponent AUxtPressableButtonActor::BackPlatePivotComponent AUxtPressableButtonActor::bCanEditIconBrush AUxtPressableToggleButtonActor::BeginPlay() AUxtPressableButtonActor::BeginPulse(const UUxtPointerComponent *Pointer) AUxtPressableButtonActor::bIsPlated AUxtPressableToggleButtonActor::bToggleOnRelease AUxtPressableButtonActor::ButtonBrush AUxtBasePressableButtonActor::ButtonComponent AUxtPressableRadioButtonActor::CenterIconComponent AUxtPressableRadioButtonActor::ConstructIcon() AUxtPressableButtonActor::ConstructLabel() AUxtPressableToggleButtonActor::ConstructVisuals() AUxtPressableButtonActor::CreateAndAttachComponent(FName Name, USceneComponent *Parent) AUxtPressableButtonActor::FocusTimer AUxtPressableButtonActor::FrontPlateCenterComponent AUxtPressableButtonActor::FrontPlateMeshComponent AUxtPressableButtonActor::FrontPlatePivotComponent AUxtPressableButtonActor::GetButtonBrush() AUxtBasePressableButtonActor::GetButtonComponent() AUxtBasePressableButtonActor::GetFarTarget() AUxtBasePressableButtonActor::GetFarTarget_Implementation() AUxtPressableButtonActor::GetIconBrush() AUxtPressableButtonActor::GetLabel() AUxtPressableButtonActor::GetLabelTextBrush() AUxtPressableButtonActor::GetMillimeterSize() AUxtBasePressableButtonActor::GetPokeTarget() AUxtBasePressableButtonActor::GetPokeTarget_Implementation() AUxtPressableButtonActor::GetSize() AUxtPressableButtonActor::IconComponent AUxtPressableToggleButtonActor::IsInitiallyChecked() AUxtPressableButtonActor::IsPlated() AUxtPressableButtonActor::IsPulsing() AUxtPressableButtonActor::Label AUxtPressableButtonActor::LabelComponent AUxtPressableButtonActor::LabelTextBrush AUxtPressableButtonActor::MaterialIndex AUxtPressableButtonActor::MillimeterSize AUxtPressableButtonActor::OnBeginFocus(UUxtPressableButtonComponent *Button, UUxtPointerComponent *Pointer, bool WasAlreadyFocused) AUxtPressableButtonActor::OnButtonDisabled(UUxtPressableButtonComponent *Button) AUxtPressableButtonActor::OnButtonEnabled(UUxtPressableButtonComponent *Button) AUxtPressableToggleButtonActor::OnButtonPressed(UUxtPressableButtonComponent *Button, UUxtPointerComponent *Pointer) AUxtPressableToggleButtonActor::OnButtonReleased(UUxtPressableButtonComponent *Button, UUxtPointerComponent *Pointer) AUxtPressableToggleButtonActor::OnButtonToggled(UUxtToggleStateComponent *ToggleState) AUxtPressableToggleButtonActor::OnConstruction(const FTransform &Transform) AUxtPressableButtonActor::PrePulseMaterial AUxtPressableButtonActor::PulseFadeTimer AUxtPressableButtonActor::PulseMaterialInstance AUxtPressableButtonActor::PulseTimer AUxtPressableToggleButtonActor::RemoveTogglePlate() AUxtPressableButtonActor::SetButtonBrush(const FUxtButtonBrush &Brush) AUxtPressableButtonActor::SetIconBrush(const FUxtIconBrush &Brush) AUxtPressableToggleButtonActor::SetIsInitiallyChecked(bool InitiallyChecked) AUxtPressableButtonActor::SetIsPlated(bool IsPlated) AUxtPressableButtonActor::SetLabel(const FText &NewLabel) AUxtPressableButtonActor::SetLabelTextBrush(const FUxtTextBrush &Brush) AUxtPressableButtonActor::SetMillimeterSize(FVector Size) AUxtPressableButtonActor::SetSize(FVector Size) AUxtPressableButtonActor::Tick(float DeltaTime) AUxtPressableToggleButtonActor::TogglePlateComponent AUxtPressableToggleButtonActor::ToggleStateComponent AUxtPressableButtonActor::UPROPERTY(EditAnywhere, Category=\"Uxt Pressable Button\", BlueprintGetter=\"GetIconBrush\", BlueprintSetter=\"SetIconBrush\", meta=(EditCondition=\"bCanEditIconBrush\")) Namespace : Assembly : .dll Syntax public: class AUxtPressableSwitchButtonActor : public xtPressableRadioButtonActor Constructors | Improve this Doc View Source AUxtPressableSwitchButtonActor() Declaration public: AUxtPressableSwitchButtonActor() | Improve this Doc View Source UPROPERTY(EditAnywhere, Category=\"Uxt Pressable Button\", BlueprintGetter=\"GetSwitchedOffIconBrush\", BlueprintSetter=\"SetSwitchedOffIconBrush\") Structure which contains properties for the button's icon when switched off. Declaration protected: UPROPERTY(EditAnywhere, Category=\"Uxt Pressable Button\", BlueprintGetter=\"GetSwitchedOffIconBrush\", BlueprintSetter=\"SetSwitchedOffIconBrush\") FUxtIconBrush SwitchedOffIconBrush Parameters Type Name Description EditAnywhere _a_uxt_pressable_switch_button_actor_UPROPERTY_EditAnywhere_Category_BlueprintGetter_BlueprintSetter_ Category _a_uxt_pressable_switch_button_actor_UPROPERTY_EditAnywhere_Category_BlueprintGetter_BlueprintSetter_ BlueprintGetter _a_uxt_pressable_switch_button_actor_UPROPERTY_EditAnywhere_Category_BlueprintGetter_BlueprintSetter_ BlueprintSetter _a_uxt_pressable_switch_button_actor_UPROPERTY_EditAnywhere_Category_BlueprintGetter_BlueprintSetter_ Methods | Improve this Doc View Source GetSwitchedOffIconBrush() Accessor to the button's switched off icon brush. Declaration public: const FUxtIconBrush & GetSwitchedOffIconBrush() const Returns Type Description const FUxtIconBrush & | Improve this Doc View Source GetSwitchedOnIconBrush() Accessor to the button's switched on icon brush. Declaration public: const FUxtIconBrush & GetSwitchedOnIconBrush() const Returns Type Description const FUxtIconBrush & | Improve this Doc View Source SetSwitchedOffIconBrush(const FUxtIconBrush &Brush) Applies a new switched off icon brush. Declaration public: void SetSwitchedOffIconBrush(const FUxtIconBrush &Brush) Parameters Type Name Description const FUxtIconBrush & Brush | Improve this Doc View Source SetSwitchedOnIconBrush(const FUxtIconBrush &Brush) Applies a new switched on icon brush. Declaration public: void SetSwitchedOnIconBrush(const FUxtIconBrush &Brush) Parameters Type Name Description const FUxtIconBrush & Brush | Improve this Doc View Source UpdateToggleVisuals() Alters the toggle visuals when the toggle state changes. Declaration public: virtual void UpdateToggleVisuals() override Overrides AUxtPressableRadioButtonActor::UpdateToggleVisuals()"
  },
  "api/_a_uxt_pinch_slider_actor.html": {
    "href": "api/_a_uxt_pinch_slider_actor.html",
    "title": "Class AUxtPinchSliderActor | UXT Documentation",
    "keywords": "Class AUxtPinchSliderActor A simple HoloLens 2 style slider that can be moved by grabbing / pinching a slider thumb. The class is extensible to support additional functionality. Inheritance System::Object AActor AUxtPinchSliderActor Namespace : Assembly : .dll Syntax public: class AUxtPinchSliderActor Constructors | Improve this Doc View Source AUxtPinchSliderActor() Declaration public: AUxtPinchSliderActor() Fields | Improve this Doc View Source Audio The audio cues, configure using the 'Slider Sounds' properties. Declaration protected: class UAudioComponent * Audio Field Value Type Description class UAudioComponent * | Improve this Doc View Source PinchSlider The slider functionality. Declaration protected: UUxtPinchSliderComponent * PinchSlider Field Value Type Description UUxtPinchSliderComponent * | Improve this Doc View Source ScaleTimeline The timeline for scaling the thumb, configuring using the 'Slider Thumb Scaling' properties. Declaration protected: UTimelineComponent * ScaleTimeline Field Value Type Description UTimelineComponent * | Improve this Doc View Source TextRoot Root text component to allow text to move as a block. Declaration protected: USceneComponent * TextRoot Field Value Type Description USceneComponent * | Improve this Doc View Source Thumb The thumb visuals. Declaration protected: UStaticMeshComponent * Thumb Field Value Type Description UStaticMeshComponent * | Improve this Doc View Source TickMarks The tick mark visuals. Declaration protected: class UInstancedStaticMeshComponent * TickMarks Field Value Type Description class UInstancedStaticMeshComponent * | Improve this Doc View Source TitleText The title text, configure using the 'Title' property. Declaration protected: class UTextRenderComponent * TitleText Field Value Type Description class UTextRenderComponent * | Improve this Doc View Source Track The track visuals. Declaration protected: UStaticMeshComponent * Track Field Value Type Description UStaticMeshComponent * | Improve this Doc View Source ValueText The value text. TODO configure Declaration protected: class UTextRenderComponent * ValueText Field Value Type Description class UTextRenderComponent * Methods | Improve this Doc View Source GetAlignTextWithZ() Declaration public: bool GetAlignTextWithZ() const Returns Type Description bool | Improve this Doc View Source GetDefaultThumbColor() Declaration public: FLinearColor GetDefaultThumbColor() const Returns Type Description FLinearColor | Improve this Doc View Source GetDefaultThumbScale() Declaration public: float GetDefaultThumbScale() const Returns Type Description float | Improve this Doc View Source GetDisabledThumbColor() Declaration public: FLinearColor GetDisabledThumbColor() const Returns Type Description FLinearColor | Improve this Doc View Source GetFocusedThumbColor() Declaration public: FLinearColor GetFocusedThumbColor() const Returns Type Description FLinearColor | Improve this Doc View Source GetFocusedThumbScale() Declaration public: float GetFocusedThumbScale() const Returns Type Description float | Improve this Doc View Source GetGrabbedThumbColor() Declaration public: FLinearColor GetGrabbedThumbColor() const Returns Type Description FLinearColor | Improve this Doc View Source GetGrabSound() Declaration public: USoundCue * GetGrabSound() const Returns Type Description USoundCue * | Improve this Doc View Source GetMaxValue() Declaration public: float GetMaxValue() const Returns Type Description float | Improve this Doc View Source GetMinValue() Declaration public: float GetMinValue() const Returns Type Description float | Improve this Doc View Source GetMoveTextWithThumb() Declaration public: bool GetMoveTextWithThumb() const Returns Type Description bool | Improve this Doc View Source GetNumTickMarks() Declaration public: int GetNumTickMarks() const Returns Type Description int | Improve this Doc View Source GetReleaseSound() Declaration public: USoundCue * GetReleaseSound() const Returns Type Description USoundCue * | Improve this Doc View Source GetStepWithTickMarks() Declaration public: bool GetStepWithTickMarks() const Returns Type Description bool | Improve this Doc View Source GetThumbScaleCurve() Declaration public: UCurveFloat * GetThumbScaleCurve() const Returns Type Description UCurveFloat * | Improve this Doc View Source GetTickMarkScale() Declaration public: FVector GetTickMarkScale() const Returns Type Description FVector | Improve this Doc View Source GetTickSound() Declaration public: USoundCue * GetTickSound() const Returns Type Description USoundCue * | Improve this Doc View Source GetTitle() Declaration public: FText GetTitle() const Returns Type Description FText | Improve this Doc View Source GetTrackLength() Declaration public: float GetTrackLength() const Returns Type Description float | Improve this Doc View Source GetValue() Declaration public: float GetValue() const Returns Type Description float | Improve this Doc View Source GetValueTextDecimalPlaces() Declaration public: int GetValueTextDecimalPlaces() const Returns Type Description int | Improve this Doc View Source OnBeginGrab(UUxtPinchSliderComponent *Slider, UUxtPointerComponent *Pointer) Declaration protected: virtual void OnBeginGrab(UUxtPinchSliderComponent *Slider, UUxtPointerComponent *Pointer) Parameters Type Name Description UUxtPinchSliderComponent * Slider UUxtPointerComponent * Pointer | Improve this Doc View Source OnConstruction(const FTransform &Transform) Declaration protected: virtual void OnConstruction(const FTransform &Transform) override Parameters Type Name Description const FTransform & Transform | Improve this Doc View Source OnEndGrab(UUxtPinchSliderComponent *Slider, UUxtPointerComponent *Pointer) Declaration protected: virtual void OnEndGrab(UUxtPinchSliderComponent *Slider, UUxtPointerComponent *Pointer) Parameters Type Name Description UUxtPinchSliderComponent * Slider UUxtPointerComponent * Pointer | Improve this Doc View Source OnSliderUpdateValue(float NewValue) Event raised when the slider's value changes. Declaration public: void OnSliderUpdateValue(float NewValue) Parameters Type Name Description float NewValue | Improve this Doc View Source OnUpdateState(UUxtPinchSliderComponent *Slider, EUxtSliderState NewState) Declaration protected: virtual void OnUpdateState(UUxtPinchSliderComponent *Slider, EUxtSliderState NewState) Parameters Type Name Description UUxtPinchSliderComponent * Slider EUxtSliderState NewState | Improve this Doc View Source OnUpdateTimeline(float Scale) Declaration protected: void OnUpdateTimeline(float Scale) Parameters Type Name Description float Scale | Improve this Doc View Source OnUpdateValue(UUxtPinchSliderComponent *Slider, float NewValue) Declaration protected: virtual void OnUpdateValue(UUxtPinchSliderComponent *Slider, float NewValue) Parameters Type Name Description UUxtPinchSliderComponent * Slider float NewValue | Improve this Doc View Source SetAlignTextWithZ(bool bNewAlignTextWithZ) Declaration public: void SetAlignTextWithZ(bool bNewAlignTextWithZ) Parameters Type Name Description bool bNewAlignTextWithZ | Improve this Doc View Source SetDefaultThumbColor(FLinearColor NewDefaultThumbColor) Declaration public: void SetDefaultThumbColor(FLinearColor NewDefaultThumbColor) Parameters Type Name Description FLinearColor NewDefaultThumbColor | Improve this Doc View Source SetDefaultThumbScale(float NewDefaultThumbScale) Declaration public: void SetDefaultThumbScale(float NewDefaultThumbScale) Parameters Type Name Description float NewDefaultThumbScale | Improve this Doc View Source SetDisabledThumbColor(FLinearColor NewDisabledThumbColor) Declaration public: void SetDisabledThumbColor(FLinearColor NewDisabledThumbColor) Parameters Type Name Description FLinearColor NewDisabledThumbColor | Improve this Doc View Source SetFocusedThumbColor(FLinearColor NewFocusedThumbColor) Declaration public: void SetFocusedThumbColor(FLinearColor NewFocusedThumbColor) Parameters Type Name Description FLinearColor NewFocusedThumbColor | Improve this Doc View Source SetFocusedThumbScale(float NewFocusedThumbScale) Declaration public: void SetFocusedThumbScale(float NewFocusedThumbScale) Parameters Type Name Description float NewFocusedThumbScale | Improve this Doc View Source SetGrabbedThumbColor(FLinearColor NewGrabbedThumbColor) Declaration public: void SetGrabbedThumbColor(FLinearColor NewGrabbedThumbColor) Parameters Type Name Description FLinearColor NewGrabbedThumbColor | Improve this Doc View Source SetGrabSound(USoundCue *NewGrabSound) Declaration public: void SetGrabSound(USoundCue *NewGrabSound) Parameters Type Name Description USoundCue * NewGrabSound | Improve this Doc View Source SetMaxValue(float NewMaxValue) Declaration public: void SetMaxValue(float NewMaxValue) Parameters Type Name Description float NewMaxValue | Improve this Doc View Source SetMinValue(float NewMinValue) Declaration public: void SetMinValue(float NewMinValue) Parameters Type Name Description float NewMinValue | Improve this Doc View Source SetMoveTextWithThumb(bool bNewMoveWithThumb) Declaration public: void SetMoveTextWithThumb(bool bNewMoveWithThumb) Parameters Type Name Description bool bNewMoveWithThumb | Improve this Doc View Source SetNumTickMarks(int NewNumTickMarks) Declaration public: void SetNumTickMarks(int NewNumTickMarks) Parameters Type Name Description int NewNumTickMarks | Improve this Doc View Source SetReleaseSound(USoundCue *NewReleaseSound) Declaration public: void SetReleaseSound(USoundCue *NewReleaseSound) Parameters Type Name Description USoundCue * NewReleaseSound | Improve this Doc View Source SetStepWithTickMarks(bool bNewStepWithTickMarks) Declaration public: void SetStepWithTickMarks(bool bNewStepWithTickMarks) Parameters Type Name Description bool bNewStepWithTickMarks | Improve this Doc View Source SetThumbScaleCurve(UCurveFloat *NewThumbScaleCurve) Declaration public: void SetThumbScaleCurve(UCurveFloat *NewThumbScaleCurve) Parameters Type Name Description UCurveFloat * NewThumbScaleCurve | Improve this Doc View Source SetTickMarkScale(FVector NewTickMarkScale) Declaration public: void SetTickMarkScale(FVector NewTickMarkScale) Parameters Type Name Description FVector NewTickMarkScale | Improve this Doc View Source SetTickSound(USoundCue *NewTickSound) Declaration public: void SetTickSound(USoundCue *NewTickSound) Parameters Type Name Description USoundCue * NewTickSound | Improve this Doc View Source SetTitle(FText NewTitle) Declaration public: void SetTitle(FText NewTitle) Parameters Type Name Description FText NewTitle | Improve this Doc View Source SetTrackLength(float NewTrackLength) Declaration public: void SetTrackLength(float NewTrackLength) Parameters Type Name Description float NewTrackLength | Improve this Doc View Source SetValue(float NewValue) Declaration public: void SetValue(float NewValue) Parameters Type Name Description float NewValue | Improve this Doc View Source SetValueTextDecimalPlaces(int NewValueTextDecimalPlaces) Declaration public: void SetValueTextDecimalPlaces(int NewValueTextDecimalPlaces) Parameters Type Name Description int NewValueTextDecimalPlaces"
  },
  "api/_a_uxt_hand_interaction_actor.html": {
    "href": "api/_a_uxt_hand_interaction_actor.html",
    "title": "Class AUxtHandInteractionActor | UXT Documentation",
    "keywords": "Class AUxtHandInteractionActor Actor that drives hand interactions with components that implement the far, grab and poke target interfaces. A hand has two interaction modes: Near: interactions performed by poking or grabbing targets directly. Far: interactions performed by pointing at far targets from a distance via a hand ray. The actor transitions between modes depending on whether there is a grab or poke target within the near activation distance. Inheritance System::Object AActor AUxtHandInteractionActor Namespace : Assembly : .dll Syntax public: class AUxtHandInteractionActor Constructors | Improve this Doc View Source AUxtHandInteractionActor(const FObjectInitializer &ObjectInitializer) Declaration public: AUxtHandInteractionActor(const FObjectInitializer &ObjectInitializer) Parameters Type Name Description const FObjectInitializer & ObjectInitializer | Improve this Doc View Source UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Uxt Hand Interaction\", AdvancedDisplay, meta=(ClampMin=\"0.0\", ClampMax=\"90.0\")) Declaration public: UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Uxt Hand Interaction\", AdvancedDisplay, meta=(ClampMin=\"0.0\", ClampMax=\"90.0\")) float ProximityConeAngle Parameters Type Name Description EditAnywhere _a_uxt_hand_interaction_actor_UPROPERTY_EditAnywhere_BlueprintReadWrite_Category_AdvancedDisplay_meta_ BlueprintReadWrite _a_uxt_hand_interaction_actor_UPROPERTY_EditAnywhere_BlueprintReadWrite_Category_AdvancedDisplay_meta_ Category _a_uxt_hand_interaction_actor_UPROPERTY_EditAnywhere_BlueprintReadWrite_Category_AdvancedDisplay_meta_ AdvancedDisplay _a_uxt_hand_interaction_actor_UPROPERTY_EditAnywhere_BlueprintReadWrite_Category_AdvancedDisplay_meta_ meta _a_uxt_hand_interaction_actor_UPROPERTY_EditAnywhere_BlueprintReadWrite_Category_AdvancedDisplay_meta_ | Improve this Doc View Source UPROPERTY(Transient, EditAnywhere, BlueprintReadWrite, Category=\"Uxt Hand Interaction\", meta=(Bitmask, BitmaskEnum=EUxtInteractionMode)) Active interaction modes Declaration public: UPROPERTY(Transient, EditAnywhere, BlueprintReadWrite, Category=\"Uxt Hand Interaction\", meta=(Bitmask, BitmaskEnum=EUxtInteractionMode)) int32 InteractionMode Parameters Type Name Description Transient _a_uxt_hand_interaction_actor_UPROPERTY_Transient_EditAnywhere_BlueprintReadWrite_Category_meta_ EditAnywhere _a_uxt_hand_interaction_actor_UPROPERTY_Transient_EditAnywhere_BlueprintReadWrite_Category_meta_ BlueprintReadWrite _a_uxt_hand_interaction_actor_UPROPERTY_Transient_EditAnywhere_BlueprintReadWrite_Category_meta_ Category _a_uxt_hand_interaction_actor_UPROPERTY_Transient_EditAnywhere_BlueprintReadWrite_Category_meta_ meta _a_uxt_hand_interaction_actor_UPROPERTY_Transient_EditAnywhere_BlueprintReadWrite_Category_meta_ Fields | Improve this Doc View Source bShowNearCursorOnGrabTargets Show the near cursor on grab targets. Changes to this value after BeginPlay have no effect. Declaration public: bool bShowNearCursorOnGrabTargets= false Field Value Type Description bool | Improve this Doc View Source bUseDefaultFarBeam Create default visuals for the far beam. Changes to this value after BeginPlay have no effect. Declaration public: bool bUseDefaultFarBeam= true Field Value Type Description bool | Improve this Doc View Source bUseDefaultFarCursor Create default visuals for the far cursor. Changes to this value after BeginPlay have no effect. Declaration public: bool bUseDefaultFarCursor= true Field Value Type Description bool | Improve this Doc View Source bUseDefaultNearCursor Create default visuals for the near cursor. Changes to this value after BeginPlay have no effect. Declaration public: bool bUseDefaultNearCursor= true Field Value Type Description bool | Improve this Doc View Source ProximityConeOffset Declaration public: float ProximityConeOffset= 8.0f Field Value Type Description float | Improve this Doc View Source ProximityConeSideLength Declaration public: float ProximityConeSideLength= 35.0f Field Value Type Description float Methods | Improve this Doc View Source BeginPlay() Declaration public: virtual void BeginPlay() override | Improve this Doc View Source GetHand() Declaration public: EControllerHand GetHand() const Returns Type Description EControllerHand | Improve this Doc View Source GetHandAngularVelocity() Declaration public: FVector GetHandAngularVelocity() const Returns Type Description FVector | Improve this Doc View Source GetHandVelocity() Declaration public: FVector GetHandVelocity() const Returns Type Description FVector | Improve this Doc View Source GetPokeRadius() Declaration public: float GetPokeRadius() const Returns Type Description float | Improve this Doc View Source GetRayLength() Declaration public: float GetRayLength() const Returns Type Description float | Improve this Doc View Source GetRayStartOffset() Declaration public: float GetRayStartOffset() const Returns Type Description float | Improve this Doc View Source GetTraceChannel() Declaration public: ECollisionChannel GetTraceChannel() const Returns Type Description ECollisionChannel | Improve this Doc View Source SetHand(EControllerHand NewHand) Declaration public: void SetHand(EControllerHand NewHand) Parameters Type Name Description EControllerHand NewHand | Improve this Doc View Source SetPokeRadius(float NewPokeRadius) Declaration public: void SetPokeRadius(float NewPokeRadius) Parameters Type Name Description float NewPokeRadius | Improve this Doc View Source SetRayLength(float NewRayLength) Declaration public: void SetRayLength(float NewRayLength) Parameters Type Name Description float NewRayLength | Improve this Doc View Source SetRayStartOffset(float NewRayStartOffset) Declaration public: void SetRayStartOffset(float NewRayStartOffset) Parameters Type Name Description float NewRayStartOffset | Improve this Doc View Source SetTraceChannel(ECollisionChannel NewTraceChannel) Declaration public: void SetTraceChannel(ECollisionChannel NewTraceChannel) Parameters Type Name Description ECollisionChannel NewTraceChannel | Improve this Doc View Source Tick(float DeltaTime) Declaration public: virtual void Tick(float DeltaTime) override Parameters Type Name Description float DeltaTime"
  },
  "api/_i_uxt_hand_tracker.html": {
    "href": "api/_i_uxt_hand_tracker.html",
    "title": "Class IUxtHandTracker | UXT Documentation",
    "keywords": "Class IUxtHandTracker Hand tracker device interface. We assume that implementations poll and cache the hand tracking state at the beginning of the frame. This allows us to assume that if a hand is reported as tracked it will remain so for the remainder of the frame, simplifying client logic. Inheritance System::Object IModularFeature IUxtHandTracker Namespace : Assembly : .dll Syntax public: class IUxtHandTracker Constructors | Improve this Doc View Source ~IUxtHandTracker() Declaration public: virtual ~IUxtHandTracker() Methods | Improve this Doc View Source GetHandTracker() Returns the currently registered hand tracker or nullptr if none Declaration public: static IUxtHandTracker * GetHandTracker() Returns Type Description IUxtHandTracker * | Improve this Doc View Source GetIsGrabbing(EControllerHand Hand, bool &OutIsGrabbing) Obtain current grabbing state. Returns false if the hand is not tracked this frame, in which case the value of the output parameter is unchanged. Declaration public: virtual bool GetIsGrabbing(EControllerHand Hand, bool &OutIsGrabbing) const =0 Parameters Type Name Description EControllerHand Hand bool & OutIsGrabbing Returns Type Description bool | Improve this Doc View Source GetIsSelectPressed(EControllerHand Hand, bool &OutIsSelectPressed) Obtain current selection state. Returns false if the hand is not tracked this frame, in which case the value of the output parameter is unchanged. Declaration public: virtual bool GetIsSelectPressed(EControllerHand Hand, bool &OutIsSelectPressed) const =0 Parameters Type Name Description EControllerHand Hand bool & OutIsSelectPressed Returns Type Description bool | Improve this Doc View Source GetJointState(EControllerHand Hand, EUxtHandJoint Joint, FQuat &OutOrientation, FVector &OutPosition, float &OutRadius) Obtain the state of the given joint. Returns false if the hand is not tracked this frame, in which case the values of the output parameters are unchanged. Declaration public: virtual bool GetJointState(EControllerHand Hand, EUxtHandJoint Joint, FQuat &OutOrientation, FVector &OutPosition, float &OutRadius) const =0 Parameters Type Name Description EControllerHand Hand EUxtHandJoint Joint FQuat & OutOrientation FVector & OutPosition float & OutRadius Returns Type Description bool | Improve this Doc View Source GetModularFeatureName() Declaration public: static FName GetModularFeatureName() Returns Type Description FName | Improve this Doc View Source GetPointerPose(EControllerHand Hand, FQuat &OutOrientation, FVector &OutPosition) Obtain the pointer pose. Returns false if the hand is not tracked this frame, in which case the value of the output parameter is unchanged. Declaration public: virtual bool GetPointerPose(EControllerHand Hand, FQuat &OutOrientation, FVector &OutPosition) const =0 Parameters Type Name Description EControllerHand Hand FQuat & OutOrientation FVector & OutPosition Returns Type Description bool"
  },
  "api/_i_uxt_grab_target.html": {
    "href": "api/_i_uxt_grab_target.html",
    "title": "Class IUxtGrabTarget | UXT Documentation",
    "keywords": "Class IUxtGrabTarget Interface to implement to enable grab interaction for given primitives. Inheritance System::Object IUxtGrabTarget Namespace : Assembly : .dll Syntax public: class IUxtGrabTarget Methods | Improve this Doc View Source IsGrabFocusable(const UPrimitiveComponent *Primitive) Returns true if the given primitive should be considerered a valid focus target. Declaration public: bool IsGrabFocusable(const UPrimitiveComponent *Primitive) const Parameters Type Name Description const UPrimitiveComponent * Primitive Returns Type Description bool"
  },
  "api/_f_u_x_tools_module.html": {
    "href": "api/_f_u_x_tools_module.html",
    "title": "Class FUXToolsModule | UXT Documentation",
    "keywords": "Class FUXToolsModule Inheritance System::Object IModuleInterface FUXToolsModule Namespace : Assembly : .dll Syntax public: class FUXToolsModule Methods | Improve this Doc View Source ShutdownModule() Declaration public: virtual void ShutdownModule() override | Improve this Doc View Source StartupModule() IModuleInterface implementation Declaration public: virtual void StartupModule() override"
  },
  "api/_f_uxt_wmr_hand_tracker.html": {
    "href": "api/_f_uxt_wmr_hand_tracker.html",
    "title": "Class FUxtWmrHandTracker | UXT Documentation",
    "keywords": "Class FUxtWmrHandTracker WMR implementation of the hand tracker interface Inheritance System::Object IModularFeature IUxtHandTracker FUxtWmrHandTracker Inherited Members IUxtHandTracker::GetHandTracker() IUxtHandTracker::GetModularFeatureName() IUxtHandTracker::~IUxtHandTracker() Namespace : Assembly : .dll Syntax public: class FUxtWmrHandTracker : public xtHandTracker Methods | Improve this Doc View Source GetIsGrabbing(EControllerHand Hand, bool &OutIsGrabbing) Obtain current grabbing state. Returns false if the hand is not tracked this frame, in which case the value of the output parameter is unchanged. Declaration public: virtual bool GetIsGrabbing(EControllerHand Hand, bool &OutIsGrabbing) const Parameters Type Name Description EControllerHand Hand bool & OutIsGrabbing Returns Type Description bool Overrides IUxtHandTracker::GetIsGrabbing(EControllerHand Hand, bool &OutIsGrabbing) | Improve this Doc View Source GetIsSelectPressed(EControllerHand Hand, bool &OutIsSelectPressed) Obtain current selection state. Returns false if the hand is not tracked this frame, in which case the value of the output parameter is unchanged. Declaration public: virtual bool GetIsSelectPressed(EControllerHand Hand, bool &OutIsSelectPressed) const Parameters Type Name Description EControllerHand Hand bool & OutIsSelectPressed Returns Type Description bool Overrides IUxtHandTracker::GetIsSelectPressed(EControllerHand Hand, bool &OutIsSelectPressed) | Improve this Doc View Source GetJointState(EControllerHand Hand, EUxtHandJoint Joint, FQuat &OutOrientation, FVector &OutPosition, float &OutRadius) Obtain the state of the given joint. Returns false if the hand is not tracked this frame, in which case the values of the output parameters are unchanged. Declaration public: virtual bool GetJointState(EControllerHand Hand, EUxtHandJoint Joint, FQuat &OutOrientation, FVector &OutPosition, float &OutRadius) const Parameters Type Name Description EControllerHand Hand EUxtHandJoint Joint FQuat & OutOrientation FVector & OutPosition float & OutRadius Returns Type Description bool Overrides IUxtHandTracker::GetJointState(EControllerHand Hand, EUxtHandJoint Joint, FQuat &OutOrientation, FVector &OutPosition, float &OutRadius) | Improve this Doc View Source GetPointerPose(EControllerHand Hand, FQuat &OutOrientation, FVector &OutPosition) Obtain the pointer pose. Returns false if the hand is not tracked this frame, in which case the value of the output parameter is unchanged. Declaration public: virtual bool GetPointerPose(EControllerHand Hand, FQuat &OutOrientation, FVector &OutPosition) const Parameters Type Name Description EControllerHand Hand FQuat & OutOrientation FVector & OutPosition Returns Type Description bool Overrides IUxtHandTracker::GetPointerPose(EControllerHand Hand, FQuat &OutOrientation, FVector &OutPosition)"
  },
  "api/_f_uxt_pressable_button_component_visualizer.html": {
    "href": "api/_f_uxt_pressable_button_component_visualizer.html",
    "title": "Class FUxtPressableButtonComponentVisualizer | UXT Documentation",
    "keywords": "Class FUxtPressableButtonComponentVisualizer Inheritance System::Object FComponentVisualizer FUxtPressableButtonComponentVisualizer Namespace : Assembly : .dll Syntax public: class FUxtPressableButtonComponentVisualizer"
  },
  "api/_f_uxt_input_simulation_hand_state.html": {
    "href": "api/_f_uxt_input_simulation_hand_state.html",
    "title": "Struct FUxtInputSimulationHandState | UXT Documentation",
    "keywords": "Struct FUxtInputSimulationHandState Simulation state for a single hand. Namespace : Assembly : .dll Syntax public: struct FUxtInputSimulationHandState Fields | Improve this Doc View Source bIsControlled True if the hand is currently controlled by the user. Declaration public: bool bIsControlled= false Field Value Type Description bool | Improve this Doc View Source bIsVisible True if the hand is currently visible, i.e. simulated as tracked. Declaration public: bool bIsVisible= true Field Value Type Description bool | Improve this Doc View Source RelativeTransform Transform offset relative to the rest pose. Declaration public: FTransform RelativeTransform= FTransform() Field Value Type Description FTransform | Improve this Doc View Source TargetPose Target pose. Declaration public: FName TargetPose= NAME_None Field Value Type Description FName"
  },
  "api/_f_uxt_grab_pointer_focus.html": {
    "href": "api/_f_uxt_grab_pointer_focus.html",
    "title": "Struct FUxtGrabPointerFocus | UXT Documentation",
    "keywords": "Struct FUxtGrabPointerFocus Focus implementation for the grab pointers. Inherited Members FUxtPointerFocus::ClearFocus(UUxtNearPointerComponent *Pointer) FUxtPointerFocus::FindClosestPointOnComponent(UActorComponent *Target, const FVector &Point) FUxtPointerFocus::FindClosestTarget(const TArray<FOverlapResult> &Overlaps, const FVector &Point) FUxtPointerFocus::FindInterfaceComponent(AActor *Owner) FUxtPointerFocus::GetClosestTargetNormal() FUxtPointerFocus::GetClosestTargetPoint() FUxtPointerFocus::GetFocusedPrimitive() FUxtPointerFocus::GetFocusedTarget() FUxtPointerFocus::GetFocusedTargetChecked() FUxtPointerFocus::SelectClosestPointOnTarget(UUxtNearPointerComponent *Pointer, const FTransform &PointerTransform, UActorComponent *NewTarget) FUxtPointerFocus::SelectClosestTarget(UUxtNearPointerComponent *Pointer, const FTransform &PointerTransform, const TArray<FOverlapResult> &Overlaps) FUxtPointerFocus::SetFocus(UUxtNearPointerComponent *Pointer, const FTransform &PointerTransform, const FUxtPointerFocusSearchResult &FocusResult) FUxtPointerFocus::UpdateClosestTarget(const FTransform &PointerTransform) FUxtPointerFocus::UpdateFocus(UUxtNearPointerComponent *Pointer) FUxtPointerFocus::~FUxtPointerFocus() Namespace : Assembly : .dll Syntax public: struct FUxtGrabPointerFocus : public xtPointerFocus Methods | Improve this Doc View Source BeginGrab(UUxtNearPointerComponent *Pointer) Notify the target object that grab has started. Declaration public: void BeginGrab(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source EndGrab(UUxtNearPointerComponent *Pointer) Notify the target object that grab has ended. Declaration public: void EndGrab(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source GetClosestPointOnTarget(const UActorComponent *Target, const UPrimitiveComponent *Primitive, const FVector &Point, FVector &OutClosestPoint, FVector &OutNormal) Find the closest point on the given primitive using the distance function of the target interface. Declaration protected: virtual bool GetClosestPointOnTarget(const UActorComponent *Target, const UPrimitiveComponent *Primitive, const FVector &Point, FVector &OutClosestPoint, FVector &OutNormal) const override Parameters Type Name Description const UActorComponent * Target const UPrimitiveComponent * Primitive const FVector & Point FVector & OutClosestPoint FVector & OutNormal Returns Type Description bool Overrides FUxtPointerFocus::GetClosestPointOnTarget(const UActorComponent *Target, const UPrimitiveComponent *Primitive, const FVector &Point, FVector &OutClosestPoint, FVector &OutNormal) | Improve this Doc View Source GetInterfaceClass() Get the interface class that targets for the pointer must implement. Declaration protected: virtual UClass * GetInterfaceClass() const override Returns Type Description UClass * Overrides FUxtPointerFocus::GetInterfaceClass() | Improve this Doc View Source ImplementsTargetInterface(UObject *Target) Returns true if the given object implements the required target interface. Declaration protected: virtual bool ImplementsTargetInterface(UObject *Target) const override Parameters Type Name Description UObject * Target Returns Type Description bool Overrides FUxtPointerFocus::ImplementsTargetInterface(UObject *Target) | Improve this Doc View Source IsGrabbing() Declaration public: bool IsGrabbing() const Returns Type Description bool | Improve this Doc View Source RaiseEnterFocusEvent(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) Notify the target object that it has entered focus. Declaration protected: virtual void RaiseEnterFocusEvent(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) const override Parameters Type Name Description UPrimitiveComponent * Target UUxtNearPointerComponent * Pointer Overrides FUxtPointerFocus::RaiseEnterFocusEvent(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) | Improve this Doc View Source RaiseExitFocusEvent(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) Notify the target object that it has exited focus. Declaration protected: virtual void RaiseExitFocusEvent(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) const override Parameters Type Name Description UPrimitiveComponent * Target UUxtNearPointerComponent * Pointer Overrides FUxtPointerFocus::RaiseExitFocusEvent(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) | Improve this Doc View Source RaiseUpdateFocusEvent(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) Notify the focused target object that the pointer has been updated. Declaration protected: virtual void RaiseUpdateFocusEvent(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) const override Parameters Type Name Description UPrimitiveComponent * Target UUxtNearPointerComponent * Pointer Overrides FUxtPointerFocus::RaiseUpdateFocusEvent(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) | Improve this Doc View Source UpdateGrab(UUxtNearPointerComponent *Pointer) Notify the grabbed target object that the pointer has been updated. Declaration public: void UpdateGrab(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer"
  },
  "api/_f_uxt_button_audio_brush.html": {
    "href": "api/_f_uxt_button_audio_brush.html",
    "title": "Struct FUxtButtonAudioBrush | UXT Documentation",
    "keywords": "Struct FUxtButtonAudioBrush Structure containing data representing button audio assets and properties. Namespace : Assembly : .dll Syntax public: struct FUxtButtonAudioBrush Fields | Improve this Doc View Source PressedSound The sound which plays when a button is pressed. This sound is spatialized. Declaration public: USoundBase * PressedSound= nullptr Field Value Type Description USoundBase * | Improve this Doc View Source ReleasedSound The sound which plays when a button is released. This sound is spatialized. Declaration public: USoundBase * ReleasedSound= nullptr Field Value Type Description USoundBase *"
  },
  "api/_u_x_tools.html": {
    "href": "api/_u_x_tools.html",
    "title": "Class UXTools | UXT Documentation",
    "keywords": "Class UXTools Inheritance System::Object ModuleRules UXTools Namespace : Assembly : .dll Syntax public: class UXTools Constructors | Improve this Doc View Source UXTools(ReadOnlyTargetRules Target) Declaration public: UXTools(ReadOnlyTargetRules Target) Parameters Type Name Description ReadOnlyTargetRules Target"
  },
  "api/_f_uxt_pointer_focus_search_result.html": {
    "href": "api/_f_uxt_pointer_focus_search_result.html",
    "title": "Struct FUxtPointerFocusSearchResult | UXT Documentation",
    "keywords": "Struct FUxtPointerFocusSearchResult Result of closest point search functions. Namespace : Assembly : .dll Syntax public: struct FUxtPointerFocusSearchResult Fields | Improve this Doc View Source ClosestPointOnTarget Closest point on the primitive to the pointer position. Declaration public: FVector ClosestPointOnTarget Field Value Type Description FVector | Improve this Doc View Source MinDistance Distance of the closest point to the pointer position. Declaration public: float MinDistance Field Value Type Description float | Improve this Doc View Source Normal Poke normal from the closest point on the primitive. Declaration public: FVector Normal Field Value Type Description FVector | Improve this Doc View Source Primitive Primitive that contains the closes point. Declaration public: UPrimitiveComponent * Primitive Field Value Type Description UPrimitiveComponent * | Improve this Doc View Source Target Closest object that implements the requires pointer target interface. Declaration public: UObject * Target Field Value Type Description UObject * Methods | Improve this Doc View Source IsValid() Declaration public: bool IsValid() const Returns Type Description bool"
  },
  "api/_u_uxt_transform_constraint.html": {
    "href": "api/_u_uxt_transform_constraint.html",
    "title": "Class UUxtTransformConstraint | UXT Documentation",
    "keywords": "Class UUxtTransformConstraint Base class for all constraints Usage: Derive from this component and implement ApplyConstraint and GetConstraintType. Custom constraints will automatically be picked up by a UxtConstraintManager on the same actor Inheritance System::Object UActorComponent UUxtTransformConstraint Namespace : Assembly : .dll Syntax public: class UUxtTransformConstraint Fields | Improve this Doc View Source HandType Whether this constraint applies to one hand manipulation, two hand manipulation or both. Declaration public: int32 HandType= static_cast<int32>(EUxtGrabMode::OneHanded | EUxtGrabMode::TwoHanded) Field Value Type Description int32 | Improve this Doc View Source InteractionMode Whether this constraint applies to near manipulation, far manipulation or both. Declaration public: int32 InteractionMode= static_cast<int32>(EUxtInteractionMode::Near | EUxtInteractionMode::Far) Field Value Type Description int32 | Improve this Doc View Source TargetComponent The component to transform, will default to the root scene component if not specified Declaration public: FComponentReference TargetComponent Field Value Type Description FComponentReference | Improve this Doc View Source WorldPoseOnManipulationStart Declaration protected: FTransform WorldPoseOnManipulationStart Field Value Type Description FTransform Methods | Improve this Doc View Source ApplyConstraint(FTransform &Transform) Applies constraints to transforms during manipulation Declaration public: virtual void ApplyConstraint(FTransform &Transform) const PURE_VIRTUAL( Parameters Type Name Description FTransform & Transform | Improve this Doc View Source GetConstraintType() Enabled manipulation modes. Declaration public: virtual EUxtTransformMode GetConstraintType() const PURE_VIRTUAL( Returns Type Description EUxtTransformMode | Improve this Doc View Source Initialize(const FTransform &WorldPose) Intended to be called on manipulation started Declaration public: virtual void virtual void Initialize(const FTransform &WorldPose) Parameters Type Name Description const FTransform & WorldPose Returns Type Description void virtual void"
  },
  "api/_u_uxt_touch_based_hand_tracker_subsystem.html": {
    "href": "api/_u_uxt_touch_based_hand_tracker_subsystem.html",
    "title": "Class UUxtTouchBasedHandTrackerSubsystem | UXT Documentation",
    "keywords": "Class UUxtTouchBasedHandTrackerSubsystem Local player subsystem that adds a UUxtTouchBasedHandTrackerComponent to player controllers as they are created. Inheritance System::Object ULocalPlayerSubsystem UUxtTouchBasedHandTrackerSubsystem Namespace : Assembly : .dll Syntax public: class UUxtTouchBasedHandTrackerSubsystem Methods | Improve this Doc View Source Deinitialize() Declaration public: virtual void Deinitialize() override | Improve this Doc View Source Initialize(FSubsystemCollectionBase &Collection) Declaration public: virtual void Initialize(FSubsystemCollectionBase &Collection) override Parameters Type Name Description FSubsystemCollectionBase & Collection | Improve this Doc View Source ShouldCreateSubsystem(UObject *Outer) Declaration public: virtual bool ShouldCreateSubsystem(UObject *Outer) const override Parameters Type Name Description UObject * Outer Returns Type Description bool"
  },
  "api/_u_uxt_maintain_apparent_size_constraint.html": {
    "href": "api/_u_uxt_maintain_apparent_size_constraint.html",
    "title": "Class UUxtMaintainApparentSizeConstraint | UXT Documentation",
    "keywords": "Class UUxtMaintainApparentSizeConstraint Constraint to maintain the apparent size of the object to the user. Usage: Attach to actor that the constraint should be applied to. Inheritance System::Object UActorComponent UUxtTransformConstraint UUxtMaintainApparentSizeConstraint Inherited Members UUxtTransformConstraint::HandType UUxtTransformConstraint::InteractionMode UUxtTransformConstraint::TargetComponent UUxtTransformConstraint::WorldPoseOnManipulationStart Namespace : Assembly : .dll Syntax public: class UUxtMaintainApparentSizeConstraint : public xtTransformConstraint Methods | Improve this Doc View Source ApplyConstraint(FTransform &Transform) Applies constraints to transforms during manipulation Declaration public: virtual void ApplyConstraint(FTransform &Transform) const override Parameters Type Name Description FTransform & Transform Overrides UUxtTransformConstraint::ApplyConstraint(FTransform &Transform) | Improve this Doc View Source GetConstraintType() Enabled manipulation modes. Declaration public: virtual EUxtTransformMode GetConstraintType() const override Returns Type Description EUxtTransformMode Overrides UUxtTransformConstraint::GetConstraintType() | Improve this Doc View Source Initialize(const FTransform &WorldPose) Intended to be called on manipulation started Declaration public: virtual void Initialize(const FTransform &WorldPose) override Parameters Type Name Description const FTransform & WorldPose Overrides UUxtTransformConstraint::Initialize(const FTransform &WorldPose)"
  },
  "api/_u_uxt_internal_function_library.html": {
    "href": "api/_u_uxt_internal_function_library.html",
    "title": "Class UUxtInternalFunctionLibrary | UXT Documentation",
    "keywords": "Class UUxtInternalFunctionLibrary Library of utility internal functions for UX Tools. Inheritance System::Object UBlueprintFunctionLibrary UUxtInternalFunctionLibrary Namespace : Assembly : .dll Syntax public: class UUxtInternalFunctionLibrary Methods | Improve this Doc View Source FStringToHexCodePoint(const FString &Input, FString &Output) Converts a UTF-16 FString into the corresponding unicode code point as hex representation. Returns true when the conversion is successful. Declaration public: static bool FStringToHexCodePoint(const FString &Input, FString &Output) Parameters Type Name Description const FString & Input FString & Output Returns Type Description bool | Improve this Doc View Source GetFontCharacterData(const UFont *Font, TArray<FUxtFontCharacter> &FontCharacters) Builds an array of FUxtFontCharacters for each character present in a UFont. Declaration public: static bool GetFontCharacterData(const UFont *Font, TArray<FUxtFontCharacter> &FontCharacters) Parameters Type Name Description const UFont * Font TArray< FUxtFontCharacter > & FontCharacters Returns Type Description bool | Improve this Doc View Source GetObjectFromPtr(const TSoftObjectPtr<T> &ObjectPtr) Get the object from a TSoftObjectPtr, loading it synchronously if it is not loaded. Declaration public: static T * GetObjectFromPtr(const TSoftObjectPtr<T> &ObjectPtr) Parameters Type Name Description const TSoftObjectPtr<T> & ObjectPtr Returns Type Description T * Type Parameters Name Description _u_uxt_internal_function_library_GetObjectFromPtr_const_TSoftObjectPtr_T____ | Improve this Doc View Source HexCodePointToFString(const FString &Input, FString &Output) Converts a Unicode code point as hex into the corresponding UTF-16 FString representation. Returns true when the conversion is successful. Declaration public: static bool HexCodePointToFString(const FString &Input, FString &Output) Parameters Type Name Description const FString & Input FString & Output Returns Type Description bool | Improve this Doc View Source IsFontOffline(const UFont *Font) Returns true if a UFont is using offline caching. Declaration public: static bool IsFontOffline(const UFont *Font) Parameters Type Name Description const UFont * Font Returns Type Description bool | Improve this Doc View Source Slerp(const FVector &Vector1, const FVector &Vector2, const float Slerp) Spherical linear interpolate between two vectors Declaration public: static FVector Slerp(const FVector &Vector1, const FVector &Vector2, const float Slerp) Parameters Type Name Description const FVector & Vector1 const FVector & Vector2 const float Slerp Returns Type Description FVector"
  },
  "api/_a_uxt_pressable_button_actor.html": {
    "href": "api/_a_uxt_pressable_button_actor.html",
    "title": "Class AUxtPressableButtonActor | UXT Documentation",
    "keywords": "Class AUxtPressableButtonActor The default pressable button actor which programmatically builds an actor hierarchy with a back plate, front plate, icon, and label. All button properties within this class are reactive at edit and runtime. This actor also contains behaviors to support icon focus animation and sound playback. This class is extensible to support derived button types. Inheritance System::Object AActor AUxtBasePressableButtonActor AUxtPressableButtonActor Inherited Members AUxtBasePressableButtonActor::AUxtBasePressableButtonActor() AUxtBasePressableButtonActor::ButtonComponent AUxtBasePressableButtonActor::GetButtonComponent() AUxtBasePressableButtonActor::GetFarTarget() AUxtBasePressableButtonActor::GetFarTarget_Implementation() AUxtBasePressableButtonActor::GetPokeTarget() AUxtBasePressableButtonActor::GetPokeTarget_Implementation() Namespace : Assembly : .dll Syntax public: class AUxtPressableButtonActor : public xtBasePressableButtonActor Constructors | Improve this Doc View Source AUxtPressableButtonActor() Declaration public: AUxtPressableButtonActor() | Improve this Doc View Source UPROPERTY(EditAnywhere, Category=\"Uxt Pressable Button\", BlueprintGetter=\"GetIconBrush\", BlueprintSetter=\"SetIconBrush\", meta=(EditCondition=\"bCanEditIconBrush\")) Structure which contains properties for the button's icon. Declaration protected: UPROPERTY(EditAnywhere, Category=\"Uxt Pressable Button\", BlueprintGetter=\"GetIconBrush\", BlueprintSetter=\"SetIconBrush\", meta=(EditCondition=\"bCanEditIconBrush\")) FUxtIconBrush IconBrush Parameters Type Name Description EditAnywhere _a_uxt_pressable_button_actor_UPROPERTY_EditAnywhere_Category_BlueprintGetter_BlueprintSetter_meta_ Category _a_uxt_pressable_button_actor_UPROPERTY_EditAnywhere_Category_BlueprintGetter_BlueprintSetter_meta_ BlueprintGetter _a_uxt_pressable_button_actor_UPROPERTY_EditAnywhere_Category_BlueprintGetter_BlueprintSetter_meta_ BlueprintSetter _a_uxt_pressable_button_actor_UPROPERTY_EditAnywhere_Category_BlueprintGetter_BlueprintSetter_meta_ meta _a_uxt_pressable_button_actor_UPROPERTY_EditAnywhere_Category_BlueprintGetter_BlueprintSetter_meta_ Fields | Improve this Doc View Source AudioComponent Audio playback component. Declaration protected: UAudioComponent * AudioComponent= nullptr Field Value Type Description UAudioComponent * | Improve this Doc View Source BackPlateMeshComponent Back plate mesh component. Declaration protected: UUxtBackPlateComponent * BackPlateMeshComponent= nullptr Field Value Type Description UUxtBackPlateComponent * | Improve this Doc View Source BackPlatePivotComponent Pivot component to support back plate compression visuals. Declaration protected: USceneComponent * BackPlatePivotComponent= nullptr Field Value Type Description USceneComponent * | Improve this Doc View Source bCanEditIconBrush Allows derived classes to control if the icon brush can be edited. Declaration protected: bool bCanEditIconBrush= true Field Value Type Description bool | Improve this Doc View Source bIsPlated True if the button should display a back plate. Collections of buttons should share a common back plate. Declaration protected: bool bIsPlated= true Field Value Type Description bool | Improve this Doc View Source ButtonBrush Structure which contains properties for the button's appearance and behavior. Declaration protected: FUxtButtonBrush ButtonBrush Field Value Type Description FUxtButtonBrush | Improve this Doc View Source FocusTimer The current animation time of the focus animation. Declaration protected: float FocusTimer= 0 Field Value Type Description float | Improve this Doc View Source FrontPlateCenterComponent The center of mass pivot of the front plate. Declaration protected: USceneComponent * FrontPlateCenterComponent= nullptr Field Value Type Description USceneComponent * | Improve this Doc View Source FrontPlateMeshComponent Front plate mesh component. Declaration protected: UStaticMeshComponent * FrontPlateMeshComponent= nullptr Field Value Type Description UStaticMeshComponent * | Improve this Doc View Source FrontPlatePivotComponent Pivot component to support front plate compression visuals. Declaration protected: USceneComponent * FrontPlatePivotComponent= nullptr Field Value Type Description USceneComponent * | Improve this Doc View Source IconComponent Icon text component. Declaration protected: UTextRenderComponent * IconComponent= nullptr Field Value Type Description UTextRenderComponent * | Improve this Doc View Source Label Localizable text for the label. Declaration protected: FText Label= NSLOCTEXT(\"PressableButtonActor\", \"LabelDefault\", \"16x32x32mm\") Field Value Type Description FText | Improve this Doc View Source LabelComponent Label text component. Declaration protected: UTextRenderComponent * LabelComponent= nullptr Field Value Type Description UTextRenderComponent * | Improve this Doc View Source LabelTextBrush Text settings for the label. Declaration protected: FUxtTextBrush LabelTextBrush Field Value Type Description FUxtTextBrush | Improve this Doc View Source MaterialIndex The active material based on which pointer triggered the pulse. Declaration protected: uint32 MaterialIndex= 0 Field Value Type Description uint32 | Improve this Doc View Source MillimeterSize The millimeter size of the button which dynamically resizes components within the button. This will preserve the actor scale. Declaration protected: FVector MillimeterSize= FVector(16, 32, 32) Field Value Type Description FVector | Improve this Doc View Source PrePulseMaterial Handle to the original (unaltered) material before pulsing. Declaration protected: UMaterialInterface * PrePulseMaterial= nullptr Field Value Type Description UMaterialInterface * | Improve this Doc View Source PulseFadeTimer The current animation time of the pulse fade out animation. Declaration protected: float PulseFadeTimer= -1 Field Value Type Description float | Improve this Doc View Source PulseMaterialInstance Handle to any dynamic material the pulse instantiates due to material parameter changes. Declaration protected: UMaterialInstanceDynamic * PulseMaterialInstance= nullptr Field Value Type Description UMaterialInstanceDynamic * | Improve this Doc View Source PulseTimer The current animation time of the pulse animation. Declaration protected: float PulseTimer= -1 Field Value Type Description float Methods | Improve this Doc View Source AnimateFocus(float DeltaTime) Method to update the focus animation and behavior. Returns true when the animation is complete. Declaration protected: virtual bool AnimateFocus(float DeltaTime) Parameters Type Name Description float DeltaTime Returns Type Description bool | Improve this Doc View Source AnimatePulse(float DeltaTime) Method to update the pulse animation and behavior. Returns true when the animation is complete. Declaration protected: virtual bool AnimatePulse(float DeltaTime) Parameters Type Name Description float DeltaTime Returns Type Description bool | Improve this Doc View Source BeginPulse(const UUxtPointerComponent *Pointer) Starts the pulse animation for a given pointer. Declaration public: bool BeginPulse(const UUxtPointerComponent *Pointer) Parameters Type Name Description const UUxtPointerComponent * Pointer Returns Type Description bool | Improve this Doc View Source ConstructIcon() Creates (and initializes) the button's icon hierarchy. Declaration public: virtual void ConstructIcon() | Improve this Doc View Source ConstructLabel() Creates (and initializes) the button's label hierarchy. Declaration public: virtual void ConstructLabel() | Improve this Doc View Source ConstructVisuals() Creates (and initializes) the button's visual hierarchy. Declaration public: virtual void ConstructVisuals() | Improve this Doc View Source CreateAndAttachComponent(FName Name, USceneComponent *Parent) Utility method to allocate and add a scene component to the button. Declaration protected: T * CreateAndAttachComponent(FName Name, USceneComponent *Parent) Parameters Type Name Description FName Name USceneComponent * Parent Returns Type Description T * Type Parameters Name Description _a_uxt_pressable_button_actor_CreateAndAttachComponent_FName_USceneComponent___ | Improve this Doc View Source GetButtonBrush() Accessor to the button's button brush. Declaration public: const FUxtButtonBrush & GetButtonBrush() const Returns Type Description const FUxtButtonBrush & | Improve this Doc View Source GetIconBrush() Accessor to the button's icon brush. Declaration public: const FUxtIconBrush & GetIconBrush() const Returns Type Description const FUxtIconBrush & | Improve this Doc View Source GetLabel() Accessor to the button's label. Declaration public: const FText & GetLabel() const Returns Type Description const FText & | Improve this Doc View Source GetLabelTextBrush() Accessor to the button's label text brush. Declaration public: const FUxtTextBrush & GetLabelTextBrush() const Returns Type Description const FUxtTextBrush & | Improve this Doc View Source GetMillimeterSize() Accessor to the button size in millimeters. Declaration public: FVector GetMillimeterSize() const Returns Type Description FVector | Improve this Doc View Source GetSize() Accessor to the button size in default units. Declaration public: FVector GetSize() const Returns Type Description FVector | Improve this Doc View Source IsPlated() Accessor to if the button is plated. Declaration public: bool IsPlated() const Returns Type Description bool | Improve this Doc View Source IsPulsing() Returns true if a pulse is currently animating. Declaration public: bool IsPulsing() const Returns Type Description bool | Improve this Doc View Source OnBeginFocus(UUxtPressableButtonComponent *Button, UUxtPointerComponent *Pointer, bool WasAlreadyFocused) Method which is invoked when the button is focused on. Declaration protected: virtual void OnBeginFocus(UUxtPressableButtonComponent *Button, UUxtPointerComponent *Pointer, bool WasAlreadyFocused) Parameters Type Name Description UUxtPressableButtonComponent * Button UUxtPointerComponent * Pointer bool WasAlreadyFocused | Improve this Doc View Source OnButtonDisabled(UUxtPressableButtonComponent *Button) Method which is invoked when the button is disabled. Declaration protected: virtual void OnButtonDisabled(UUxtPressableButtonComponent *Button) Parameters Type Name Description UUxtPressableButtonComponent * Button | Improve this Doc View Source OnButtonEnabled(UUxtPressableButtonComponent *Button) Method which is invoked when the button is enabled. Declaration protected: virtual void OnButtonEnabled(UUxtPressableButtonComponent *Button) Parameters Type Name Description UUxtPressableButtonComponent * Button | Improve this Doc View Source OnButtonPressed(UUxtPressableButtonComponent *Button, UUxtPointerComponent *Pointer) Method which is invoked when the button is pressed. Declaration protected: virtual void OnButtonPressed(UUxtPressableButtonComponent *Button, UUxtPointerComponent *Pointer) Parameters Type Name Description UUxtPressableButtonComponent * Button UUxtPointerComponent * Pointer | Improve this Doc View Source OnButtonReleased(UUxtPressableButtonComponent *Button, UUxtPointerComponent *Pointer) Method which is invoked when the button is released. Declaration protected: virtual void OnButtonReleased(UUxtPressableButtonComponent *Button, UUxtPointerComponent *Pointer) Parameters Type Name Description UUxtPressableButtonComponent * Button UUxtPointerComponent * Pointer | Improve this Doc View Source OnConstruction(const FTransform &Transform) Creates (and initializes) the button hierarchy when properties are changed. Declaration public: virtual void OnConstruction(const FTransform &Transform) override Parameters Type Name Description const FTransform & Transform | Improve this Doc View Source SetButtonBrush(const FUxtButtonBrush &Brush) Applies a new button brush. Declaration public: void SetButtonBrush(const FUxtButtonBrush &Brush) Parameters Type Name Description const FUxtButtonBrush & Brush | Improve this Doc View Source SetIconBrush(const FUxtIconBrush &Brush) Applies a new icon brush. Declaration public: void SetIconBrush(const FUxtIconBrush &Brush) Parameters Type Name Description const FUxtIconBrush & Brush | Improve this Doc View Source SetIsPlated(bool IsPlated) Enables or disabled the button back plate. Declaration public: void SetIsPlated(bool IsPlated) Parameters Type Name Description bool IsPlated | Improve this Doc View Source SetLabel(const FText &NewLabel) Applies a new label. Declaration public: void SetLabel(const FText &NewLabel) Parameters Type Name Description const FText & NewLabel | Improve this Doc View Source SetLabelTextBrush(const FUxtTextBrush &Brush) Applies a new label text brush. Declaration public: void SetLabelTextBrush(const FUxtTextBrush &Brush) Parameters Type Name Description const FUxtTextBrush & Brush | Improve this Doc View Source SetMillimeterSize(FVector Size) Sets the button size in millimeters. Declaration public: void SetMillimeterSize(FVector Size) Parameters Type Name Description FVector Size | Improve this Doc View Source SetSize(FVector Size) Sets the button size in default units. Declaration public: void SetSize(FVector Size) Parameters Type Name Description FVector Size | Improve this Doc View Source Tick(float DeltaTime) Conditional tick method which occurs when a button needs to animate. Declaration public: virtual void Tick(float DeltaTime) override Parameters Type Name Description float DeltaTime"
  },
  "api/_a_uxt_input_simulation_actor.html": {
    "href": "api/_a_uxt_input_simulation_actor.html",
    "title": "Class AUxtInputSimulationActor | UXT Documentation",
    "keywords": "Class AUxtInputSimulationActor Actor that produces head pose and hand animations for the input simulation subsystem. Inheritance System::Object AActor AUxtInputSimulationActor Namespace : Assembly : .dll Syntax public: class AUxtInputSimulationActor Fields | Improve this Doc View Source bAddDefaultInputBindings If true, adds default input bindings for input simulation. Declaration public: uint32 bAddDefaultInputBindings Field Value Type Description uint32 Methods | Improve this Doc View Source BeginPlay() Declaration public: virtual void BeginPlay() override | Improve this Doc View Source GetHeadMovement() Declaration public: UUxtInputSimulationHeadMovementComponent * GetHeadMovement() const Returns Type Description UUxtInputSimulationHeadMovementComponent * | Improve this Doc View Source GetLeftHand() Declaration public: USkeletalMeshComponent * GetLeftHand() const Returns Type Description USkeletalMeshComponent * | Improve this Doc View Source GetRightHand() Declaration public: USkeletalMeshComponent * GetRightHand() const Returns Type Description USkeletalMeshComponent * | Improve this Doc View Source OnConstruction(const FTransform &Transform) Declaration public: virtual void OnConstruction(const FTransform &Transform) Parameters Type Name Description const FTransform & Transform | Improve this Doc View Source Tick(float DeltaSeconds) Declaration public: virtual void Tick(float DeltaSeconds) override Parameters Type Name Description float DeltaSeconds"
  },
  "api/_u_x_tools_runtime_settings.html": {
    "href": "api/_u_x_tools_runtime_settings.html",
    "title": "Class UXToolsRuntimeSettings | UXT Documentation",
    "keywords": "Class UXToolsRuntimeSettings Inheritance System::Object ModuleRules UXToolsRuntimeSettings Namespace : Assembly : .dll Syntax public: class UXToolsRuntimeSettings Constructors | Improve this Doc View Source UXToolsRuntimeSettings(ReadOnlyTargetRules Target) Declaration public: UXToolsRuntimeSettings(ReadOnlyTargetRules Target) Parameters Type Name Description ReadOnlyTargetRules Target"
  },
  "Docs/UIElements.html": {
    "href": "Docs/UIElements.html",
    "title": "UI Elements | UXT Documentation",
    "keywords": "UI Elements UI elements give the user a way to show and hide groups of UI functionality. UI elements are scene components that can be attached to any actor to allow its visibility to be controlled by its parent element. Parent-child relationships are managed via actor attachments. If the parent is hidden, all of its children will be hidden. It is recommended to have the UxtUIElementComponent as the root component as the actor as this allows it to automatically update if the actor is attached to a new parent actor. If it is not the root component, RefreshUIElement() will need to be called manually after attaching a new parent actor. Note : Manually changing actor visibility will not affect child UI elements and may lead to unwanted behavior. Built-in UI Elements A number of the built in components are UI elements by default, but any actor can be given UI element functionality by attaching a UxtUIElementComponent . UxtPressableButtonComponent UxtPinchSliderComponent UxtTouchableVolumeComponent"
  },
  "Docs/TouchableVolume.html": {
    "href": "Docs/TouchableVolume.html",
    "title": "Touchable Volume | UXT Documentation",
    "keywords": "Touchable Volume The touchable volume component allows the user to interact with an object by touching it. Usage Create a UxtTouchableVolumeComponent on an Actor. By default, the volume will trigger events when the user interacts with any primitive on the actor. The can be configured by populating the Touchable Primitives set with the primitives that should trigger events, which will limit interaction to only the primitives contained in the set. Events The touchable volume generates several events that can be used to drive interactions: OnBeginFocus : Event raised when a pointer starts focusing the touchable volume. OnUpdateFocus : Event raised when a focusing pointer updates. OnEndFocus : Event raised when a pointer ends focusing the touchable volume. OnBeginPoke : Event raised when a pointer starts poking the touchable volume. OnUpdatePoke : Event raised while a pointer is poking the touchable volume. OnEndPoke : Event raised when a pointer ends poking the touchable volume. OnVolumeEnabled : Event raised when the volume is enabled. OnVolumeDisabled : Event raised when the volume is disabled."
  },
  "README.html": {
    "href": "README.html",
    "title": "What are the UX Tools? | UXT Documentation",
    "keywords": "What are the UX Tools? UX Tools for Unreal Engine is a UE game plugin with code, blueprints and example assets created to help you add in features commonly needed when you're developing UX for Mixed Reality applications. NOTE: Only HoloLens 2 development is supported at the moment. Getting started with UX Tools If you're new to MRTK or Mixed Reality development in Unreal, we recommend starting at the beginning of our Unreal development journey in the Microsoft Docs. The Unreal development journey is specifically tailored to walk new developers through the installation, core concepts, and usage of the UX Tools. CAUTION: The Unreal development journey currently uses UX Tools 0.11.x and Unreal 4.26.0+ . If you're already familiar with Mixed Reality development in Unreal, you can find the installation instructions for the UX Tools plugin here . Documentation Welcome to UX Tools Feature Guides API Reference Required software Windows SDK 18362+ Unreal 4.26.0+ Visual Studio 2019 To build apps with MRTK-Unreal and UX Tools, you need the Windows 10 May 2019 Update SDK The Unreal Engine provides support for building Mixed Reality projects in Windows 10 Visual Studio is used for code editing UX building blocks Input Simulation Hand Interaction Button In-editor simulation of articulated hands and headset pose Support for far and near hand interactions with Unreal's primitives A 3d button specifically designed for hand interactions Slider Bounds Control Manipulators A 3d slider specifically designed for hand interactions A component that allows the user to transform an actor via affordances A component that allows an actor to be picked up by a user and then moved, rotated or scaled Hand Menu Near Menu UMG support Hand-attached UI great for frequently used functions Floating menu UI for near interactions A component that allows hand-driven interactions with Unreal's UMG widgets Tap to Place Follow Behavior Surface Magnetism A component that can be used to easily place primitive components against surfaces A component used to keep objects \"following\" the user by applying a set of constraints on the component's owner A component that allows an actor to stick to a surface UI Element A component that allows an actor's visibility to be controlled by its parent actor, allowing for easy construction of hierarchical UIs Tools Utilities Graphics Plugin containing a handful of tools that augment the Unreal Engine editor Breakdown of shaders, materials, and graphics techniques used to render UX components Example maps If you want to explore the different UXT features you can try out the UX Tools Game project. You can download the pre-built UX Tools Game application and deploy it to a HoloLens device right away. Alternatively, you can build the latest version of UX Tools Game from source. It is also possible to try out the UX Tools examples inside your own project . Please note that the examples should be only used as a reference. Your final project should not have a dependency on the UX Tools Examples plugin. Packaged UX Tools Game example application We also provide the UX Tools Game pre-packaged for HoloLens 2, so you can try out the main UX Tools features directly on device easily. To use it: Obtain the packaged game from the latest release page (i.e. UXTGame-HoloLens.<version>.zip ) and unzip it to a local directory. Install it in the device via the Device Portal . Building the latest UX Tools Game example application For that you should: Clone this repository. Checkout the latest 'public/ version .x' branch. Bear in mind that this branch is alive. It's not a release, and will be updated regularly with potentially breaking changes . There will be a release tag (e.g. release/0.11.0 ) marked as such in GitHub. You can now open the UX Tools Game ( /UXToolsGame/UXToolsGame.uproject ) and explore individual example maps or open the Loader level to access some of the examples from a centralized hub. Importing examples to your project You can also copy the UX Tools Examples to a new project. This is a convenient way to use the provided sample scenes as a reference when building your own Mixed Reality experiences. You are free to reuse the sample UI elements but please ensure that your final project does not declare a dependency on the UX Tools Examples plugin. There are two ways in which you can add the example scenes to your project: You can obtain a pre-built version of the UX Tools Examples plugin from the latest GitHub release. You can download UXToolsExamples.<version>.zip from release attachments and extract its contents into the Plugins folder inside your Unreal Engine project. Alternatively, you can clone this repository and copy UXToolsGame/Plugins/UXToolsExamples to the Plugins subdirectory in your own project. If you want to use content from the examples plugin as part of your project, make sure to copy that content to your project's Content folder. Newer versions of the examples plugin may change or remove existing content without notice. Please note that you also need to add the UX Tools plugin to your project . Always use a UX Tools Plugin version that matches the version of the UX Tools Examples . Example content is only guaranteed to work with a single version of the UX Tools Plugin as releases can introduce breaking changes. Sample apps made with UX Tools This simple Chess App is the final result of following the getting started tutorial located on Microsoft's Mixed Reality docs. If you're new to Mixed Reality development and UX Tools, get started here: Build a chess app with MRTK UX Tools Kippy's Escape is an open-source HoloLens 2 sample app demonstrating how to use UX Tools components to create a fun and interactive Mixed Reality experience. Read the story behind the app: The Making of Kippy's Escape Feedback and contributions Contributions and feedback in the shape of bug reports, suggestions and feature requests are always welcome! However, we are not in a position to accept external contributions through pull requests at this time."
  },
  "Docs/Text.html": {
    "href": "Docs/Text.html",
    "title": "Text | UXT Documentation",
    "keywords": "Text UX Tools contains assets, actors, and components which are optimized to render text correctly and efficiently on Mixed Reality devices. Text rendering within Mixed Reality can be challenging as opposed to traditional 2D text because text in Mixed Reality can be viewed from any angle or distance. Make sure text is large, high contrast, and accessible. More information about designing text for Mixed Reality can be found on this page . Text Actors & Components To provide automatic text configuration UX Tools contains an actor named UxtTextRenderActor and component named UxtTextRenderComponent . The UxtTextRenderActor and UxtTextRenderComponent automatically construct text with appropriate font, font material, and sizing defaults. The UxtTextRenderComponent derives from the TextRenderComponent and all properties can be accessed and altered via the top level UxtTextRenderActor component wrapper actor details panel: It is recommended when adding new text to your level, or blueprint, that you begin with the UxtTextRenderActor or UxtTextRenderComponent and make adjustments where required. Note If the text needs to be resized it is best to change the World Size property to avoid non-uniform scaling of text. Fonts A library of recommended fonts are included with UX Tools. The primary font used for text is Font_SegoeUI_Semibold_42 and Font_SegoeUI_Bold_42 . Icons are normally rendered with a font (rather than a texture) and use the Font_SegoeHoloMDL_Regular_42 and Font_SegoeMDL2_Regular_42 fonts. The SegoeHoloMDL and SegoeMDL2 fonts provide symbol glyphs commonly used in Windows Mixed Reality applications. To easily browse the glyphs available in a font try utilizing the a UxtIconBrush struct and icon brush editor . Most fonts within UX Tools are offline fonts, which are pre-computed font atlases. Offline fonts are less flexible than Unreal's runtime fonts but provided better performance results on HoloLens. Note UX Tools contains the runtime font Font_SegoeUI_Semibold_Dynamic for use with UMG because offline fonts cannot be used with UMG. Normally fonts include Unreal's default character set but some fonts, such as SegoeHoloMDL and SegoeMDL2 , only import a subset of the default character set. To import additional characters you can perform the following actions: Open the desired font. In this example Font_SegoeMDL2_Regular_42 . Navigate to the \"Import Options\" in the details panel. Add any new characters needed to the \"Chars\" array property. Select the font in the the content browser. Right click on the font and select \"Reimport.\" Importing a New Font If you would like to use a custom font it is recommended that the font be imported following the below steps: In a content browser right click and select User Interface > Font . Name the font: Font_FontName_FontStyle_FontSize Open the new font asset. Change the \"Font Cache Type\" to \"Offline\" and select your font with the modal window that will appear. Change the \"Texture Page Width\" and \"Texture Page Max Height\" to 1024 and 1024 (or a size that will fit your font within as little pages as reasonable possible). Note Having multiple font pages can dramatically increases your application's draw call counts and hence rendering performance. 6) Check \"Use Distance Field Alpha\" to true. 7) Select your new font in the the content browser. 8) Right click on the font and select \"Reimport.\" Depending on how many characters are in your font the reimport may take a few minutes. Note If the font import process takes an extremely long time you may want to constrain your font's character set using the \"Character Set,\" \"Chars,\" \"Unicode Range,\" or \"Chars File Path\" properties under the font's \"Import Options.\" Once your font has reimported the font atlas should look similar to the below image. The characters should appear a little \"blurred\" because the font is stored as encoded signed distance field. You should now be able to use the font with the M_DefaultFont material. Materials All text in UX Tools is rendered using the M_DefaultFont material. The M_DefaultFont material takes a font texture stored as a signed distance field and displays the font as a unlit masked surface. Masked surfaces display either fully opaque or fully translucent pixels. Masked surfaces are great for text rendering because, unlike some other blend modes, it does not require sorting. But, masked surfaces can result in aliasing. If your application displays aliasing on text verify aliasing is occurring on your target stereo headset(s) (and not only within the play-in-editor viewport). If aliasing still occurs on your target headset(s) try increasing the size of your text. If increasing text size is not an option for reducing aliasing you can utilize full screen antialiasing techniques (such as MSAA or FXAA) on tethered Mixed Reality headsets. Full screen antialiasing is not recommend on HoloLens due to performance constraints. Local antialiasing can be an efficient way to reduce aliasing on text as well. To achieve local antialiasing duplicate the M_DefaultFont material and set the Material \"Blend Mode\" to \"Translucent\". Translucent materials can display pixel translucency values between opaque and transparent to provide a translucent gradient. Note, Translucent materials can provide reduced aliasing but may incur additional render cost due to fill rate concerns or renderer sorting requirements. See also Utilities Graphics"
  },
  "Docs/TapToPlaceComponent.html": {
    "href": "Docs/TapToPlaceComponent.html",
    "title": "Tap To Place | UXT Documentation",
    "keywords": "Tap To Place The UXT Tap To Place component is a far interaction component used to place objects against surfaces. It is especially useful for placing objects against the spacial mesh. You can initiate the tap to place behaviour by selecting the target object with far interaction. The object will then track either the head or the hand, moving along hit surfaces until it the user ends placement by making any other far tap. To enable real world collision generation, the following values should be enabled in ARSessionConfig > ARSettings > World Mapping : [x] Generate Mesh Data from Tracked Geometry [x] Generate Collision for Mesh Data You can also add a World Override blueprint in Blueprint > World Override (see TapToPlaceExample for reference). Usage Add a primitive component to your actor/actor blueprint. Also add a UxtTapToPlaceComponent. Set the Target Component property to reference the primitive component you have already added. You should now be able to select the primitive with far interaction to initiate placement. Events OnBeginFocus : Event raised when the far pointer starts focusing the tap to place target primitive. OnUpdateFocus : Event raised when the focusing far pointer updates. OnEndFocus : Event raised when the far pointer stops focusing the tap to place target primitive. OnBeginPlacing : Event raised when a far pointer selects the tap to place target primitive and placement begins. OnEndPlacing : Event raised when any far pointer is pressed during placement. Properties Orientation Type : This property provides options for how the target component will be placed against hit surfaces. If Align to Camera is selected, the target component will always face the camera. If Align To Surface is selected, the target component will align with the normal of the surface the component is being placed against. Placement Type : This property provides options for what the target component will track during placement. If Head is selected, the component will be placed at the centre of the users vision and will move as the user moves their hand. If Hand is selected, the component will be placed at the end of the hand Far Beam and will move as the user moves their hand. Keep Orientation Vertical : If true, the object will remain upright, even if being placed against surfaces that are not upright. Default Placement Distance : During placement, if there is no surface to place against, the target component will be placed at this distance from the head/hand. Max Raycast Distance : The maximum distance to ray cast to check if there are surfaces to place against. Trace Channel : The trace channel used for the ray cast. Interpolate Pose : If true, the object will interpolate smoothly between poses. Lerp Time : The rate at which the object will interpolate between target poses if Interpolate Pose is true. Target Component : A reference to the primitive component that is transformed by the tap to place component. Selecting this primitive with far interaction will initiate placement."
  },
  "Docs/SurfaceMagnetism.html": {
    "href": "Docs/SurfaceMagnetism.html",
    "title": "Surface Magnetism | UXT Documentation",
    "keywords": "Surface Magnetism The surface magnetism component allows the user to interact with the component and stick the containing actor to a surface (either in game or to real world walls). Interaction is done via far interaction only. To enable real world collision generation, the following values should be enabled in ARSessionConfig > ARSettings > World Mapping : [x] Generate Mesh Data from Tracked Geometry [x] Generate Collision for Mesh Data Here are the events that you can use to hook up to your application logic: OnMagnetismStarted : This event is called when the user interacts with the component. OnMagnetismEnded : This event is called when the user stops interacting with the component or, if movement is smoothed, when the component comes to a stop after interaction ends. Instance Editable Properties Trace Distance Maximum length of the trace for a surface to stick to. Smooth position If true , the target will interpolate between current position and hit location. If false , the target will snap instantly to the hit location. Position Interp Value If SmoothPosition is true , this is the position's interpolation speed (using standard UE4 Interp values). Smooth Rotation If true , the target will interpolate between current rotation and hit normal. If false , the target will snap instantly to the hit normal. Rotation Interp Value If SmoothRotation is true , this is the rotation's interpolation speed (using standard UE4 Interp values) Impact Normal Offset Distance offset from the hit point to place the target at, along the hit normal. Trace Ray Offset Distance offset from the hit point to place the target at, along the traced ray (i.e. back towards the user). Trace Channel The channel that is traced for surfaces to stick to. Keep Orientation Vertical If true , pitch and roll are omitted."
  },
  "Docs/NearMenu.html": {
    "href": "Docs/NearMenu.html",
    "title": "Near Menu | UXT Documentation",
    "keywords": "Near Menu Near Menu is a UX control which provides a collection of buttons or other UI components. It floats around the user's body using the follow component and is easily accessible anytime. Since it is loosely coupled with the user, it does not disturb the user's interaction with the target content. The user can use the 'Pin' button to world-lock/unlock the menu. The menu can be grabbed and placed at a specific position. Interaction behavior Tag-along : The menu follows you and stays within 30-60cm range from the user for the near interactions. Pin : Using the 'Pin' button, the menu can be world-locked and released. Grab and move : The menu is always grabbable and movable. Regardless of the previous state, the menu will be pinned (world-locked) when grabbed and released. There are visual cues for the grabbable area. They are revealed on hand proximity. Blueprints Near Menu blueprints are designed to demonstrate how to use UX Tool's various components to build menus for near interactions. It is recommended to derive from these blueprints when creating new or custom near menus. BP_NearMenu2x1.uasset BP_NearMenu3x1.uasset BP_NearMenu3x2.uasset BP_NearMenu3x3.uasset BP_NearMenu4x1.uasset BP_NearMenu4x2.uasset Example level There are some examples of various near menus within the \\UXToolsGame\\Plugins\\UXToolsExamples\\Content\\NearMenu\\NearMenuExample.umap level. Creating a near menu When creating a near menu for your application it is recommended to copy the near menu you need from the above Blueprints into your project to derive from. Create a new blueprint class, select one of the BP_NearMenu* blueprints as a parent class. In this example we will derive from BP_NearMenu3x3 and call our blueprint BP_ExampleNearMenu . Now that we have our foundation, we can customize the menu. Any button may be customized by selecting a button ChildActorComponent and modifying settings within the child actor template. The UxtFollow and UxtGenericManipulator components can be altered to change follow and manipulation behavior respectively. A handful of properties exist on the near menu blueprint root to adjust the auto follow behavior. Finally, to tie logic to buttons on the menu we need to bind to the On Button Pressed event. The below blueprint graph will print \"Hello\" when \"Menu One\" is pressed: The Get Component by Class method is looking for a UxtPressableButton component. More information FollowComponent Manipulator PressableButton"
  },
  "Docs/Manipulator.html": {
    "href": "Docs/Manipulator.html",
    "title": "Manipulator Component | UXT Documentation",
    "keywords": "Manipulator Components Manipulator components allow an actor to be picked up by a user and then moved, rotated or scaled. Generic Manipulator The Generic Manipulator component is a general-purpose implementation of the Manipulator Component Base . It supports both one and two-handed manipulation with a number of configurable settings to change its behavior. One-handed manipulation If one-handed manipulation is enabled the actor can be moved with just one hand. This mode supports movement and rotation, but not scaling of the actor. The way hand rotation translates into actor rotation depends on the One Hand Rotation Mode : Maintain Original Rotation : Does not rotate object as it is being moved. Rotate About Object Center : Only works for articulated hands/controllers. Rotate object using rotation of the hand/controller, but about the object center point. Useful for inspecting at a distance. Rotate About Grab Point : Only works for articulated hands/controllers. Rotate object as if it was being held by hand/controller. Useful for inspection. Maintain Rotation To User : Maintains the object's original rotation for Y/Z axis to the user. Gravity Aligned Maintain Rotation To User : Maintains object's original rotation to user, but makes the object vertical. Useful for bounding boxes. Face User : Ensures object always faces the user. Useful for slates/panels. Face Away From User : Ensures object always faces away from user. Useful for slates/panels that are configured backwards. Two-handed manipulation If two-handed manipulation is enabled the actor can be moved, rotated, and scaled by grabbing it with both hands. Each of these actions can be enabled or disabled separately as needed, e.g. an actor can have rotation and scaling enabled while movement is disabled. Movement uses the center point between both hands, so each hand contributes half of the translation. Rotation is based on imaginary axis between both hands. The actor will rotate with the change of this axis, while avoiding roll around it. Scaling uses the change in distance between hands. Smoothing The generic manipulator has a simple smoothing option to reduce jittering from noisy input. This becomes especially important with one-handed rotation, where hand tracking can be unreliable and the resulting transform amplifies jittering. The smoothing method is based on a low-pass filter that gets applied to the source transform location and rotation. The resulting actor transform T_final is a exponentially weighted average of the current transform T_current and the raw target transform T_target based on the time step: T_final = Lerp( T_current, T_target, Exp(-Smoothing * DeltaSeconds) ) Notes Manipulating a Procedural Mesh When using the Generic Manipulator with a Procedural Mesh , you will need to: Disable \"Use Complex as Simple Collision\" on the Procedural Mesh . Set \"Create Collision\" when creating the Procedural Mesh . This is due to UXTools only querying for simple collision volumes when detecting interaction targets, in order to ensure correct detection in all situations. You can read more about simple vs complex collisions here . Manipulating physics-enabled components Sometimes you want to manipulate components that are physics-enabled, that is, components affected by gravity and collisions with other actors. If your physically simulated component (e.g. a Static Mesh Component with Simulate Physics enabled) is the root component of the actor, Generic Manipulator will work out of the box. If the component is not the root, you'll have to set it as the target component of the manipulator: This is necessary because: By default Generic Manipulator modifies the transform of the actor's root component. Physics-enabled components detach themselves from their attach parents automatically at simulation start."
  },
  "Docs/HandMenu.html": {
    "href": "Docs/HandMenu.html",
    "title": "Hand Menu | UXT Documentation",
    "keywords": "Hand Menu Hand menus allow users to quickly bring up hand-attached UI for frequently used functions. To prevent false activation while interacting with other objects, hand menu provides options such as 'Require Flat Hand'. It is recommended to use these options to prevent unwanted activation. There are some examples of various hand menus in \\UXToolsGame\\Plugins\\UXToolsExamples\\Content\\HandMenu\\Blueprints . Creating a hand menu In this example we are going to create a basic three button hand menu, similar to BP_SmallHandMenu in the hand menu example scene. The UxtUIElementComponent and the UxtPalmUpConstraintComponent handle the majority of the work for a simple hand menu. Create a new blueprint actor, in this example we will call it BP_ExampleHandMenu . Add a UxtUIElementComponent and set it as the root component for the actor. Add a UxtPalmUpConstraintComponent and set Require Flat Hand and Require Gaze to true to prevent false activations. Now that we have our foundation, we will add some buttons to the menu. Add three ChildActorComponent s to the blueprint, and set their child actor class to UxtPressableButtonActor . Move one button above and another below the center button. This will be a Z value of 3.2 and -3.2. Configure the buttons using the button options in the child actor template. Next we want to give the buttons a seamless backplate. Add a UxtBackPlateComponent and set its material to MI_HoloLens2BackPlate . Set the back plate's scale to 9.6 on the Z axis to make it three buttons tall. Un-check Is Plated on the button actors to remove their default backplate. Finally we want to show and hide the menu using the palm up constraint. In the event graph, add the On Constraint Activated and On Constraint Deactivated events from the UxtPalmUpConstraintComponent In On Constraint Activated , call Set UI Visibility on the UxtUIElementComponent with a value of Show . In On Constraint Deactivated , call Set UI Visibility on the UxtUIElementComponent with a value of Hide . You can configure how far the menu will sit from the hand with the Goal Margin property on the UxtPalmUpConstraintComponent , for this example it is set to 3.6. Set the UI Visibility property on the UxtUIElementComponent to Hide to hide the menu by default. To test out the menu in editor, press the Home key while moving a hand to put it in the flat palm pose and move the hand towards the center of the screen to trigger the gaze requirement. More information UxtUIElementComponent UxtPalmUpConstraintComponent UxtPressableButtonComponent"
  },
  "Docs/HandInteraction.html": {
    "href": "Docs/HandInteraction.html",
    "title": "Hand Interaction | UXT Documentation",
    "keywords": "Hand interaction Hand interaction with UX elements is performed via the hand interaction actor . This actor takes care of creating and driving the pointers and visuals for near and far interactions. Near interactions are performed by either grabbing elements pinching them between index and thumb or poking at them with the finger tip. While in near interaction mode a finger cursor is displayed on the finger tip to provide feedback about the closest poke target. Far interacions are performed pointing via a ray attached to the hand with selection triggered by pressing index and thumb tips together. A far beam is displayed representing the ray shooting out of the hand. At the end of the beam a far cursor gives feedback about the current far target. Poke and grab targets are defined by adding a component implementing the grab target interface and poke target interface . All visible objects with collision will be hit by the far ray by default but only components implementing the far target interface will receive far interaction events. Provided UX elements like the pressable button implement these interfaces to use interactions to drive their state. Hand interaction actor Add a AUxtHandInteractionActor to the world per hand in order to be able to interact with UX elements. There is no other additional setup required, just remember to set the actors to different hands via their Hand property as by default they use the left hand. See MRPawn in UXToolsGame for an example of hand interaction setup. The actor will automatically create the required components for near and far pointers and their visualization. Properties controlling the setup of these are exposed in the actor directly. A few ones deserving special attention are explained in the following sections. Near activation distance Each hand will transition automatically from far to near interaction mode when close enough to a near interaction target. The near activation distance defines how close the hand must be to the target for this to happen. Trace channel The hand actor and its pointers perform a series of world queries to determine the current interaction target. The trace channel property is used to filter the results of those queries. Default visuals Default visuals are created for near and far cursor and far beam in the form of the following components: Near cursor: UUxtFingerCursorComponent Far cursor: UUxtFarCursorComponent Far beam: UUxtFarBeamComponent In order to allow for custom visuals, their creation can be individually disabled via properties in the advanced section of the Hand Interaction category. See also Mixed Reality Instinctual Interactions : design principles behind the interaction model. IUxtGrabTarget IUxtPokeTarget IUxtFarTarget"
  },
  "Docs/FollowComponent.html": {
    "href": "Docs/FollowComponent.html",
    "title": "Follow Component | UXT Documentation",
    "keywords": "FollowComponent The FollowComponent is used to keep objects \"following\" the user by applying a set of constraints on the component's owner. Usage Place a FollowComponent on your actor. In this example, we created an empty actor and added some geometry and text to make a panel that we want to keep in front of the user. Since we also want it to always face the user, we've set the \"Orientation Type\" to \"FaceCamera\". Hint: The camera looks down the +X axis, so you may want the front face of your content be in the -X direction. Behavior Details The FollowComponent has three different constraints that keeps its owner in front of the camera: Angular Clamp, Distance Clamp, and Orientation. The combination of Angular and Distance Clamp creates a frustum in front of the camera where its owner can be. If its owner is outside that frustum it is adjusted. Angular Clamp : The objective of this constraint is to ensure that the reference forward vector remains within the bounds set by the leashing parameters. To do this, determine the angles between toTarget and the leashing bounds about the global Z-axis and the reference's Y-axis. If the toTarget falls within the leashing bounds, then we don't have to modify it. Otherwise, we apply a correction rotation to bring it within bounds. This will ensure that the its owner stays within the top, bottom, right and left planes of the frustum. Distance Clamp : The objective of this constraint is to ensure that the following actor stays within bounds set by the distance parameters. To do this, we measure the current distance from the camera to the its owner. If the distance is within the MinimumDistance and MaximumDistance then we don't have to modify it. Otherwise, we push away or pull in the its owner along the reference forward vector. This will ensure that the its owner stays within the near and far planes of the frustum. Fixed vertical Offset : The objective of this constraint is to ensure the following actor stays at a fixed vertical distance away from the camera. This can be used to ensure the following actor always sits above/below eye level to prevent the actor from obstructing the user's vision. Orientation : The two options provided are constant FaceCamera or WorldLock. While world locked there are three conditions that will cause the its owner to face the camera: Angular Clamps Distance Clamps The angle between the forward vector of the its owner and toTarget vector (vector between the camera and the its owner) is larger than dead zone angle parameter"
  },
  "Docs/FarBeam.html": {
    "href": "Docs/FarBeam.html",
    "title": "Far Beam | UXT Documentation",
    "keywords": "Far Beam The far beam component allows the user to visualise elements in the scene they can interact with from afar. If you wish to customise the look of the beam, you can set the beam material by calling SetBeamMaterial with the material you wish to use. This material can have the following parameters if you wish to use them in your material. IsGrabbing : Scalar parameter. This value will be 0.0f if the user is not grabbing with the far cursor, 1.0f if they are. handIndex : Scalar parameter. This value will be 0.0f for the left hand, 1.0f for the right hand. The default material for the far beam has the following parameters: Far Beam Material Interface Color Color value for the solid beam Emissive Emissive intensity for the beam Gradation Hardness Scalar value to control the gradation hardness Gradation Multiply Scalar value for the gradation of the solid beam Gradation Offset Scalar value for the gradation start position offset Gradation Scale Scalar value to control the gradation scale Line Number Scalar value to control the dot amount in the beam Middle Fade Scalar value to control the fade-out intensity of the dotted beam Mid Fade Offset Scalar value to control the fade-out position of the dotted beam Is Grabbing System value for if the user is currently grabbing Hand Index System value used for distinguishing left from right hand Spline Length System value used for the beam length"
  },
  "Docs/CONTRIBUTING.html": {
    "href": "Docs/CONTRIBUTING.html",
    "title": "Contributing | UXT Documentation",
    "keywords": "Contributing to UX Tools for Unreal Engine Due to the early stage of the project and the likelihood of internal refactors, we are not in a position to accept external contributions via pull requests at this time. However, contributions and feedback in the shape of bug reports, suggestions and feature requests are welcome and encouraged. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com . This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments."
  },
  "Docs/WelcomeToUXTools.html": {
    "href": "Docs/WelcomeToUXTools.html",
    "title": "Welcome to UX Tools | UXT Documentation",
    "keywords": "Welcome to UX Tools UX Tools is the first MRTK-Unreal component to be released and is currently only supported on HoloLens 2. The component plugin includes code, blueprints, and example assets of common UX features for input simulation, hand interaction actors, press-able button components, manipulator components and follow behavior components. Development If you're new to MRTK or Mixed Reality development in Unreal, we recommend starting at the beginning of our Unreal development journey , which was specifically created to walk you through installation, core concepts, and usage. Caution The Unreal development journey currently uses UX Tools 0.11.x and Unreal 4.26.0 or later . If you're working with other configurations it's still recommended that you start there, but you can also refer to the installation instructions . Documentation Versioning We have complete documentation for all release versions, but we recommend using the highest numbered public release branch for stability. Versions can be selected from the dropdown at the top-right of the screen: Getting help If you run into issues caused by UX Tools or have questions about how to do something, please file an issue on the GitHub repo."
  },
  "Docs/Tooltip.html": {
    "href": "Docs/Tooltip.html",
    "title": "Tooltip | UXT Documentation",
    "keywords": "Tooltip Tooltips are used to convey a hint or extra information upon closer inspection of an object. They can be used to annotate objects in the physical environment. How to use a tooltip There is an AUxtTooltipActor can be dragged and dropped in the scene to instantiate a tooltip. Once instantiated, the tooltip can point to an actor/component by modifying the Tooltip Target property or calling the SetTarget function. It is also possible to change the tooltip content for any blueprint widget by setting the Widget Class property. The spline tangents can be modified if you want to change the curve. Public Properties Tooltip Target Property to point at an actor/component. Clearing the component property to none should result in binding the tooltip to the center of the actor. The component name defaults to DefaultSceneRoot . Widget Class This property allows the user to set any blueprint widget class so that the tooltip renders it. When cleared, the tooltip will default to some default text. Anchor The anchor is a scene node that is used to offset the end point of the spline going to the target. Start Point is at tooltip location and End Point is at the target's location. Margin The Margin property that can be used to add space between the text and the border of the back plate. Dynamic Tooltips Having too many tooltips can get costly. This is a component for a tooltip that can be spawned dynamically based on preset events. How to use a dynamic tooltip The dynamic tooltip is used by creating a TooltipSpawnerComponent and adding it to the actor that you want the tooltip to point at. The following properties will modify the tooltips behavior. Public Properties Appear Type Parameter to script what will spawn the tooltip. Vanish Type Parameter to script what will make the tooltip vanish. Remain Type Parameter to script whether the tooltip remains indefinitely or if it uses the Lifetime parameter to timeout. Appear Delay Parameter to script a delay before spawning the tooltip. Vanish Delay Parameter to script a delay before the tooltip vanishes. Lifetime Parameter to script how long the tooltip will be spawned for. Widget Class Parameter to script what widget class to use on this tooltip. Pivot An offset to specify where the tooltip will be spawned. Widget Scale Scales the widget. OnShowTooltip Delegate to drive OnShow events. OnHideTooltip Delegate to drive OnHide events."
  },
  "Docs/TransformConstraints.html": {
    "href": "Docs/TransformConstraints.html",
    "title": "Transform Constraints | UXT Documentation",
    "keywords": "Transform Constraints UXTools provides a mechanism to implement and apply transform constraints to actors on manipulation by using a UxtConstraintManager . They are integrated with the UxtManipulatorComponent and UxtBoundsControlComponent out of the box. Usage In order to use constraints: Add any desired UxtTransformConstraint -derived components to the actor. Add any components that contain and use a UxtConstraintManager instance, such as UxtManipulatorComponent and UxtBoundsControlComponent . By default, every UxtConstraintManager instance will take all the constraint components attached to the actor into consideration. Built-in constraint components There are a few built-in constraint components, which will hopefully save you from having to write your own. UxtFaceUserConstraint Makes the actor face the camera while interacting with it. Set bFaceAway to true to make the object face away from the camera. UxtFixedDistanceConstraint Makes the actor stay at a fixed distance from the camera. With Without UxtFixedRotationToUserConstraint Makes the actor maintain the same rotation (relative to the user) that it had when the interaction started. Set bExcludeRoll to false to allow rolling of the actor. UxtFixedRotationToWorldConstraint Makes the actor maintain the same rotation (relative to the world) that it had when the interaction started. UxtMaintainApparentSizeConstraint Makes the actor maintain the apparent size (relative to the user) that it had when the interaction started. UxtMinMaxScaleConstraint Limits the minimum and maximum scale of the actor during manipulation, via MinScale and MaxScale properties respectively. Use bRelativeToInitialScale to configure whether the limits are relative to the scale at interaction start ( true ) or absolute ( false ). (Example limiting the minimum scale to 0.3 ) UxtMoveAxisConstraint Limits movement on specific axes. Use the ConstraintOnMovement bit mask of EUxtAxisFlags . (Example limiting the movement along the X and Z axes) UxtRotationAxisConstraint Limits rotation on specific axes. Use the ConstraintOnRotation bit mask of EUxtAxisFlags . (Example limiting the rotation around the X and Y axes) Adding more constraint components If none of the Built-in constraint components suits your needs, you can add more by simply creating a new UCLASS that inherits from UxtTransformConstraint . Then, provide implementations for GetConstraintType , ApplyConstraint and (optionally) Initialize . In this case, please feel free to take a look at our contributing docs and make a suggestion!"
  },
  "api/_u_uxt_poke_target.html": {
    "href": "api/_u_uxt_poke_target.html",
    "title": "Class UUxtPokeTarget | UXT Documentation",
    "keywords": "Class UUxtPokeTarget Inheritance System::Object UInterface UUxtPokeTarget Namespace : Assembly : .dll Syntax public: class UUxtPokeTarget"
  },
  "api/_u_uxt_poke_handler.html": {
    "href": "api/_u_uxt_poke_handler.html",
    "title": "Class UUxtPokeHandler | UXT Documentation",
    "keywords": "Class UUxtPokeHandler Inheritance System::Object UInterface UUxtPokeHandler Namespace : Assembly : .dll Syntax public: class UUxtPokeHandler"
  },
  "api/_u_uxt_palm_up_constraint_component.html": {
    "href": "api/_u_uxt_palm_up_constraint_component.html",
    "title": "Class UUxtPalmUpConstraintComponent | UXT Documentation",
    "keywords": "Class UUxtPalmUpConstraintComponent Hand constraint component that becomes active if the hand is facing the player camera. The palm must be facing the camera for the constraint to be active. Optionally the hand can also be rejected if it isn't flat. Inheritance System::Object UActorComponent UUxtHandConstraintComponent UUxtPalmUpConstraintComponent Inherited Members UUxtHandConstraintComponent::BeginPlay() UUxtHandConstraintComponent::bMoveOwningActor UUxtHandConstraintComponent::GetGoalLocation() UUxtHandConstraintComponent::GetGoalRotation() UUxtHandConstraintComponent::GetHandBounds() UUxtHandConstraintComponent::GetTrackedHand() UUxtHandConstraintComponent::GoalMargin UUxtHandConstraintComponent::Hand UUxtHandConstraintComponent::IsConstraintActive() UUxtHandConstraintComponent::LocationLerpTime UUxtHandConstraintComponent::OffsetMode UUxtHandConstraintComponent::OnBeginTracking UUxtHandConstraintComponent::OnConstraintActivated UUxtHandConstraintComponent::OnConstraintDeactivated UUxtHandConstraintComponent::OnEndTracking UUxtHandConstraintComponent::RotationLerpTime UUxtHandConstraintComponent::RotationMode UUxtHandConstraintComponent::TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) UUxtHandConstraintComponent::UUxtHandConstraintComponent() UUxtHandConstraintComponent::Zone Namespace : Assembly : .dll Syntax public: class UUxtPalmUpConstraintComponent : public xtHandConstraintComponent Constructors | Improve this Doc View Source UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Uxt Palm Up Constraint\", meta=(EditCondition=\"bRequireFlatHand\", ClampMin=\"0.0\", ClampMax=\"90.0\")) Maximum allowed angle between palm and index/ring finger/palm triangle to be considered a flat hand. Declaration public: UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Uxt Palm Up Constraint\", meta=(EditCondition=\"bRequireFlatHand\", ClampMin=\"0.0\", ClampMax=\"90.0\")) float MaxFlatHandAngle Parameters Type Name Description EditAnywhere _u_uxt_palm_up_constraint_component_UPROPERTY_EditAnywhere_BlueprintReadWrite_Category_meta_ BlueprintReadWrite _u_uxt_palm_up_constraint_component_UPROPERTY_EditAnywhere_BlueprintReadWrite_Category_meta_ Category _u_uxt_palm_up_constraint_component_UPROPERTY_EditAnywhere_BlueprintReadWrite_Category_meta_ meta _u_uxt_palm_up_constraint_component_UPROPERTY_EditAnywhere_BlueprintReadWrite_Category_meta_ Fields | Improve this Doc View Source bRequireFlatHand If true then the hand needs to be flat to be accepted. The triangle between index, ring finger, and palm needs to be aligned with the palm within MaxFlatHandAngle. Declaration public: bool bRequireFlatHand= false Field Value Type Description bool | Improve this Doc View Source bRequireGaze If true then the user must be looking at their hand to be accepted. Head gaze will be used if an eye tracker is not available. Declaration public: bool bRequireGaze= false Field Value Type Description bool | Improve this Doc View Source MaxPalmAngle Maximum allowed angle between the negative palm normal and view vector. If the angle exceeds the limit the hand is not used. Declaration public: float MaxPalmAngle= 75.0f Field Value Type Description float Methods | Improve this Doc View Source IsHandUsableForConstraint(EControllerHand NewHand) Returns true if the given hand is eligible for the constraint. If the hand is rejected the constraint will be deactivated. Declaration public: virtual bool IsHandUsableForConstraint(EControllerHand NewHand) override Parameters Type Name Description EControllerHand NewHand Returns Type Description bool Overrides UUxtHandConstraintComponent::IsHandUsableForConstraint(EControllerHand NewHand)"
  },
  "api/_u_uxt_near_pointer_component.html": {
    "href": "api/_u_uxt_near_pointer_component.html",
    "title": "Class UUxtNearPointerComponent | UXT Documentation",
    "keywords": "Class UUxtNearPointerComponent Adds poke and grab interactions to an actor. It keeps track of all overlapping poke targets and raises focus events on the closest one. Targets use the transform of pointers focusing them to drive their interactions. Inheritance System::Object UActorComponent UUxtPointerComponent UUxtNearPointerComponent Inherited Members UUxtPointerComponent::bFocusLocked UUxtPointerComponent::GetCursorTransform() UUxtPointerComponent::GetFocusLocked() UUxtPointerComponent::GetFocusTarget() UUxtPointerComponent::Hand UUxtPointerComponent::SetFocusLocked(bool bLocked) UUxtPointerComponent::UUxtPointerComponent() Namespace : Assembly : .dll Syntax public: class UUxtNearPointerComponent : public xtPointerComponent Constructors | Improve this Doc View Source ~UUxtNearPointerComponent() Declaration public: virtual ~UUxtNearPointerComponent() | Improve this Doc View Source UUxtNearPointerComponent() Declaration public: UUxtNearPointerComponent() Fields | Improve this Doc View Source DebounceDepth The distance the fingertip must be from a pokeable in order to fire a poke end event. This is used in order to distinguish the queries for poke begin and poke end so you cannot easily cause end touch to fire one frame and begin touch to fire on the next frame. Declaration public: float DebounceDepth= 0.5f Field Value Type Description float | Improve this Doc View Source GrabFocus Focus of the grab pointer Declaration protected: FUxtGrabPointerFocus * GrabFocus Field Value Type Description FUxtGrabPointerFocus * | Improve this Doc View Source GrabRadius Declaration public: float GrabRadius= 3.5f Field Value Type Description float | Improve this Doc View Source PokeDepth The depth beyond the front face at which a front face pokable no longer recieves poke events. While poking a front face pokable, if the near pointer moves beyond this depth, the pokable will receive a poke end event. Declaration public: float PokeDepth= 30.0f Field Value Type Description float | Improve this Doc View Source PokeFocus Focus of the poke pointer Declaration protected: FUxtPokePointerFocus * PokeFocus Field Value Type Description FUxtPokePointerFocus * | Improve this Doc View Source PokeRadius Declaration public: float PokeRadius= 0.75f Field Value Type Description float | Improve this Doc View Source ProximityRadius Declaration public: float ProximityRadius= 20.0f Field Value Type Description float | Improve this Doc View Source TraceChannel Declaration public: TEnumAsByte<ECollisionChannel> TraceChannel= ECollisionChannel::ECC_Visibility Field Value Type Description TEnumAsByte<ECollisionChannel> Methods | Improve this Doc View Source BeginPlay() Declaration public: virtual void BeginPlay() override | Improve this Doc View Source EndPlay(const EEndPlayReason::Type EndPlayReason) Declaration public: virtual void EndPlay(const EEndPlayReason::Type EndPlayReason) override Parameters Type Name Description const EEndPlayReason::Type EndPlayReason | Improve this Doc View Source GetCursorTransform() Declaration public: virtual FTransform GetCursorTransform() const override Returns Type Description FTransform | Improve this Doc View Source GetFocusedGrabPrimitive(FVector &OutClosestPointOnTarget, FVector &Normal) Returns currently focused grab primitive or null if there is none. Declaration public: UPrimitiveComponent * GetFocusedGrabPrimitive(FVector &OutClosestPointOnTarget, FVector &Normal) const Parameters Type Name Description FVector & OutClosestPointOnTarget FVector & Normal Returns Type Description UPrimitiveComponent * | Improve this Doc View Source GetFocusedGrabTarget(FVector &OutClosestPointOnTarget, FVector &Normal) Returns currently focused grab target or null if there is none. Declaration public: UObject * GetFocusedGrabTarget(FVector &OutClosestPointOnTarget, FVector &Normal) const Parameters Type Name Description FVector & OutClosestPointOnTarget FVector & Normal Returns Type Description UObject * | Improve this Doc View Source GetFocusedPokePrimitive(FVector &OutClosestPointOnTarget, FVector &Normal) Returns currently focused poke primitive or null if there is none. Declaration public: UPrimitiveComponent * GetFocusedPokePrimitive(FVector &OutClosestPointOnTarget, FVector &Normal) const Parameters Type Name Description FVector & OutClosestPointOnTarget FVector & Normal Returns Type Description UPrimitiveComponent * | Improve this Doc View Source GetFocusedPokeTarget(FVector &OutClosestPointOnTarget, FVector &Normal) Returns currently focused poke target or null if there is none. Declaration public: UObject * GetFocusedPokeTarget(FVector &OutClosestPointOnTarget, FVector &Normal) const Parameters Type Name Description FVector & OutClosestPointOnTarget FVector & Normal Returns Type Description UObject * | Improve this Doc View Source GetFocusTarget() Declaration public: virtual UObject * GetFocusTarget() const override Returns Type Description UObject * | Improve this Doc View Source GetGrabPointerTransform() Declaration public: FTransform GetGrabPointerTransform() const Returns Type Description FTransform | Improve this Doc View Source GetIsPoking() Declaration public: bool GetIsPoking() const Returns Type Description bool | Improve this Doc View Source GetPokePointerRadius() Declaration public: float GetPokePointerRadius() const Returns Type Description float | Improve this Doc View Source GetPokePointerTransform() Declaration public: FTransform GetPokePointerTransform() const Returns Type Description FTransform | Improve this Doc View Source IsGrabbing() Declaration public: bool IsGrabbing() const Returns Type Description bool | Improve this Doc View Source SetActive(bool bNewActive, bool bReset=false) Declaration public: virtual void SetActive(bool bNewActive, bool bReset=false) override Parameters Type Name Description bool bNewActive bool bReset | Improve this Doc View Source SetFocusedGrabTarget(UActorComponent *NewFocusedTarget, bool bEnableFocusLock) Set a focused grab target explicitly which will receive grasp events. If bEnableFocusLock is true, then the new focus target will be locked until released by calling SetFocusLocked. Declaration public: bool SetFocusedGrabTarget(UActorComponent *NewFocusedTarget, bool bEnableFocusLock) Parameters Type Name Description UActorComponent * NewFocusedTarget bool bEnableFocusLock Returns Type Description bool | Improve this Doc View Source SetFocusedPokeTarget(UActorComponent *NewFocusedTarget, bool bEnableFocusLock) Set a focused poke target explicitly which will receive grasp events. If bEnableFocusLock is true, then the new focus target will be locked until released by calling SetFocusLocked. Declaration public: bool SetFocusedPokeTarget(UActorComponent *NewFocusedTarget, bool bEnableFocusLock) Parameters Type Name Description UActorComponent * NewFocusedTarget bool bEnableFocusLock Returns Type Description bool | Improve this Doc View Source TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) Declaration public: virtual void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) override Parameters Type Name Description float DeltaTime ELevelTick TickType FActorComponentTickFunction * ThisTickFunction | Improve this Doc View Source UpdatePokeInteraction() Update poke distances and detect if poking the target. Declaration public: void UpdatePokeInteraction()"
  },
  "api/_u_uxt_math_utils_function_library.html": {
    "href": "api/_u_uxt_math_utils_function_library.html",
    "title": "Class UUxtMathUtilsFunctionLibrary | UXT Documentation",
    "keywords": "Class UUxtMathUtilsFunctionLibrary Library of utility functions for UX Tools. Inheritance System::Object UBlueprintFunctionLibrary UUxtMathUtilsFunctionLibrary Inherited Members UUxtMathUtilsFunctionLibrary Namespace : Assembly : .dll Syntax public: class UUxtMathUtilsFunctionLibrary Methods | Improve this Doc View Source CalculateHierarchyBounds(USceneComponent *Component, const FTransform &LocalToTarget, HierarchyBoundsFilter Filter=nullptr) Calculates the composite bounding box and bounding sphere around a component and its children. The optional filter component can be used to ignore specific scene components. Declaration public: static FBoxSphereBounds CalculateHierarchyBounds(USceneComponent *Component, const FTransform &LocalToTarget, HierarchyBoundsFilter Filter=nullptr) Parameters Type Name Description USceneComponent * Component const FTransform & LocalToTarget _u_uxt_math_utils_function_library.HierarchyBoundsFilter Filter Returns Type Description FBoxSphereBounds | Improve this Doc View Source CalculateHierarchyBounds(USceneComponent *Component, HierarchyBoundsFilter Filter=nullptr) Calculates the composite bounding box and bounding sphere around a component and its children, the output is in the space of the component. The optional filter component can be used to ignore specific scene components. Declaration public: static FBoxSphereBounds CalculateHierarchyBounds(USceneComponent *Component, HierarchyBoundsFilter Filter=nullptr) Parameters Type Name Description USceneComponent * Component _u_uxt_math_utils_function_library.HierarchyBoundsFilter Filter Returns Type Description FBoxSphereBounds | Improve this Doc View Source CalculateNestedActorBoundsInGivenSpace(const AActor *Actor, const FTransform &WorldToCalcSpace, bool bNonColliding, UPrimitiveComponent *Ignore=nullptr) Calculates the actor bounds for a given space transform Declaration public: static FBox CalculateNestedActorBoundsInGivenSpace(const AActor *Actor, const FTransform &WorldToCalcSpace, bool bNonColliding, UPrimitiveComponent *Ignore=nullptr) Parameters Type Name Description const AActor * Actor const FTransform & WorldToCalcSpace bool bNonColliding UPrimitiveComponent * Ignore Returns Type Description FBox | Improve this Doc View Source CalculateNestedActorBoundsInLocalSpace(const AActor *Actor, bool bNonColliding, UPrimitiveComponent *Ignore=nullptr) Calculates the actor bounds in local space Declaration public: static FBox CalculateNestedActorBoundsInLocalSpace(const AActor *Actor, bool bNonColliding, UPrimitiveComponent *Ignore=nullptr) Parameters Type Name Description const AActor * Actor bool bNonColliding UPrimitiveComponent * Ignore Returns Type Description FBox | Improve this Doc View Source GetRotationBetweenVectors(const FVector &Vector1, const FVector &Vector2) Compute minimal rotation between vectors. Declaration public: static FRotator GetRotationBetweenVectors(const FVector &Vector1, const FVector &Vector2) Parameters Type Name Description const FVector & Vector1 const FVector & Vector2 Returns Type Description FRotator | Improve this Doc View Source RotateAboutPivotPoint(const FTransform &Transform, const FRotator &Rotation, const FVector &Pivot) Apply rotation about a pivot point to the transform. Declaration public: static FTransform RotateAboutPivotPoint(const FTransform &Transform, const FRotator &Rotation, const FVector &Pivot) Parameters Type Name Description const FTransform & Transform const FRotator & Rotation const FVector & Pivot Returns Type Description FTransform | Improve this Doc View Source SwingTwistDecompose(const FRotator &Rotation, const FVector &TwistAxis, FRotator &Swing, FRotator &Twist) Decompose a rotation into swing and twist components. The twist component describes a rotation around the given twist axis, while the swing contains the remaining rotation. Declaration public: static void SwingTwistDecompose(const FRotator &Rotation, const FVector &TwistAxis, FRotator &Swing, FRotator &Twist) Parameters Type Name Description const FRotator & Rotation const FVector & TwistAxis FRotator & Swing FRotator & Twist"
  },
  "api/_u_uxt_manipulator_component_base.html": {
    "href": "api/_u_uxt_manipulator_component_base.html",
    "title": "Class UUxtManipulatorComponentBase | UXT Documentation",
    "keywords": "Class UUxtManipulatorComponentBase Base class for manipulation components that react to pointer interactions. This class does not modify the actor as-is. Implementations should use the provided functions to compute a target transform from grabbing pointers and call the ApplyTargetTransform method to actually modify the actor. Inheritance System::Object UActorComponent UUxtGrabTargetComponent UUxtManipulatorComponentBase Inherited Members IUxtFarHandler::CanHandleFar(UPrimitiveComponent *Primitive) UUxtGrabTargetComponent::CanHandleFar_Implementation(UPrimitiveComponent *Primitive) IUxtGrabHandler::CanHandleGrab(UPrimitiveComponent *Primitive) UUxtGrabTargetComponent::CanHandleGrab_Implementation(UPrimitiveComponent *Primitive) UUxtGrabTargetComponent::FindGrabPointer(UUxtNearPointerComponent *NearPointer, UUxtFarPointerComponent *FarPointer, bool &Success, FUxtGrabPointerData &PointerData, int &Index) UUxtGrabTargetComponent::ForceEndGrab() UUxtGrabTargetComponent::GetGrabPointCentroid(const FTransform &ToWorldTransform) UUxtGrabTargetComponent::GetGrabPointers() UUxtGrabTargetComponent::GetPointerCentroid() UUxtGrabTargetComponent::GetPrimaryGrabPointer(bool &Valid, FUxtGrabPointerData &PointerData) UUxtGrabTargetComponent::GetSecondaryGrabPointer(bool &Valid, FUxtGrabPointerData &PointerData) UUxtGrabTargetComponent::GetTargetCentroid() UUxtGrabTargetComponent::GetTickOnlyWhileGrabbed() UUxtGrabTargetComponent::GrabModes UUxtGrabTargetComponent::InteractionMode IUxtFarTarget::IsFarFocusable(const UPrimitiveComponent *Primitive) UUxtGrabTargetComponent::IsFarFocusable_Implementation(const UPrimitiveComponent *Primitive) IUxtGrabTarget::IsGrabFocusable(const UPrimitiveComponent *Primitive) UUxtGrabTargetComponent::IsGrabFocusable_Implementation(const UPrimitiveComponent *Primitive) UUxtGrabTargetComponent::OnBeginGrab IUxtGrabHandler::OnBeginGrab(UUxtNearPointerComponent *Pointer) UUxtGrabTargetComponent::OnBeginGrab_Implementation(UUxtNearPointerComponent *Pointer) UUxtGrabTargetComponent::OnEndGrab IUxtGrabHandler::OnEndGrab(UUxtNearPointerComponent *Pointer) UUxtGrabTargetComponent::OnEndGrab_Implementation(UUxtNearPointerComponent *Pointer) UUxtGrabTargetComponent::OnEnterFarFocus IUxtFarHandler::OnEnterFarFocus(UUxtFarPointerComponent *Pointer) UUxtGrabTargetComponent::OnEnterFarFocus_Implementation(UUxtFarPointerComponent *Pointer) UUxtGrabTargetComponent::OnEnterGrabFocus IUxtGrabHandler::OnEnterGrabFocus(UUxtNearPointerComponent *Pointer) UUxtGrabTargetComponent::OnEnterGrabFocus_Implementation(UUxtNearPointerComponent *Pointer) UUxtGrabTargetComponent::OnExitFarFocus IUxtFarHandler::OnExitFarFocus(UUxtFarPointerComponent *Pointer) UUxtGrabTargetComponent::OnExitFarFocus_Implementation(UUxtFarPointerComponent *Pointer) UUxtGrabTargetComponent::OnExitGrabFocus IUxtGrabHandler::OnExitGrabFocus(UUxtNearPointerComponent *Pointer) UUxtGrabTargetComponent::OnExitGrabFocus_Implementation(UUxtNearPointerComponent *Pointer) IUxtFarHandler::OnFarDragged(UUxtFarPointerComponent *Pointer) UUxtGrabTargetComponent::OnFarDragged_Implementation(UUxtFarPointerComponent *Pointer) IUxtFarHandler::OnFarPressed(UUxtFarPointerComponent *Pointer) UUxtGrabTargetComponent::OnFarPressed_Implementation(UUxtFarPointerComponent *Pointer) IUxtFarHandler::OnFarReleased(UUxtFarPointerComponent *Pointer) UUxtGrabTargetComponent::OnFarReleased_Implementation(UUxtFarPointerComponent *Pointer) IUxtFarHandler::OnUpdatedFarFocus(UUxtFarPointerComponent *Pointer) UUxtGrabTargetComponent::OnUpdatedFarFocus_Implementation(UUxtFarPointerComponent *Pointer) UUxtGrabTargetComponent::OnUpdateFarFocus UUxtGrabTargetComponent::OnUpdateGrab IUxtGrabHandler::OnUpdateGrab(UUxtNearPointerComponent *Pointer) UUxtGrabTargetComponent::OnUpdateGrab_Implementation(UUxtNearPointerComponent *Pointer) UUxtGrabTargetComponent::OnUpdateGrabFocus IUxtGrabHandler::OnUpdateGrabFocus(UUxtNearPointerComponent *Pointer) UUxtGrabTargetComponent::OnUpdateGrabFocus_Implementation(UUxtNearPointerComponent *Pointer) UUxtGrabTargetComponent::SetTickOnlyWhileGrabbed(bool bEnable) UUxtGrabTargetComponent::UUxtGrabTargetComponent() Namespace : Assembly : .dll Syntax public: class UUxtManipulatorComponentBase : public xtGrabTargetComponent Constructors | Improve this Doc View Source ~UUxtManipulatorComponentBase() Declaration public: ~UUxtManipulatorComponentBase() | Improve this Doc View Source UUxtManipulatorComponentBase() Declaration public: UUxtManipulatorComponentBase() Fields | Improve this Doc View Source bAutoSetInitialTransform If true the initial transform will be set automatically when the component is grabbed. Declaration public: bool bAutoSetInitialTransform= true Field Value Type Description bool | Improve this Doc View Source Constraints Declaration protected: UxtConstraintManager * Constraints Field Value Type Description UxtConstraintManager * | Improve this Doc View Source InitialCameraSpaceTransform Declaration public: FTransform InitialCameraSpaceTransform Field Value Type Description FTransform | Improve this Doc View Source InitialTransform Declaration public: FTransform InitialTransform Field Value Type Description FTransform | Improve this Doc View Source MoveLogic Declaration protected: UxtManipulationMoveLogic * MoveLogic Field Value Type Description UxtManipulationMoveLogic * | Improve this Doc View Source OnUpdateTransform Declaration public: FUxtUpdateTransformDelegate OnUpdateTransform Field Value Type Description FUxtUpdateTransformDelegate | Improve this Doc View Source TransformTarget The component to transform, will default to the root scene component if not specified Declaration public: USceneComponent * TransformTarget= nullptr Field Value Type Description USceneComponent * | Improve this Doc View Source TwoHandRotateLogic Declaration protected: UxtTwoHandManipulationRotateLogic * TwoHandRotateLogic Field Value Type Description UxtTwoHandManipulationRotateLogic * | Improve this Doc View Source TwoHandScaleLogic Declaration protected: UxtTwoHandManipulationScaleLogic * TwoHandScaleLogic Field Value Type Description UxtTwoHandManipulationScaleLogic * Methods | Improve this Doc View Source ApplyTargetTransform(const FTransform &TargetTransform) Apply the transform to the actor root scene component. Relative transform between the manipulator component and the root scene component is preserved. Declaration public: void ApplyTargetTransform(const FTransform &TargetTransform) Parameters Type Name Description const FTransform & TargetTransform | Improve this Doc View Source BeginPlay() Declaration protected: virtual void BeginPlay() override Overrides UUxtGrabTargetComponent::BeginPlay() | Improve this Doc View Source EndPlay(const EEndPlayReason::Type EndPlayReason) Declaration protected: virtual void EndPlay(const EEndPlayReason::Type EndPlayReason) override Parameters Type Name Description const EEndPlayReason::Type EndPlayReason | Improve this Doc View Source GetTargetComponent() Get the component the manipulator is targeting. Declaration public: USceneComponent * GetTargetComponent() Returns Type Description USceneComponent * | Improve this Doc View Source MoveToTargets(const FTransform &SourceTransform, FTransform &TargetTransform, bool UsePointerRotation) Translate the source transform such that grab points match targets. If more than one pointer is used then the centroid of the grab points and targets is used. Declaration public: void MoveToTargets(const FTransform &SourceTransform, FTransform &TargetTransform, bool UsePointerRotation) const Parameters Type Name Description const FTransform & SourceTransform FTransform & TargetTransform bool UsePointerRotation | Improve this Doc View Source RotateAboutAxis(const FTransform &SourceTransform, const FVector &Pivot, const FVector &Axis, FTransform &TargetTransform) Rotates the source transform around the pivot point on the given axis such that the pointers line up with current targets. If more than one pointer is used then the resulting rotation will minimize the mean square of target distances. Declaration public: void RotateAboutAxis(const FTransform &SourceTransform, const FVector &Pivot, const FVector &Axis, FTransform &TargetTransform) const Parameters Type Name Description const FTransform & SourceTransform const FVector & Pivot const FVector & Axis FTransform & TargetTransform | Improve this Doc View Source RotateAroundPivot(const FTransform &SourceTransform, const FVector &Pivot, FTransform &TargetTransform) Rotates the source transform around the pivot point such that the pointers line up with current targets. If more than one pointer is used then the resulting rotation will minimize the mean square of target distances. Declaration public: void RotateAroundPivot(const FTransform &SourceTransform, const FVector &Pivot, FTransform &TargetTransform) const Parameters Type Name Description const FTransform & SourceTransform const FVector & Pivot FTransform & TargetTransform | Improve this Doc View Source SetInitialTransform() Cache the initial world space and camera space transform. Manipulation should be based on these initial transform for stable results. If bAutoSetInitialTransform is true then the initial transform is updated when grabbed. Declaration public: void SetInitialTransform() | Improve this Doc View Source SmoothTransform(const FTransform &SourceTransform, float LocationSmoothing, float RotationSmoothing, float DeltaSeconds, FTransform &TargetTransform) Apply a low-pass filter to the source transform location and rotation to smooth out jittering. Target transform is a exponentially weighted average of the current component transform and the source transform based on the time step. Declaration public: void SmoothTransform(const FTransform &SourceTransform, float LocationSmoothing, float RotationSmoothing, float DeltaSeconds, FTransform &TargetTransform) const Parameters Type Name Description const FTransform & SourceTransform float LocationSmoothing float RotationSmoothing float DeltaSeconds FTransform & TargetTransform | Improve this Doc View Source TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) Declaration protected: virtual void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) override Parameters Type Name Description float DeltaTime ELevelTick TickType FActorComponentTickFunction * ThisTickFunction"
  },
  "api/_u_uxt_input_subsystem.html": {
    "href": "api/_u_uxt_input_subsystem.html",
    "title": "Class UUxtInputSubsystem | UXT Documentation",
    "keywords": "Class UUxtInputSubsystem Subsystem for dispatching events to interested handlers. Inheritance System::Object UGameInstanceSubsystem UUxtInputSubsystem Namespace : Assembly : .dll Syntax public: class UUxtInputSubsystem Methods | Improve this Doc View Source RaiseBeginGrab(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) Raised when a pointer starts grabbing while overlapping the actor. Declaration public: static void RaiseBeginGrab(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) Parameters Type Name Description UPrimitiveComponent * Target UUxtNearPointerComponent * Pointer | Improve this Doc View Source RaiseBeginPoke(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) Raised when a pointer poke volume starts overlapping the actor. Declaration public: static void RaiseBeginPoke(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) Parameters Type Name Description UPrimitiveComponent * Target UUxtNearPointerComponent * Pointer | Improve this Doc View Source RaiseEndGrab(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) Raised when a pointer stops grabbing or stops overlapping the actor while grabbing. Declaration public: static void RaiseEndGrab(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) Parameters Type Name Description UPrimitiveComponent * Target UUxtNearPointerComponent * Pointer | Improve this Doc View Source RaiseEndPoke(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) Raised when a pointer poke volume stops overlapping the actor. Declaration public: static void RaiseEndPoke(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) Parameters Type Name Description UPrimitiveComponent * Target UUxtNearPointerComponent * Pointer | Improve this Doc View Source RaiseEnterFarFocus(UPrimitiveComponent *Target, UUxtFarPointerComponent *Pointer) Raised when a far pointer starts focusing a primitive. Declaration public: static void RaiseEnterFarFocus(UPrimitiveComponent *Target, UUxtFarPointerComponent *Pointer) Parameters Type Name Description UPrimitiveComponent * Target UUxtFarPointerComponent * Pointer | Improve this Doc View Source RaiseEnterGrabFocus(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) Raised when a pointer focuses the actor. Declaration public: static void RaiseEnterGrabFocus(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) Parameters Type Name Description UPrimitiveComponent * Target UUxtNearPointerComponent * Pointer | Improve this Doc View Source RaiseEnterPokeFocus(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) Raised when a pointer focuses the actor. Declaration public: static void RaiseEnterPokeFocus(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) Parameters Type Name Description UPrimitiveComponent * Target UUxtNearPointerComponent * Pointer | Improve this Doc View Source RaiseExitFarFocus(UPrimitiveComponent *Target, UUxtFarPointerComponent *Pointer) Raised when a far pointer stops focusing a primitive. Declaration public: static void RaiseExitFarFocus(UPrimitiveComponent *Target, UUxtFarPointerComponent *Pointer) Parameters Type Name Description UPrimitiveComponent * Target UUxtFarPointerComponent * Pointer | Improve this Doc View Source RaiseExitGrabFocus(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) Raised when a pointer stops focusing the actor. Declaration public: static void RaiseExitGrabFocus(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) Parameters Type Name Description UPrimitiveComponent * Target UUxtNearPointerComponent * Pointer | Improve this Doc View Source RaiseExitPokeFocus(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) Raised when a pointer stops focusing the actor. Declaration public: static void RaiseExitPokeFocus(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) Parameters Type Name Description UPrimitiveComponent * Target UUxtNearPointerComponent * Pointer | Improve this Doc View Source RaiseFarDragged(UPrimitiveComponent *Target, UUxtFarPointerComponent *Pointer) Raised when a focusing far pointer is dragged. Declaration public: static void RaiseFarDragged(UPrimitiveComponent *Target, UUxtFarPointerComponent *Pointer) Parameters Type Name Description UPrimitiveComponent * Target UUxtFarPointerComponent * Pointer | Improve this Doc View Source RaiseFarPressed(UPrimitiveComponent *Target, UUxtFarPointerComponent *Pointer) Raised when a focusing far pointer is pressed. Declaration public: static void RaiseFarPressed(UPrimitiveComponent *Target, UUxtFarPointerComponent *Pointer) Parameters Type Name Description UPrimitiveComponent * Target UUxtFarPointerComponent * Pointer | Improve this Doc View Source RaiseFarReleased(UPrimitiveComponent *Target, UUxtFarPointerComponent *Pointer) Raised when a focusing far pointer is released. Declaration public: static void RaiseFarReleased(UPrimitiveComponent *Target, UUxtFarPointerComponent *Pointer) Parameters Type Name Description UPrimitiveComponent * Target UUxtFarPointerComponent * Pointer | Improve this Doc View Source RaiseUpdatedFarFocus(UPrimitiveComponent *Target, UUxtFarPointerComponent *Pointer) Raised when a focusing far pointer is updated. Declaration public: static void RaiseUpdatedFarFocus(UPrimitiveComponent *Target, UUxtFarPointerComponent *Pointer) Parameters Type Name Description UPrimitiveComponent * Target UUxtFarPointerComponent * Pointer | Improve this Doc View Source RaiseUpdateGrab(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) Raised when a pointer has been updated while grabbing. Declaration public: static void RaiseUpdateGrab(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) Parameters Type Name Description UPrimitiveComponent * Target UUxtNearPointerComponent * Pointer | Improve this Doc View Source RaiseUpdateGrabFocus(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) Raised when a pointer has been updated while focused. Declaration public: static void RaiseUpdateGrabFocus(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) Parameters Type Name Description UPrimitiveComponent * Target UUxtNearPointerComponent * Pointer | Improve this Doc View Source RaiseUpdatePoke(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) Raised while a pointer poke volume is overlapping the actor. Declaration public: static void RaiseUpdatePoke(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) Parameters Type Name Description UPrimitiveComponent * Target UUxtNearPointerComponent * Pointer | Improve this Doc View Source RaiseUpdatePokeFocus(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) Raised when a pointer has been updated while focused. Declaration public: static void RaiseUpdatePokeFocus(UPrimitiveComponent *Target, UUxtNearPointerComponent *Pointer) Parameters Type Name Description UPrimitiveComponent * Target UUxtNearPointerComponent * Pointer | Improve this Doc View Source RegisterHandler(UObject *Handler, TSubclassOf<UInterface> Interface) Register the given handler as interested in events for a given handler interface. Declaration public: static bool RegisterHandler(UObject *Handler, TSubclassOf<UInterface> Interface) Parameters Type Name Description UObject * Handler TSubclassOf<UInterface> Interface Returns Type Description bool | Improve this Doc View Source UnregisterHandler(UObject *Handler, TSubclassOf<UInterface> Interface) Unregister the given handler as interested in events for a given handler interface. Declaration public: static bool UnregisterHandler(UObject *Handler, TSubclassOf<UInterface> Interface) Parameters Type Name Description UObject * Handler TSubclassOf<UInterface> Interface Returns Type Description bool"
  },
  "api/_u_uxt_input_simulation_state.html": {
    "href": "api/_u_uxt_input_simulation_state.html",
    "title": "Class UUxtInputSimulationState | UXT Documentation",
    "keywords": "Class UUxtInputSimulationState Simulation state for head movement and hand gestures. Inheritance System::Object UObject UUxtInputSimulationState Namespace : Assembly : .dll Syntax public: class UUxtInputSimulationState Constructors | Improve this Doc View Source UUxtInputSimulationState() Declaration public: UUxtInputSimulationState() Fields | Improve this Doc View Source HandInputMode If true, input will be interpreted as hand rotation instead of movement. Declaration public: EUxtInputSimulationHandMode HandInputMode= EUxtInputSimulationHandMode::Movement Field Value Type Description EUxtInputSimulationHandMode | Improve this Doc View Source RelativeHeadOrientation Head orientation relative to the character controller. Declaration public: FQuat RelativeHeadOrientation= FQuat::Identity Field Value Type Description FQuat | Improve this Doc View Source RelativeHeadPosition Head position relative to the character controller. Declaration public: FVector RelativeHeadPosition= FVector::ZeroVector Field Value Type Description FVector Methods | Improve this Doc View Source AddHandInput(EAxis::Type Axis, float Value) Add hand movement or rotation, depending on hand input mode. Declaration public: void AddHandInput(EAxis::Type Axis, float Value) Parameters Type Name Description EAxis::Type Axis float Value | Improve this Doc View Source AddHandMovementInput(EAxis::Type TranslationAxis, float Value) Add hand movement input along a local axis to all controlled hands. Declaration public: void AddHandMovementInput(EAxis::Type TranslationAxis, float Value) Parameters Type Name Description EAxis::Type TranslationAxis float Value | Improve this Doc View Source AddHandRotationInput(EAxis::Type RotationAxis, float Value) Add hand rotation input about a local axis to all controlled hands. Declaration public: void AddHandRotationInput(EAxis::Type RotationAxis, float Value) Parameters Type Name Description EAxis::Type RotationAxis float Value | Improve this Doc View Source GetControlledHands() Find all hands that are currently controlled. Declaration public: TArray<EControllerHand> GetControlledHands() const Returns Type Description TArray<EControllerHand> | Improve this Doc View Source GetTargetHandTransform(EControllerHand Hand, FTransform &TargetTransform, bool &bAnimate) Get the current target transform for a hand. If bAnimate is true then the transform should be blended over time, otherwise the target transform should be applied immediately. Declaration public: void GetTargetHandTransform(EControllerHand Hand, FTransform &TargetTransform, bool &bAnimate) const Parameters Type Name Description EControllerHand Hand FTransform & TargetTransform bool & bAnimate | Improve this Doc View Source GetTargetPose(EControllerHand Hand) Get the current animation pose of a hand. If the hand is currently controlled by user input it will use the current target pose, otherwise the default pose is used. Declaration public: FName GetTargetPose(EControllerHand Hand) const Parameters Type Name Description EControllerHand Hand Returns Type Description FName | Improve this Doc View Source IsAnyHandControlled() True if any hand is currently controlled by the user. Declaration public: bool IsAnyHandControlled() const Returns Type Description bool | Improve this Doc View Source IsHandControlled(EControllerHand Hand) True if the hand is currently controlled by the user. Declaration public: bool IsHandControlled(EControllerHand Hand) const Parameters Type Name Description EControllerHand Hand Returns Type Description bool | Improve this Doc View Source IsHandVisible(EControllerHand Hand) True if the hand is currently visible. Declaration public: bool IsHandVisible(EControllerHand Hand) const Parameters Type Name Description EControllerHand Hand Returns Type Description bool | Improve this Doc View Source Reset() Reset to default. Declaration public: void Reset() | Improve this Doc View Source ResetHandState(EControllerHand Hand) Reset hand state to default. Declaration public: void ResetHandState(EControllerHand Hand) Parameters Type Name Description EControllerHand Hand | Improve this Doc View Source ResetTargetPose(EControllerHand Hand) Reset the default target animation pose for a hand. Declaration public: void ResetTargetPose(EControllerHand Hand) Parameters Type Name Description EControllerHand Hand | Improve this Doc View Source SetDefaultHandLocation(EControllerHand Hand) Set the mesh for the given hand to the default location. Declaration public: void SetDefaultHandLocation(EControllerHand Hand) Parameters Type Name Description EControllerHand Hand | Improve this Doc View Source SetDefaultHandRotation(EControllerHand Hand) Set the rotation for the given hand to the rest rotation. Declaration public: void SetDefaultHandRotation(EControllerHand Hand) Parameters Type Name Description EControllerHand Hand | Improve this Doc View Source SetHandControlEnabled(EControllerHand Hand, bool bEnabled) Enable control of a simulated hand by the user. Returns true if hand control was successfully changed. Declaration public: bool SetHandControlEnabled(EControllerHand Hand, bool bEnabled) Parameters Type Name Description EControllerHand Hand bool bEnabled Returns Type Description bool | Improve this Doc View Source SetHandVisibility(EControllerHand Hand, bool bIsVisible) Set the hand visibility. Declaration public: void SetHandVisibility(EControllerHand Hand, bool bIsVisible) Parameters Type Name Description EControllerHand Hand bool bIsVisible | Improve this Doc View Source SetTargetPose(EControllerHand Hand, FName PoseName) Set the target animation pose for a hand. Declaration public: void SetTargetPose(EControllerHand Hand, FName PoseName) Parameters Type Name Description EControllerHand Hand FName PoseName | Improve this Doc View Source TogglePoseForControlledHands(FName PoseName) Toggle the target pose for all currently controlled hands. If all hands use the target pose already, all hands will reset to the default pose. If any hand does NOT use the target pose already, all hands will use it. Declaration public: void TogglePoseForControlledHands(FName PoseName) Parameters Type Name Description FName PoseName"
  },
  "api/_u_uxt_hand_constraint_component.html": {
    "href": "api/_u_uxt_hand_constraint_component.html",
    "title": "Class UUxtHandConstraintComponent | UXT Documentation",
    "keywords": "Class UUxtHandConstraintComponent Component that calculates a goal based on hand tracking and moves the owning actor. Several zones around the hand supported: radial and ulnar for the thumb side and its opposite, as well as above and below the hand. The goal position is computed by casting a ray in the direction of the zone at a bounding box around the hand joints. The constraint can be oriented on either the hand rotation alone or facing the player. Inheritance System::Object UActorComponent UUxtHandConstraintComponent Namespace : Assembly : .dll Syntax public: class UUxtHandConstraintComponent Constructors | Improve this Doc View Source UUxtHandConstraintComponent() Declaration public: UUxtHandConstraintComponent() Fields | Improve this Doc View Source bMoveOwningActor Actor transform is moved towards the goal if true. Disable this to only compute the goal without changing the actor transform. Declaration public: bool bMoveOwningActor= true Field Value Type Description bool | Improve this Doc View Source GoalMargin Margin between the hand bounding box and the goal location. Declaration public: float GoalMargin= 0.0f Field Value Type Description float | Improve this Doc View Source Hand Hand to use for the constraint. If set to 'Any Hand' the first tracked hand will be used, until tracking is lost. Declaration public: EControllerHand Hand= EControllerHand::AnyHand Field Value Type Description EControllerHand | Improve this Doc View Source LocationLerpTime Interpolation time for smoothed translation. Set to zero to disable smoothing. Declaration public: float LocationLerpTime= 0.05f Field Value Type Description float | Improve this Doc View Source OffsetMode Determines how the offset vector is computed. Declaration public: EUxtHandConstraintOffsetMode OffsetMode= EUxtHandConstraintOffsetMode::LookAtCamera Field Value Type Description EUxtHandConstraintOffsetMode | Improve this Doc View Source OnBeginTracking Event raised when the constraint begins tracking a hand. Declaration public: FUxtHandConstraintBeginTrackingDelegate OnBeginTracking Field Value Type Description FUxtHandConstraintBeginTrackingDelegate | Improve this Doc View Source OnConstraintActivated Event raised when the constraint becomes active, as indicated by the bIsConstraintActive property. Declaration public: FUxtHandConstraintActivatedDelegate OnConstraintActivated Field Value Type Description FUxtHandConstraintActivatedDelegate | Improve this Doc View Source OnConstraintDeactivated Event raised when the constraint becomes inactive, as indicated by the bIsConstraintActive property. Declaration public: FUxtHandConstraintDeactivatedDelegate OnConstraintDeactivated Field Value Type Description FUxtHandConstraintDeactivatedDelegate | Improve this Doc View Source OnEndTracking Event raised when the constraint ends tracking a hand. Declaration public: FUxtHandConstraintEndTrackingDelegate OnEndTracking Field Value Type Description FUxtHandConstraintEndTrackingDelegate | Improve this Doc View Source RotationLerpTime Interpolation time for smoothed rotation. Set to zero to disable smoothing. Declaration public: float RotationLerpTime= 0.05f Field Value Type Description float | Improve this Doc View Source RotationMode Determines how the goal rotation is computed. Declaration public: EUxtHandConstraintRotationMode RotationMode= EUxtHandConstraintRotationMode::LookAtCamera Field Value Type Description EUxtHandConstraintRotationMode | Improve this Doc View Source Zone Safe zone that determines the target location of the constraint relative to the hand. Declaration public: EUxtHandConstraintZone Zone= EUxtHandConstraintZone::UlnarSide Field Value Type Description EUxtHandConstraintZone Methods | Improve this Doc View Source BeginPlay() Declaration protected: virtual void BeginPlay() override | Improve this Doc View Source GetGoalLocation() Declaration public: const FVector & GetGoalLocation() const Returns Type Description const FVector & | Improve this Doc View Source GetGoalRotation() Declaration public: const FQuat & GetGoalRotation() const Returns Type Description const FQuat & | Improve this Doc View Source GetHandBounds() Declaration public: const FBox & GetHandBounds() const Returns Type Description const FBox & | Improve this Doc View Source GetTrackedHand() Declaration public: EControllerHand GetTrackedHand() const Returns Type Description EControllerHand | Improve this Doc View Source IsConstraintActive() Declaration public: bool IsConstraintActive() const Returns Type Description bool | Improve this Doc View Source IsHandUsableForConstraint(EControllerHand NewHand) Returns true if the given hand is eligible for the constraint. If the hand is rejected the constraint will be deactivated. Declaration public: virtual bool IsHandUsableForConstraint(EControllerHand NewHand) Parameters Type Name Description EControllerHand NewHand Returns Type Description bool | Improve this Doc View Source TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) Declaration protected: virtual void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) override Parameters Type Name Description float DeltaTime ELevelTick TickType FActorComponentTickFunction * ThisTickFunction"
  },
  "api/_u_uxt_grab_target_component.html": {
    "href": "api/_u_uxt_grab_target_component.html",
    "title": "Class UUxtGrabTargetComponent | UXT Documentation",
    "keywords": "Class UUxtGrabTargetComponent Interactable component that listens to grab events from near pointers. A pointer that starts grabing while near the actor is considered a grabbing pointer. The grab is released when the pointer stops grabing, regardless of whether it is still near or not. The GrabComponent does not react to grabbing pointers by itself, but serves as a base class for manipulation. Inheritance System::Object UActorComponent UUxtGrabTargetComponent Inherited Members IUxtFarHandler::CanHandleFar(UPrimitiveComponent *Primitive) IUxtGrabHandler::CanHandleGrab(UPrimitiveComponent *Primitive) IUxtFarTarget::IsFarFocusable(const UPrimitiveComponent *Primitive) IUxtGrabTarget::IsGrabFocusable(const UPrimitiveComponent *Primitive) IUxtGrabHandler::OnBeginGrab(UUxtNearPointerComponent *Pointer) IUxtGrabHandler::OnEndGrab(UUxtNearPointerComponent *Pointer) IUxtFarHandler::OnEnterFarFocus(UUxtFarPointerComponent *Pointer) IUxtGrabHandler::OnEnterGrabFocus(UUxtNearPointerComponent *Pointer) IUxtFarHandler::OnExitFarFocus(UUxtFarPointerComponent *Pointer) IUxtGrabHandler::OnExitGrabFocus(UUxtNearPointerComponent *Pointer) IUxtFarHandler::OnFarDragged(UUxtFarPointerComponent *Pointer) IUxtFarHandler::OnFarPressed(UUxtFarPointerComponent *Pointer) IUxtFarHandler::OnFarReleased(UUxtFarPointerComponent *Pointer) IUxtFarHandler::OnUpdatedFarFocus(UUxtFarPointerComponent *Pointer) IUxtGrabHandler::OnUpdateGrab(UUxtNearPointerComponent *Pointer) IUxtGrabHandler::OnUpdateGrabFocus(UUxtNearPointerComponent *Pointer) Namespace : Assembly : .dll Syntax public: class UUxtGrabTargetComponent : public xtGrabTarget, public xtGrabHandler, public xtFarTarget, public xtFarHandler Constructors | Improve this Doc View Source UUxtGrabTargetComponent() Declaration public: UUxtGrabTargetComponent() Fields | Improve this Doc View Source GrabModes Enabled grab modes. Declaration public: int32 GrabModes Field Value Type Description int32 | Improve this Doc View Source InteractionMode Property that indicates if the object is grabbable with far or near interaction or both. Declaration public: int32 InteractionMode Field Value Type Description int32 | Improve this Doc View Source OnBeginGrab Event raised when grab starts. Declaration public: FUxtBeginGrabDelegate OnBeginGrab Field Value Type Description FUxtBeginGrabDelegate | Improve this Doc View Source OnEndGrab Event raised when grab ends. Declaration public: FUxtEndGrabDelegate OnEndGrab Field Value Type Description FUxtEndGrabDelegate | Improve this Doc View Source OnEnterFarFocus Event raised when entering grab focus. Declaration public: FUxtEnterFarFocusDelegate OnEnterFarFocus Field Value Type Description FUxtEnterFarFocusDelegate | Improve this Doc View Source OnEnterGrabFocus Event raised when entering grab focus. Declaration public: FUxtEnterGrabFocusDelegate OnEnterGrabFocus Field Value Type Description FUxtEnterGrabFocusDelegate | Improve this Doc View Source OnExitFarFocus Event raised when exiting grab. Declaration public: FUxtExitFarFocusDelegate OnExitFarFocus Field Value Type Description FUxtExitFarFocusDelegate | Improve this Doc View Source OnExitGrabFocus Event raised when exiting grab. Declaration public: FUxtExitGrabFocusDelegate OnExitGrabFocus Field Value Type Description FUxtExitGrabFocusDelegate | Improve this Doc View Source OnUpdateFarFocus Event raised when grab focus updates. Declaration public: FUxtUpdateFarFocusDelegate OnUpdateFarFocus Field Value Type Description FUxtUpdateFarFocusDelegate | Improve this Doc View Source OnUpdateGrab Event raised when grab updates. Declaration public: FUxtUpdateGrabDelegate OnUpdateGrab Field Value Type Description FUxtUpdateGrabDelegate | Improve this Doc View Source OnUpdateGrabFocus Event raised when grab focus updates. Declaration public: FUxtUpdateGrabFocusDelegate OnUpdateGrabFocus Field Value Type Description FUxtUpdateGrabFocusDelegate Methods | Improve this Doc View Source BeginPlay() Declaration protected: virtual void BeginPlay() override | Improve this Doc View Source CanHandleFar_Implementation(UPrimitiveComponent *Primitive) Declaration protected: virtual bool CanHandleFar_Implementation(UPrimitiveComponent *Primitive) const override Parameters Type Name Description UPrimitiveComponent * Primitive Returns Type Description bool | Improve this Doc View Source CanHandleGrab_Implementation(UPrimitiveComponent *Primitive) Declaration protected: virtual bool CanHandleGrab_Implementation(UPrimitiveComponent *Primitive) const override Parameters Type Name Description UPrimitiveComponent * Primitive Returns Type Description bool | Improve this Doc View Source FindGrabPointer(UUxtNearPointerComponent *NearPointer, UUxtFarPointerComponent *FarPointer, bool &Success, FUxtGrabPointerData &PointerData, int &Index) Returns true if the pointer is currently grabbing the actor. PointerData will contain the associated grab data for the pointer. Index is the order in which pointers started grabbing. Declaration public: void FindGrabPointer(UUxtNearPointerComponent *NearPointer, UUxtFarPointerComponent *FarPointer, bool &Success, FUxtGrabPointerData &PointerData, int &Index) const Parameters Type Name Description UUxtNearPointerComponent * NearPointer UUxtFarPointerComponent * FarPointer bool & Success FUxtGrabPointerData & PointerData int & Index | Improve this Doc View Source ForceEndGrab() Release all currently grabbing pointers. Returns true if any pointers were grabbing and have been released, false if no pointers were grabbing. Declaration public: bool ForceEndGrab() Returns Type Description bool | Improve this Doc View Source GetGrabPointCentroid(const FTransform &ToWorldTransform) Compute the centroid of the grab points in world space. Declaration public: FTransform GetGrabPointCentroid(const FTransform &ToWorldTransform) const Parameters Type Name Description const FTransform & ToWorldTransform Returns Type Description FTransform | Improve this Doc View Source GetGrabPointers() Returns a list of all currently grabbing pointers. Declaration public: const TArray<FUxtGrabPointerData> & GetGrabPointers() const Returns Type Description const TArray< FUxtGrabPointerData > & | Improve this Doc View Source GetPointerCentroid() Compute the average transform of currently grabbing pointers Declaration protected: FTransform GetPointerCentroid() const Returns Type Description FTransform | Improve this Doc View Source GetPrimaryGrabPointer(bool &Valid, FUxtGrabPointerData &PointerData) Returns the first active grab pointer. If no pointer is grabbing the Valid output will be false. Declaration public: void GetPrimaryGrabPointer(bool &Valid, FUxtGrabPointerData &PointerData) const Parameters Type Name Description bool & Valid FUxtGrabPointerData & PointerData | Improve this Doc View Source GetSecondaryGrabPointer(bool &Valid, FUxtGrabPointerData &PointerData) Returns the second active grab pointer. If less than two pointers are grabbing the Valid output will be false. Declaration public: void GetSecondaryGrabPointer(bool &Valid, FUxtGrabPointerData &PointerData) const Parameters Type Name Description bool & Valid FUxtGrabPointerData & PointerData | Improve this Doc View Source GetTargetCentroid() Compute the centroid of the pointer targets in world space. Declaration public: FVector GetTargetCentroid() const Returns Type Description FVector | Improve this Doc View Source GetTickOnlyWhileGrabbed() Declaration public: bool GetTickOnlyWhileGrabbed() const Returns Type Description bool | Improve this Doc View Source IsFarFocusable_Implementation(const UPrimitiveComponent *Primitive) Declaration protected: virtual bool IsFarFocusable_Implementation(const UPrimitiveComponent *Primitive) const override Parameters Type Name Description const UPrimitiveComponent * Primitive Returns Type Description bool | Improve this Doc View Source IsGrabFocusable_Implementation(const UPrimitiveComponent *Primitive) Declaration protected: virtual bool IsGrabFocusable_Implementation(const UPrimitiveComponent *Primitive) const override Parameters Type Name Description const UPrimitiveComponent * Primitive Returns Type Description bool | Improve this Doc View Source OnBeginGrab_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnBeginGrab_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnEndGrab_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnEndGrab_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnEnterFarFocus_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnEnterFarFocus_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnEnterGrabFocus_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnEnterGrabFocus_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnExitFarFocus_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnExitFarFocus_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnExitGrabFocus_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnExitGrabFocus_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnFarDragged_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnFarDragged_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnFarPressed_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnFarPressed_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnFarReleased_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnFarReleased_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnUpdatedFarFocus_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnUpdatedFarFocus_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnUpdateGrab_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnUpdateGrab_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnUpdateGrabFocus_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnUpdateGrabFocus_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source SetTickOnlyWhileGrabbed(bool bEnable) Declaration public: void SetTickOnlyWhileGrabbed(bool bEnable) Parameters Type Name Description bool bEnable"
  },
  "api/_u_uxt_fixed_rotation_to_user_constraint.html": {
    "href": "api/_u_uxt_fixed_rotation_to_user_constraint.html",
    "title": "Class UUxtFixedRotationToUserConstraint | UXT Documentation",
    "keywords": "Class UUxtFixedRotationToUserConstraint Component for fixing the rotation of a manipulated object relative to the user Usage: Attach to actor that the constraint should be applied to. Inheritance System::Object UActorComponent UUxtTransformConstraint UUxtFixedRotationToUserConstraint Inherited Members UUxtTransformConstraint::HandType UUxtTransformConstraint::InteractionMode UUxtTransformConstraint::TargetComponent UUxtTransformConstraint::WorldPoseOnManipulationStart Namespace : Assembly : .dll Syntax public: class UUxtFixedRotationToUserConstraint : public xtTransformConstraint Fields | Improve this Doc View Source bExcludeRoll Should roll be excluded from locking to the users orientation Declaration public: bool bExcludeRoll= true Field Value Type Description bool Methods | Improve this Doc View Source ApplyConstraint(FTransform &Transform) Applies constraints to transforms during manipulation Declaration public: virtual void ApplyConstraint(FTransform &Transform) const override Parameters Type Name Description FTransform & Transform Overrides UUxtTransformConstraint::ApplyConstraint(FTransform &Transform) | Improve this Doc View Source GetConstraintType() Enabled manipulation modes. Declaration public: virtual EUxtTransformMode GetConstraintType() const override Returns Type Description EUxtTransformMode Overrides UUxtTransformConstraint::GetConstraintType() | Improve this Doc View Source Initialize(const FTransform &WorldPose) Intended to be called on manipulation started Declaration public: virtual void Initialize(const FTransform &WorldPose) override Parameters Type Name Description const FTransform & WorldPose Overrides UUxtTransformConstraint::Initialize(const FTransform &WorldPose)"
  },
  "api/_u_uxt_fixed_distance_constraint.html": {
    "href": "api/_u_uxt_fixed_distance_constraint.html",
    "title": "Class UUxtFixedDistanceConstraint | UXT Documentation",
    "keywords": "Class UUxtFixedDistanceConstraint Constraint to fix the object distance from another object. Usage: Attach to actor that the constraint should be applied to. If necessary, configure the object to constrain to. This will default to the head if not set. Inheritance System::Object UActorComponent UUxtTransformConstraint UUxtFixedDistanceConstraint Inherited Members UUxtTransformConstraint::HandType UUxtTransformConstraint::InteractionMode UUxtTransformConstraint::TargetComponent UUxtTransformConstraint::WorldPoseOnManipulationStart Namespace : Assembly : .dll Syntax public: class UUxtFixedDistanceConstraint : public xtTransformConstraint Fields | Improve this Doc View Source ConstraintComponent Component to fix distance to. Defaults to the head. Declaration public: FComponentReference ConstraintComponent Field Value Type Description FComponentReference Methods | Improve this Doc View Source ApplyConstraint(FTransform &Transform) Applies constraints to transforms during manipulation Declaration public: virtual void ApplyConstraint(FTransform &Transform) const override Parameters Type Name Description FTransform & Transform Overrides UUxtTransformConstraint::ApplyConstraint(FTransform &Transform) | Improve this Doc View Source GetConstraintType() Enabled manipulation modes. Declaration public: virtual EUxtTransformMode GetConstraintType() const override Returns Type Description EUxtTransformMode Overrides UUxtTransformConstraint::GetConstraintType() | Improve this Doc View Source Initialize(const FTransform &WorldPose) Intended to be called on manipulation started Declaration public: virtual void Initialize(const FTransform &WorldPose) override Parameters Type Name Description const FTransform & WorldPose Overrides UUxtTransformConstraint::Initialize(const FTransform &WorldPose)"
  },
  "api/_u_uxt_bounds_control_config.html": {
    "href": "api/_u_uxt_bounds_control_config.html",
    "title": "Class UUxtBoundsControlConfig | UXT Documentation",
    "keywords": "Class UUxtBoundsControlConfig Data asset that stores the configuration of a bounds control. Inheritance System::Object UDataAsset UUxtBoundsControlConfig Namespace : Assembly : .dll Syntax public: class UUxtBoundsControlConfig Fields | Improve this Doc View Source Affordances Declaration public: TArray<FUxtAffordanceConfig> Affordances Field Value Type Description TArray< FUxtAffordanceConfig > | Improve this Doc View Source bIsSlate Whether this configuration is intended to be used for slate elements Declaration public: bool bIsSlate= false Field Value Type Description bool | Improve this Doc View Source bUniformScaling Whether this configuration transforms the target uniformly or not Declaration public: bool bUniformScaling= true Field Value Type Description bool"
  },
  "api/_u_uxt_bounds_control_component.html": {
    "href": "api/_u_uxt_bounds_control_component.html",
    "title": "Class UUxtBoundsControlComponent | UXT Documentation",
    "keywords": "Class UUxtBoundsControlComponent Manages a set of affordances that can be manipulated for changing the actor transform. Inheritance System::Object UActorComponent UUxtBoundsControlComponent Namespace : Assembly : .dll Syntax public: class UUxtBoundsControlComponent Constructors | Improve this Doc View Source ~UUxtBoundsControlComponent() Declaration public: ~UUxtBoundsControlComponent() | Improve this Doc View Source UUxtBoundsControlComponent() Declaration public: UUxtBoundsControlComponent() | Improve this Doc View Source UUxtBoundsControlComponent(FVTableHelper &Helper) Declaration public: UUxtBoundsControlComponent(FVTableHelper &Helper) Parameters Type Name Description FVTableHelper & Helper Fields | Improve this Doc View Source AffordanceTransitionDuration Duration of animated affordance transitions. Declaration public: float AffordanceTransitionDuration= 0.25f Field Value Type Description float | Improve this Doc View Source AffordanceVisibilityDistance Hand distance at which affordances become visible. Declaration public: float AffordanceVisibilityDistance= 10.f Field Value Type Description float | Improve this Doc View Source CenterAffordanceMesh Mesh used for a center affordance. Declaration public: UStaticMesh * CenterAffordanceMesh Field Value Type Description UStaticMesh * | Improve this Doc View Source CollisionBox Collision box that prevents pointer rays from passing through bounds control's box. Declaration public: UBoxComponent * CollisionBox Field Value Type Description UBoxComponent * | Improve this Doc View Source CollisionProfile The collision profile used by CollisionBox . Declaration public: FName CollisionProfile= TEXT(\"UI\") Field Value Type Description FName | Improve this Doc View Source Config Configuration of the bounds control affordances. Declaration public: UUxtBoundsControlConfig * Config Field Value Type Description UUxtBoundsControlConfig * | Improve this Doc View Source CornerAffordanceMesh Mesh used for a corner affordances. Declaration public: UStaticMesh * CornerAffordanceMesh Field Value Type Description UStaticMesh * | Improve this Doc View Source EdgeAffordanceMesh Mesh used for a edge affordances. Declaration public: UStaticMesh * EdgeAffordanceMesh Field Value Type Description UStaticMesh * | Improve this Doc View Source FaceAffordanceMesh Mesh used for a face affordances. Declaration public: UStaticMesh * FaceAffordanceMesh Field Value Type Description UStaticMesh * | Improve this Doc View Source OnManipulationEnded Event raised when a manipulation is ended. Declaration public: FUxtBoundsControlManipulationEndedDelegate OnManipulationEnded Field Value Type Description FUxtBoundsControlManipulationEndedDelegate | Improve this Doc View Source OnManipulationStarted Event raised when a manipulation is started. Declaration public: FUxtBoundsControlManipulationStartedDelegate OnManipulationStarted Field Value Type Description FUxtBoundsControlManipulationStartedDelegate Methods | Improve this Doc View Source BeginPlay() Declaration protected: virtual void BeginPlay() override | Improve this Doc View Source ComputeBoundsFromComponents() Compute the bounding box based on the components of the bounding box actor. Declaration public: void ComputeBoundsFromComponents() | Improve this Doc View Source CreateAffordances() Create the BoundsControlActor and all affordances described in the config. Declaration protected: void CreateAffordances() | Improve this Doc View Source DestroyAffordances() Destroy the BoundsControlActor and affordance instances. Declaration protected: void DestroyAffordances() | Improve this Doc View Source EndPlay(const EEndPlayReason::Type EndPlayReason) Declaration protected: virtual void EndPlay(const EEndPlayReason::Type EndPlayReason) override Parameters Type Name Description const EEndPlayReason::Type EndPlayReason | Improve this Doc View Source FindGrabPointer(const FUxtAffordanceInstance *AffordanceInstance) Look up the grab pointer data for an affordance. Returns null if the affordance is not currently grabbed. Declaration protected: const FUxtGrabPointerData * FindGrabPointer(const FUxtAffordanceInstance *AffordanceInstance) Parameters Type Name Description const FUxtAffordanceInstance * AffordanceInstance Returns Type Description const FUxtGrabPointerData * | Improve this Doc View Source GetAffordanceKindMesh(EUxtAffordanceKind Kind) Mesh for the given kind of affordance. Declaration public: UStaticMesh * GetAffordanceKindMesh(EUxtAffordanceKind Kind) const Parameters Type Name Description EUxtAffordanceKind Kind Returns Type Description UStaticMesh * | Improve this Doc View Source GetBounds() Declaration public: const FBox & GetBounds() const Returns Type Description const FBox & | Improve this Doc View Source GetBoundsControlActor() Declaration public: AActor * GetBoundsControlActor() const Returns Type Description AActor * | Improve this Doc View Source GetInitBoundsFromActor() Declaration public: bool GetInitBoundsFromActor() const Returns Type Description bool | Improve this Doc View Source GetPrimitiveAffordanceMap() Get the map between the affordance actors and their information. Declaration public: const TMap<UPrimitiveComponent *, FUxtAffordanceInstance> & GetPrimitiveAffordanceMap() Returns Type Description const TMap<UPrimitiveComponent *, FUxtAffordanceInstance > & | Improve this Doc View Source GetRelativeBoxTransform(const FBox &Box, const FBox &RelativeTo, FTransform &OutTransform) Compute the relative translation and scale between two boxes. Returns false if relative scale can not be computed. Declaration protected: static bool GetRelativeBoxTransform(const FBox &Box, const FBox &RelativeTo, FTransform &OutTransform) Parameters Type Name Description const FBox & Box const FBox & RelativeTo FTransform & OutTransform Returns Type Description bool | Improve this Doc View Source IsAffordanceGrabbed(const FUxtAffordanceInstance *Affordance) Returns true if the affordance instance is currently bing grabbed. Declaration protected: bool IsAffordanceGrabbed(const FUxtAffordanceInstance *Affordance) const Parameters Type Name Description const FUxtAffordanceInstance * Affordance Returns Type Description bool | Improve this Doc View Source OnActorTransformUpdate(USceneComponent *UpdatedComponent, EUpdateTransformFlags UpdateTransformFlags, ETeleportType Teleport) Callback when the parent actor is moved. Declaration protected: void OnActorTransformUpdate(USceneComponent *UpdatedComponent, EUpdateTransformFlags UpdateTransformFlags, ETeleportType Teleport) Parameters Type Name Description USceneComponent * UpdatedComponent EUpdateTransformFlags UpdateTransformFlags ETeleportType Teleport | Improve this Doc View Source OnAffordanceBeginGrab(UUxtGrabTargetComponent *Grabbable, FUxtGrabPointerData GrabPointer) Callback when an affordance is being grabbed. Declaration protected: void OnAffordanceBeginGrab(UUxtGrabTargetComponent *Grabbable, FUxtGrabPointerData GrabPointer) Parameters Type Name Description UUxtGrabTargetComponent * Grabbable FUxtGrabPointerData GrabPointer | Improve this Doc View Source OnAffordanceEndGrab(UUxtGrabTargetComponent *Grabbable, FUxtGrabPointerData GrabPointer) Callback when an affordance is being released. Declaration protected: void OnAffordanceEndGrab(UUxtGrabTargetComponent *Grabbable, FUxtGrabPointerData GrabPointer) Parameters Type Name Description UUxtGrabTargetComponent * Grabbable FUxtGrabPointerData GrabPointer | Improve this Doc View Source OnAffordanceEnterFarFocus(UUxtGrabTargetComponent *Grabbable, UUxtFarPointerComponent *Pointer) Callback when an affordance is entering focus. Declaration protected: void OnAffordanceEnterFarFocus(UUxtGrabTargetComponent *Grabbable, UUxtFarPointerComponent *Pointer) Parameters Type Name Description UUxtGrabTargetComponent * Grabbable UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnAffordanceEnterGrabFocus(UUxtGrabTargetComponent *Grabbable, UUxtNearPointerComponent *Pointer) Callback when an affordance is entering focus. Declaration protected: void OnAffordanceEnterGrabFocus(UUxtGrabTargetComponent *Grabbable, UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtGrabTargetComponent * Grabbable UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnAffordanceExitFarFocus(UUxtGrabTargetComponent *Grabbable, UUxtFarPointerComponent *Pointer) Callback when an affordance is exiting focus. Declaration protected: void OnAffordanceExitFarFocus(UUxtGrabTargetComponent *Grabbable, UUxtFarPointerComponent *Pointer) Parameters Type Name Description UUxtGrabTargetComponent * Grabbable UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnAffordanceExitGrabFocus(UUxtGrabTargetComponent *Grabbable, UUxtNearPointerComponent *Pointer) Callback when an affordance is exiting focus. Declaration protected: void OnAffordanceExitGrabFocus(UUxtGrabTargetComponent *Grabbable, UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtGrabTargetComponent * Grabbable UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnAffordanceUpdateGrab(UUxtGrabTargetComponent *Grabbable, FUxtGrabPointerData GrabPointer) Callback when an affordance is being grabbed. Declaration protected: void OnAffordanceUpdateGrab(UUxtGrabTargetComponent *Grabbable, FUxtGrabPointerData GrabPointer) Parameters Type Name Description UUxtGrabTargetComponent * Grabbable FUxtGrabPointerData GrabPointer | Improve this Doc View Source TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) Declaration protected: virtual void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) override Parameters Type Name Description float DeltaTime ELevelTick TickType FActorComponentTickFunction * ThisTickFunction | Improve this Doc View Source TransformTarget(const FUxtAffordanceConfig &Affordance, const FUxtGrabPointerData &GrabPointer) Modify the target based on the current affordance interaction Declaration protected: void TransformTarget(const FUxtAffordanceConfig &Affordance, const FUxtGrabPointerData &GrabPointer) const Parameters Type Name Description const FUxtAffordanceConfig & Affordance const FUxtGrabPointerData & GrabPointer | Improve this Doc View Source UpdateAffordanceAnimation(float DeltaTime) Update animated properties such as affordance highlights. Declaration protected: void UpdateAffordanceAnimation(float DeltaTime) Parameters Type Name Description float DeltaTime | Improve this Doc View Source UpdateAffordanceTransforms() Update the world transforms of affordance actors to match the current bounding box. Declaration protected: void UpdateAffordanceTransforms()"
  },
  "api/_uxt_two_hand_manipulation_rotate_logic.html": {
    "href": "api/_uxt_two_hand_manipulation_rotate_logic.html",
    "title": "Class UxtTwoHandManipulationRotateLogic | UXT Documentation",
    "keywords": "Class UxtTwoHandManipulationRotateLogic Implements common logic for rotating holograms using a handlebar metaphor. Each frame, object_rotation_delta = rotation_delta(current_hands_vector, previous_hands_vector) where hands_vector is the vector between two hand/controller positions. Usage: When a manipulation starts, call Setup. Call Update with currently available grab pointers to get a new rotation for the object. Inheritance System::Object UxtTwoHandManipulationRotateLogic Inherited Members UxtTwoHandManipulationRotateLogic Namespace : Assembly : .dll Syntax public: class UxtTwoHandManipulationRotateLogic Methods | Improve this Doc View Source Setup(GrabPointers PointerData, const FQuat &HostRotation) Sets up rotation logic by storing initial handle bar and rotation value Declaration public: void Setup(GrabPointers PointerData, const FQuat &HostRotation) Parameters Type Name Description GrabPointers PointerData const FQuat & HostRotation | Improve this Doc View Source Update(GrabPointers PointerData) Updates the rotation based on the current grab pointer locations Declaration public: FQuat Update(GrabPointers PointerData) const Parameters Type Name Description GrabPointers PointerData Returns Type Description FQuat"
  },
  "api/_uxt_manipulation_move_logic.html": {
    "href": "api/_uxt_manipulation_move_logic.html",
    "title": "Class UxtManipulationMoveLogic | UXT Documentation",
    "keywords": "Class UxtManipulationMoveLogic Implements a move logic that will move an object based on the initial position of the grab point relative to the pointer and relative to the object, and subsequent changes to the pointer and the object's rotation Usage: When a manipulation starts, call Setup. Call Update for querying a new position for the object. Inheritance System::Object UxtManipulationMoveLogic Namespace : Assembly : .dll Syntax public: class UxtManipulationMoveLogic Methods | Improve this Doc View Source Setup(const FTransform &PointerCentroidPose, const FVector &GrabCentroid, const FTransform &ObjectTransform, const FVector &HeadPosition) Setup move logic by caching initial input values Declaration public: void Setup(const FTransform &PointerCentroidPose, const FVector &GrabCentroid, const FTransform &ObjectTransform, const FVector &HeadPosition) Parameters Type Name Description const FTransform & PointerCentroidPose const FVector & GrabCentroid const FTransform & ObjectTransform const FVector & HeadPosition | Improve this Doc View Source Update(const FTransform &PointerCentroidPose, const FQuat &ObjectRotation, const FVector &ObjectScale, bool UsePointerRotation, const FVector &HeadPosition) Provide updated input and head/camera position to retrieve new object position Declaration public: FVector Update(const FTransform &PointerCentroidPose, const FQuat &ObjectRotation, const FVector &ObjectScale, bool UsePointerRotation, const FVector &HeadPosition) const Parameters Type Name Description const FTransform & PointerCentroidPose const FQuat & ObjectRotation const FVector & ObjectScale bool UsePointerRotation const FVector & HeadPosition Returns Type Description FVector"
  }
}