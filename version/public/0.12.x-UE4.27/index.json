{
  "api/_u_x_tools_input.html": {
    "href": "api/_u_x_tools_input.html",
    "title": "MRTK Unreal API Reference UXToolsInput | UXT Documentation",
    "keywords": "UXToolsInput class UXToolsInput; Inheritance Inherits from ModuleRules Public Functions Name UXToolsInput (ReadOnlyTargetRules Target) Public Functions Documentation function UXToolsInput inline UXToolsInput( ReadOnlyTargetRules Target ) Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_uxt_poke_target.html": {
    "href": "api/_u_uxt_poke_target.html",
    "title": "MRTK Unreal API Reference UUxtPokeTarget | UXT Documentation",
    "keywords": "UUxtPokeTarget class UUxtPokeTarget; Inheritance Inherits from UInterface Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_uxt_internal_function_library.html": {
    "href": "api/_u_uxt_internal_function_library.html",
    "title": "MRTK Unreal API Reference UUxtInternalFunctionLibrary | UXT Documentation",
    "keywords": "UUxtInternalFunctionLibrary Library of utility internal functions for UX Tools. class UUxtInternalFunctionLibrary; Header #include <Utils/UxtInternalFunctionLibrary.h> Inheritance Inherits from UBlueprintFunctionLibrary Public Functions Name bool HexCodePointToFString (const FString & Input, FString & Output) bool FStringToHexCodePoint (const FString & Input, FString & Output) bool IsFontOffline (const UFont * Font) bool GetFontCharacterData (const UFont * Font, TArray< FUxtFontCharacter > & FontCharacters) FVector Slerp (const FVector & Vector1, const FVector & Vector2, const float Slerp) template <typename T > T * GetObjectFromPtr (const TSoftObjectPtr< T > & ObjectPtr) bool IsPrimitiveEqualOrAttachedTo (const USceneComponent * Parent, const USceneComponent * Other) Public Functions Documentation function HexCodePointToFString static bool HexCodePointToFString( const FString & Input, FString & Output ) Converts a Unicode code point as hex into the corresponding UTF-16 FString representation. Returns true when the conversion is successful. function FStringToHexCodePoint static bool FStringToHexCodePoint( const FString & Input, FString & Output ) Converts a UTF-16 FString into the corresponding unicode code point as hex representation. Returns true when the conversion is successful. function IsFontOffline static bool IsFontOffline( const UFont * Font ) Returns true if a UFont is using offline caching. function GetFontCharacterData static bool GetFontCharacterData( const UFont * Font, TArray< FUxtFontCharacter > & FontCharacters ) Builds an array of FUxtFontCharacters for each character present in a UFont. function Slerp static FVector Slerp( const FVector & Vector1, const FVector & Vector2, const float Slerp ) Spherical linear interpolate between two vectors function GetObjectFromPtr template <typename T > static inline T * GetObjectFromPtr( const TSoftObjectPtr< T > & ObjectPtr ) Get the object from a TSoftObjectPtr, loading it synchronously if it is not loaded. function IsPrimitiveEqualOrAttachedTo static inline bool IsPrimitiveEqualOrAttachedTo( const USceneComponent * Parent, const USceneComponent * Other ) Returns true if Other is attached to Parent or if they are the same component. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_uxt_two_hand_manipulation_scale_logic.html": {
    "href": "api/_uxt_two_hand_manipulation_scale_logic.html",
    "title": "MRTK Unreal API Reference UxtTwoHandManipulationScaleLogic | UXT Documentation",
    "keywords": "UxtTwoHandManipulationScaleLogic Implements a scale logic that will scale an object based on the ratio of the distance between hands: object_scale = start_object_scale * curr_hand_dist / start_hand_dist Usage: When a manipulation starts, call Setup. Call Update with currently available grab pointers to get a new scale for the object. class UxtTwoHandManipulationScaleLogic; Header #include <Interactions/Manipulation/UxtTwoHandScaleLogic.h> Public Types Name typedef const TArray< FUxtGrabPointerData > & GrabPointers Public Functions Name void Setup (GrabPointers PointerData, const FVector & ObjectScale) FVector Update (GrabPointers PointerData) const Public Types Documentation typedef GrabPointers typedef const TArray<FUxtGrabPointerData>& UxtTwoHandManipulationScaleLogic::GrabPointers; Public Functions Documentation function Setup void Setup( GrabPointers PointerData, const FVector & ObjectScale ) Sets up scale logic by storing initial object scale and hand distance function Update FVector Update( GrabPointers PointerData ) const Updates the scale based on the current grab pointer locations. Returns the new object scale. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_uxt_two_hand_manipulation_rotate_logic.html": {
    "href": "api/_uxt_two_hand_manipulation_rotate_logic.html",
    "title": "MRTK Unreal API Reference UxtTwoHandManipulationRotateLogic | UXT Documentation",
    "keywords": "UxtTwoHandManipulationRotateLogic Implements common logic for rotating holograms using a handlebar metaphor. Each frame, object_rotation_delta = rotation_delta(current_hands_vector, previous_hands_vector) where hands_vector is the vector between two hand/controller positions. Usage: When a manipulation starts, call Setup. Call Update with currently available grab pointers to get a new rotation for the object. class UxtTwoHandManipulationRotateLogic; Header #include <Interactions/Manipulation/UxtTwoHandRotateLogic.h> Public Types Name typedef const TArray< FUxtGrabPointerData > & GrabPointers Public Functions Name void Setup (GrabPointers PointerData, const FQuat & HostRotation) FQuat Update (GrabPointers PointerData) const Public Types Documentation typedef GrabPointers typedef const TArray<FUxtGrabPointerData>& UxtTwoHandManipulationRotateLogic::GrabPointers; Public Functions Documentation function Setup void Setup( GrabPointers PointerData, const FQuat & HostRotation ) Sets up rotation logic by storing initial handle bar and rotation value function Update FQuat Update( GrabPointers PointerData ) const Updates the rotation based on the current grab pointer locations Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_f_x_r_simulation_keys.html": {
    "href": "api/_f_x_r_simulation_keys.html",
    "title": "MRTK Unreal API Reference FXRSimulationKeys | UXT Documentation",
    "keywords": "FXRSimulationKeys struct FXRSimulationKeys; Public Attributes Name const FKey LeftSelect const FKey RightSelect const FKey RightGrip const FKey LeftGrip Public Attributes Documentation variable LeftSelect const FKey FXRSimulationKeys::LeftSelect static const FKey LeftSelect = FKey(\"XRSimulation_Left_Select\"); variable RightSelect const FKey FXRSimulationKeys::RightSelect static const FKey RightSelect = FKey(\"XRSimulation_Right_Select\"); variable RightGrip const FKey FXRSimulationKeys::RightGrip static const FKey RightGrip = FKey(\"XRSimulation_Right_Grip\"); variable LeftGrip const FKey FXRSimulationKeys::LeftGrip static const FKey LeftGrip = FKey(\"XRSimulation_Left_Grip\"); Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_f_u_x_tools_module.html": {
    "href": "api/_f_u_x_tools_module.html",
    "title": "MRTK Unreal API Reference FUXToolsModule | UXT Documentation",
    "keywords": "FUXToolsModule class FUXToolsModule; Inheritance Inherits from IModuleInterface Public Functions Name virtual void StartupModule () override virtual void ShutdownModule () override Public Functions Documentation function StartupModule virtual void StartupModule() override IModuleInterface implementation function ShutdownModule virtual void ShutdownModule() override Updated on 23 August 2021 at 12:07:13 Coordinated Universal Time"
  },
  "api/_f_dummy_hand_tracker.html": {
    "href": "api/_f_dummy_hand_tracker.html",
    "title": "MRTK Unreal API Reference FDummyHandTracker | UXT Documentation",
    "keywords": "FDummyHandTracker class FDummyHandTracker; Inheritance Inherits from IUxtHandTracker , IModularFeature Public Functions Name virtual ETrackingStatus GetTrackingStatus (EControllerHand Hand) const override virtual bool IsHandController (EControllerHand Hand) const override virtual bool GetJointState (EControllerHand Hand, EHandKeypoint Joint, FQuat & OutOrientation, FVector & OutPosition, float & OutRadius) const override virtual bool GetPointerPose (EControllerHand Hand, FQuat & OutOrientation, FVector & OutPosition) const override virtual bool GetGripPose (EControllerHand Hand, FQuat & OutOrientation, FVector & OutPosition) const override virtual bool GetIsGrabbing (EControllerHand Hand, bool & OutIsGrabbing) const override virtual bool GetIsSelectPressed (EControllerHand Hand, bool & OutIsSelectPressed) const override Additional inherited members Public Functions inherited from IUxtHandTracker Name FName GetModularFeatureName () IUxtHandTracker & Get () virtual ~IUxtHandTracker () Public Functions Documentation function GetTrackingStatus inline virtual ETrackingStatus GetTrackingStatus( EControllerHand Hand ) const override Reimplements : IUxtHandTracker::GetTrackingStatus Get tracking status of the hand or motion controller. function IsHandController inline virtual bool IsHandController( EControllerHand Hand ) const override Reimplements : IUxtHandTracker::IsHandController True if the controller is a hand. function GetJointState inline virtual bool GetJointState( EControllerHand Hand, EHandKeypoint Joint, FQuat & OutOrientation, FVector & OutPosition, float & OutRadius ) const override Reimplements : IUxtHandTracker::GetJointState Obtain the state of the given joint. Returns false if the hand is not tracked this frame, in which case the values of the output parameters are unchanged. function GetPointerPose inline virtual bool GetPointerPose( EControllerHand Hand, FQuat & OutOrientation, FVector & OutPosition ) const override Reimplements : IUxtHandTracker::GetPointerPose Obtain the pointer pose. Returns false if the hand is not tracked this frame, in which case the value of the output parameter is unchanged. function GetGripPose inline virtual bool GetGripPose( EControllerHand Hand, FQuat & OutOrientation, FVector & OutPosition ) const override Reimplements : IUxtHandTracker::GetGripPose Grip pose following the controller. Returns false if the hand is not tracked this frame, in which case the value of the output parameter is unchanged. function GetIsGrabbing inline virtual bool GetIsGrabbing( EControllerHand Hand, bool & OutIsGrabbing ) const override Reimplements : IUxtHandTracker::GetIsGrabbing Obtain current grabbing state. Returns false if the hand is not tracked this frame, in which case the value of the output parameter is unchanged. function GetIsSelectPressed inline virtual bool GetIsSelectPressed( EControllerHand Hand, bool & OutIsSelectPressed ) const override Reimplements : IUxtHandTracker::GetIsSelectPressed Obtain current selection state. Returns false if the hand is not tracked this frame, in which case the value of the output parameter is unchanged. Updated on 23 August 2021 at 12:07:13 Coordinated Universal Time"
  },
  "Docs/CONTRIBUTING.html": {
    "href": "Docs/CONTRIBUTING.html",
    "title": "Contributing | UXT Documentation",
    "keywords": "Contributing to UX Tools for Unreal Engine Due to the early stage of the project and the likelihood of internal refactors, we are not in a position to accept external contributions via pull requests at this time. However, contributions and feedback in the shape of bug reports, suggestions and feature requests are welcome and encouraged. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com . This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments."
  },
  "Docs/BoundsControl.html": {
    "href": "Docs/BoundsControl.html",
    "title": "Bounds Control | UXT Documentation",
    "keywords": "BoundsControl Bounds Control is a component that allows the user to change the position, rotation, and size of an actor, using affordances . Affordances are grabbable areas on corners (scale), edges (rotate), and faces (translate) of the actor's bounding box. To enable bounds control on an actor, add an UUxtBoundsControlComponent to it. The component has a default configuration that can be tweaked to change the behavior and appearance as needed. Bounds Control Config UxtBoundsControlConfig data assets are used to configure: Affordances array. Each has: Placement . Enumerator with the position of the affordance around the actor. For example, CornerFrontTopLeft , EdgeBottomRight or FaceBack . See EUxtAffordancePlacement for a complete list. Rotation of the instanced mesh. IsSlate . Whether it should be considered a 2D element or not. If so, it won't scale along the X axis. UniformScaling . Whether uniform or non-uniform scaling is desired. There are some presets in BoundsControl/Presets : BoundsControlDefault : All corner and edge affordances with uniform scaling. BoundsControlSlate2D : Only front corners and edges, with non-uniform scaling. Integration with manipulator constraints The UUxtBoundsControlComponent works out of the box with the same constraint components that Manipulators use. For example, simply adding and configuring a UUxtRotationAxisConstraint component will prevent rotation around the appropriate axes when interacting via affordances. Affordance meshes At runtime a separate actor is created for displaying affordances. Each affordance is a StaticMesh component on the BoundsControlActor. The mesh used for each kind of affordance (Corner, Edge, Face, Center) can be changed on the bounds control component ( Corner Affordance Mesh etc.). When creating custom affordance meshes you can fine tune the orientation of each affordance by duplicating one of the preset layouts and modifying the Rotation properties. It is recommended to use simple box collision primitives to make affordances grabbable."
  },
  "api/_a_uxt_base_pressable_button_actor.html": {
    "href": "api/_a_uxt_base_pressable_button_actor.html",
    "title": "MRTK Unreal API Reference AUxtBasePressableButtonActor | UXT Documentation",
    "keywords": "AUxtBasePressableButtonActor Abstract base class for all pressable button actors. Ensures a UUxtPressableButtonComponent as the root component. class AUxtBasePressableButtonActor; Header #include <Controls/UxtBasePressableButtonActor.h> Inheritance Inherits from AActor, IUxtCollectionObject Inherited by AUxtPressableButtonActor Public Functions Name AUxtBasePressableButtonActor () TScriptInterface< IUxtPokeTarget > GetPokeTarget () virtual TScriptInterface< IUxtPokeTarget > GetPokeTarget_Implementation () override TScriptInterface< IUxtFarTarget > GetFarTarget () virtual TScriptInterface< IUxtFarTarget > GetFarTarget_Implementation () override UUxtPressableButtonComponent * GetButtonComponent () const Protected Attributes Name UUxtPressableButtonComponent * ButtonComponent Public Functions Documentation function AUxtBasePressableButtonActor AUxtBasePressableButtonActor() function GetPokeTarget TScriptInterface< IUxtPokeTarget > GetPokeTarget() Returns UUxtPressableButtonComponent as the poke target. function GetPokeTarget_Implementation virtual TScriptInterface< IUxtPokeTarget > GetPokeTarget_Implementation() override function GetFarTarget TScriptInterface< IUxtFarTarget > GetFarTarget() Returns UUxtPressableButtonComponent as the far target. function GetFarTarget_Implementation virtual TScriptInterface< IUxtFarTarget > GetFarTarget_Implementation() override function GetButtonComponent inline UUxtPressableButtonComponent * GetButtonComponent() const Returns UUxtPressableButtonComponent subobject. Protected Attributes Documentation variable ButtonComponent UUxtPressableButtonComponent * ButtonComponent = nullptr; Handle to the root button component. Updated on 23 August 2021 at 12:07:13 Coordinated Universal Time"
  },
  "Docs/TouchableVolume.html": {
    "href": "Docs/TouchableVolume.html",
    "title": "Touchable Volume | UXT Documentation",
    "keywords": "Touchable Volume The touchable volume component allows the user to interact with an object by touching it. Usage Create a UxtTouchableVolumeComponent on an Actor. By default, the volume will trigger events when the user interacts with any primitive on the actor. The can be configured by populating the Touchable Primitives set with the primitives that should trigger events, which will limit interaction to only the primitives contained in the set. Events The touchable volume generates several events that can be used to drive interactions: OnBeginFocus : Event raised when a pointer starts focusing the touchable volume. OnUpdateFocus : Event raised when a focusing pointer updates. OnEndFocus : Event raised when a pointer ends focusing the touchable volume. OnBeginPoke : Event raised when a pointer starts poking the touchable volume. OnUpdatePoke : Event raised while a pointer is poking the touchable volume. OnEndPoke : Event raised when a pointer ends poking the touchable volume. OnVolumeEnabled : Event raised when the volume is enabled. OnVolumeDisabled : Event raised when the volume is disabled."
  },
  "Docs/Tooltip.html": {
    "href": "Docs/Tooltip.html",
    "title": "Tooltip | UXT Documentation",
    "keywords": "Tooltip Tooltips are used to convey a hint or extra information upon closer inspection of an object. They can be used to annotate objects in the physical environment. How to use a tooltip There is an AUxtTooltipActor can be dragged and dropped in the scene to instantiate a tooltip. Once instantiated, the tooltip can point to an actor/component by modifying the Tooltip Target property or calling the SetTarget function. It is also possible to change the tooltip content for any blueprint widget by setting the Widget Class property. The spline tangents can be modified if you want to change the curve. Public Properties Tooltip Target Property to point at an actor/component. Clearing the component property to none should result in binding the tooltip to the center of the actor. The component name defaults to DefaultSceneRoot . Widget Class This property allows the user to set any blueprint widget class so that the tooltip renders it. When cleared, the tooltip will default to some default text. Anchor The anchor is a scene node that is used to offset the end point of the spline going to the target. Start Point is at tooltip location and End Point is at the target's location. Margin The Margin property that can be used to add space between the text and the border of the back plate. Dynamic Tooltips Having too many tooltips can get costly. This is a component for a tooltip that can be spawned dynamically based on preset events. How to use a dynamic tooltip The dynamic tooltip is used by creating a TooltipSpawnerComponent and adding it to the actor that you want the tooltip to point at. The following properties will modify the tooltips behavior. Public Properties Appear Type Parameter to script what will spawn the tooltip. Vanish Type Parameter to script what will make the tooltip vanish. Remain Type Parameter to script whether the tooltip remains indefinitely or if it uses the Lifetime parameter to timeout. Appear Delay Parameter to script a delay before spawning the tooltip. Vanish Delay Parameter to script a delay before the tooltip vanishes. Lifetime Parameter to script how long the tooltip will be spawned for. Widget Class Parameter to script what widget class to use on this tooltip. Pivot An offset to specify where the tooltip will be spawned. Widget Scale Scales the widget. OnShowTooltip Delegate to drive OnShow events. OnHideTooltip Delegate to drive OnHide events."
  },
  "Docs/Text.html": {
    "href": "Docs/Text.html",
    "title": "Text | UXT Documentation",
    "keywords": "Text UX Tools contains assets, actors, and components which are optimized to render text correctly and efficiently on Mixed Reality devices. Text rendering within Mixed Reality can be challenging as opposed to traditional 2D text because text in Mixed Reality can be viewed from any angle or distance. Make sure text is large, high contrast, and accessible. More information about designing text for Mixed Reality can be found on this page . Text Actors & Components To provide automatic text configuration UX Tools contains an actor named UxtTextRenderActor and component named UxtTextRenderComponent . The UxtTextRenderActor and UxtTextRenderComponent automatically construct text with appropriate font, font material, and sizing defaults. Note Automatic text formatting is not supported by the UxtTextRender actor and component. To manually add a single line break in text use the <br> tag. If your application requires advanced text formatting then UMG Text has support for this. Note, UMG can cause decreased performance on HoloLens, so it's best to profile after adding UMG to your app. The UxtTextRenderComponent derives from the TextRenderComponent and all properties can be accessed and altered via the top level UxtTextRenderActor component wrapper actor details panel: It is recommended when adding new text to your level, or blueprint, that you begin with the UxtTextRenderActor or UxtTextRenderComponent and make adjustments where required. Note If the text needs to be resized it is best to change the World Size property to avoid non-uniform scaling of text. Fonts A library of recommended fonts are included with UX Tools. The primary font used for text is Font_SegoeUI_Semibold_42 and Font_SegoeUI_Bold_42 . Icons are normally rendered with a font (rather than a texture) and use the Font_SegoeHoloMDL_Regular_42 and Font_SegoeMDL2_Regular_42 fonts. The SegoeHoloMDL and SegoeMDL2 fonts provide symbol glyphs commonly used in Windows Mixed Reality applications. To easily browse the glyphs available in a font try utilizing the a UxtIconBrush struct and icon brush editor . Most fonts within UX Tools are offline fonts, which are pre-computed font atlases. Offline fonts are less flexible than Unreal's runtime fonts but provided better performance results on HoloLens. Note UX Tools contains the runtime font Font_SegoeUI_Semibold_Dynamic for use with UMG because offline fonts cannot be used with UMG. Normally fonts include Unreal's default character set but some fonts, such as SegoeHoloMDL and SegoeMDL2 , only import a subset of the default character set. To import additional characters you can perform the following actions: Open the desired font. In this example Font_SegoeMDL2_Regular_42 . Navigate to the \"Import Options\" in the details panel. Add any new characters needed to the \"Chars\" array property. Select the font in the the content browser. Right click on the font and select \"Reimport.\" Importing a New Font If you would like to use a custom font it is recommended that the font be imported following the below steps: In a content browser right click and select User Interface > Font . Name the font: Font_FontName_FontStyle_FontSize Open the new font asset. Change the \"Font Cache Type\" to \"Offline\" and select your font with the modal window that will appear. Change the \"Texture Page Width\" and \"Texture Page Max Height\" to 1024 and 1024 (or a size that will fit your font within as little pages as reasonable possible). Note Having multiple font pages can dramatically increases your application's draw call counts and hence rendering performance. 6) Check \"Use Distance Field Alpha\" to true. 7) Select your new font in the the content browser. 8) Right click on the font and select \"Reimport.\" Depending on how many characters are in your font the reimport may take a few minutes. Note If the font import process takes an extremely long time you may want to constrain your font's character set using the \"Character Set,\" \"Chars,\" \"Unicode Range,\" or \"Chars File Path\" properties under the font's \"Import Options.\" Once your font has reimported the font atlas should look similar to the below image. The characters should appear a little \"blurred\" because the font is stored as encoded signed distance field. You should now be able to use the font with the M_DefaultFont material. Materials All text in UX Tools is rendered using the M_DefaultFont material. The M_DefaultFont material takes a font texture stored as a signed distance field and displays the font as a unlit masked surface. Masked surfaces display either fully opaque or fully translucent pixels. Masked surfaces are great for text rendering because, unlike some other blend modes, it does not require sorting. But, masked surfaces can result in aliasing. If your application displays aliasing on text verify aliasing is occurring on your target stereo headset(s) (and not only within the play-in-editor viewport). If aliasing still occurs on your target headset(s) try increasing the size of your text. If increasing text size is not an option for reducing aliasing you can utilize full screen antialiasing techniques (such as MSAA or FXAA) on tethered Mixed Reality headsets. Full screen antialiasing is not recommend on HoloLens due to performance constraints. Local antialiasing can be an efficient way to reduce aliasing on text as well. To achieve local antialiasing duplicate the M_DefaultFont material and set the Material \"Blend Mode\" to \"Translucent\". Translucent materials can display pixel translucency values between opaque and transparent to provide a translucent gradient. Note, Translucent materials can provide reduced aliasing but may incur additional render cost due to fill rate concerns or renderer sorting requirements. See also Utilities Graphics"
  },
  "Docs/Installation.html": {
    "href": "Docs/Installation.html",
    "title": "Installation Guide | UXT Documentation",
    "keywords": "Installation Guide Prerequisites Before getting started with UX Tools, make sure that you have installed the required tools . Getting the prebuilt plugin If you just want to add UXT to your game project, the quickest way is through the packaged plugin provided in the release page: Download the packaged plugin zip from the latest release page (e.g. UXTools.0.12.0-UE4.27.zip ). Unzip the file directly into your project's Plugins folder. The Plugins folder should be located at the root of your project, where the .uproject file is. Create it if it doesn't exist. Make sure your game project is a code one, as opposed to blueprint-only, if you are planning to package it for HoloLens. Otherwise UE will fail to package it because it can't build the plugin sources. Open your project and enable the UX Tools plugin in the plugins menu. You now have access to all of the plugin features. The first thing you want to do is probably add a hand interaction actor per hand to your map or pawn so you can use your hands to drive the controls and behaviors provided in UXT. Next steps HoloLens 2 tutorial series Unreal development journey"
  },
  "Docs/InputSimulation.html": {
    "href": "Docs/InputSimulation.html",
    "title": "Input Simulation | UXT Documentation",
    "keywords": "Input Simulation Caution If you're new to MRTK or Mixed Reality development in Unreal, we recommend starting at the beginning of our Unreal development journey , which was specifically created to walk you through installation, core concepts, and usage. Input simulation is using mouse and keyboard input in the editor to simulate a Head-Mounted Display (HMD) as well as hand tracking and other features. This allows testing Mixed-Reality features, such as buttons and interactions, without a physical device. Input simulation is not intended as a long term substitute for actual hardware, but as a development tool to improve iteration times and allow testing in case of limited hardware availability. Input simulation is only enabled in the Unreal editor. Activation Input simulation will become active when playing in the Unreal editor and no head-mounted display (HMD) is connected. If a HMD is connected the input simulation is disabled and camera placement is controlled by the device. Controls Default controls for moving the camera are based on the DefaultPawn: W/S keys for moving forward/backward A/D keys for moving sideways Q/E keys for moving down/up Mouse movement controls head rotation In addition to default pawn movement there are virtual hands that can be controlled for simulating hand tracking: Hold Left Shift/Alt for controlling the left/right hand respectively. This disables head rotation with the mouse and moves the hand instead. Both hands can be controlled together by holding both control keys. T/Y keys for toggling hand visibility. UX Tools project settings contain an option to \"Start with Hands Enabled\". Hands can still be enabled with the T/Y keys even if they are not initially visible. Press the Left mouse button to perform a \"Pinch\" gesture. This also activates the \"grasp\" state of the hand controller, allowing object manipulation. Press the Middle mouse button to perform a \"Poke\" gesture. This can be used for poking buttons. Note that buttons can also be pressed by simply moving the hand towards the button, without performing any gestures. Holding the Right mouse button enables rotation of the controlled hands: X axis changes yaw angle. Y axis changes pitch angle. Scroll wheel changes roll angle. To reset the hand rotation press the visibility keys (T/Y) twice. This will reset the hand location and rotation to defaults. While holding Left Shift/Alt, press the Home key to perform a menu gesture, with a flat palm facing up. This is a quick way to open a hand menu without rotating the hand. Pressing the Home key again or a mouse button changes the pose back to default. Hand Animation Hand input is simulated with skeletal meshes that are animated according to user input. The main input simulation actor adds two instances of the skeletal hand mesh for the left and right hand respectively. The mesh asset is expected to model the right hand, while the left hand mesh is mirrored on the Y axis. An animation blueprint is used to toggle between different possible hand poses, such as a default relaxed hand, poking with the index finger, or pinching between thumb and index finger. Changing the current pose is bound to user input, usually the left and middle mouse buttons. The animation blueprint handles transition and blending between poses. After the mesh animation, the input simulation actor reads the position and rotation of bones matching the relevant hand joints by name (see EWMRHandKeypoint enum). This data is then passed to the input simulation subsystem to emulate device data when requested. Updating Hand Animation Assets The hand animation is best created from an FBX file. The file should contain: A mesh model for the right hand. A skeleton that animates the mesh. Bones in the skeleton that match the EWMRHandKeypoint enum by name: Palm, Wrist, ThumbMetacarpal, ThumbProximal, ThumbDistal, ThumbTip, IndexMetacarpal, etc.. Note that these bones do not necessarily have to deform the mesh, they only define the simulated joint positions. However, the joint bones should be aligned with the visible mesh to avoid confusion. Animation poses for the relevant hand gestures: Flat, Relaxed, Poke, Pinch, Grab, PalmUp, etc. The FBX file is imported, generating a mesh, skeleton, material(s), and animation assets. Open the hand animation asset that contains the desired hand poses. With Create Asset > Create PoseAsset > Current Animation create a pose asset that can blend between the various hand poses. Open the new pose asset and rename the relevant poses with meaningful names, e.g. \"Flat\", \"Relaxed\", \"Pinch\", \"Poke\". Open the InputSimulationHands_AnimInstance asset. This is the animation blueprint that drives the skeletal animation. In the AnimGraph find the PoseAsset blend node and in the Details panel change the linked pose asset to the one created above."
  },
  "Docs/HandMenu.html": {
    "href": "Docs/HandMenu.html",
    "title": "Hand Menu | UXT Documentation",
    "keywords": "Hand Menu Hand menus allow users to quickly bring up hand-attached UI for frequently used functions. To prevent false activation while interacting with other objects, hand menu provides options such as 'Require Flat Hand'. It is recommended to use these options to prevent unwanted activation. There are some examples of various hand menus in \\UXToolsGame\\Plugins\\UXToolsExamples\\Content\\HandMenu\\Blueprints . Creating a hand menu In this example we are going to create a basic three button hand menu, similar to BP_SmallHandMenu in the hand menu example scene. The UxtUIElementComponent and the UxtPalmUpConstraintComponent handle the majority of the work for a simple hand menu. Create a new blueprint actor, in this example we will call it BP_ExampleHandMenu . Add a UxtUIElementComponent and set it as the root component for the actor. Add a UxtPalmUpConstraintComponent and set Require Flat Hand and Require Gaze to true to prevent false activations. Now that we have our foundation, we will add some buttons to the menu. Add three ChildActorComponent s to the blueprint, and set their child actor class to UxtPressableButtonActor . Move one button above and another below the center button. This will be a Z value of 3.2 and -3.2. Configure the buttons using the button options in the child actor template. Next we want to give the buttons a seamless backplate. Add a UxtBackPlateComponent and set its material to MI_HoloLens2BackPlate . Set the back plate's scale to 9.6 on the Z axis to make it three buttons tall. Un-check Is Plated on the button actors to remove their default backplate. Finally we want to show and hide the menu using the palm up constraint. In the event graph, add the On Constraint Activated and On Constraint Deactivated events from the UxtPalmUpConstraintComponent In On Constraint Activated , call Set UI Visibility on the UxtUIElementComponent with a value of Show . In On Constraint Deactivated , call Set UI Visibility on the UxtUIElementComponent with a value of Hide . You can configure how far the menu will sit from the hand with the Goal Margin property on the UxtPalmUpConstraintComponent , for this example it is set to 3.6. Set the UI Visibility property on the UxtUIElementComponent to Hide to hide the menu by default. To test out the menu in editor, press the Home key while moving a hand to put it in the flat palm pose and move the hand towards the center of the screen to trigger the gaze requirement. More information UxtUIElementComponent UxtPalmUpConstraintComponent UxtPressableButtonComponent"
  },
  "Docs/HandInteraction.html": {
    "href": "Docs/HandInteraction.html",
    "title": "Hand Interaction | UXT Documentation",
    "keywords": "Hand interaction Hand interaction with UX elements is performed via the hand interaction actor . This actor takes care of creating and driving the pointers and visuals for near and far interactions. Near interactions are performed by either grabbing elements pinching them between index and thumb or poking at them with the finger tip. While in near interaction mode a finger cursor is displayed on the finger tip to provide feedback about the closest poke target. Far interacions are performed pointing via a ray attached to the hand with selection triggered by pressing index and thumb tips together. A far beam is displayed representing the ray shooting out of the hand. At the end of the beam a far cursor gives feedback about the current far target. Poke and grab targets are defined by adding a component implementing the grab target interface and poke target interface . All visible objects with collision will be hit by the far ray by default but only components implementing the far target interface will receive far interaction events. Provided UX elements like the pressable button implement these interfaces to use interactions to drive their state. Hand interaction actor Add a MRTK Unreal API Reference AUxtHandInteractionActor to the world per hand in order to be able to interact with UX elements. There is no other additional setup required, just remember to set the actors to different hands via their Hand property as by default they use the left hand. See MRPawn in UXToolsGame for an example of hand interaction setup. The actor will automatically create the required components for near and far pointers and their visualization. Properties controlling the setup of these are exposed in the actor directly. A few ones deserving special attention are explained in the following sections. Near activation distance Each hand will transition automatically from far to near interaction mode when close enough to a near interaction target. The near activation distance defines how close the hand must be to the target for this to happen. Trace channel The hand actor and its pointers perform a series of world queries to determine the current interaction target. The trace channel property is used to filter the results of those queries. Default visuals Default visuals are created for near and far cursor and far beam in the form of the following components: Near cursor: MRTK Unreal API Reference UUxtFingerCursorComponent Far cursor: MRTK Unreal API Reference UUxtFarCursorComponent Far beam: MRTK Unreal API Reference UUxtFarBeamComponent In order to allow for custom visuals, their creation can be individually disabled via properties in the advanced section of the Hand Interaction category. See also Mixed Reality Instinctual Interactions : design principles behind the interaction model. MRTK Unreal API Reference IUxtGrabTarget MRTK Unreal API Reference IUxtPokeTarget MRTK Unreal API Reference IUxtFarTarget"
  },
  "api/_u_uxt_collection_object.html": {
    "href": "api/_u_uxt_collection_object.html",
    "title": "MRTK Unreal API Reference UUxtCollectionObject | UXT Documentation",
    "keywords": "UUxtCollectionObject class UUxtCollectionObject; Inheritance Inherits from UInterface Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_uxt_bounds_control_config.html": {
    "href": "api/_u_uxt_bounds_control_config.html",
    "title": "MRTK Unreal API Reference UUxtBoundsControlConfig | UXT Documentation",
    "keywords": "UUxtBoundsControlConfig Data asset that stores the configuration of a bounds control. class UUxtBoundsControlConfig; Header #include <Controls/UxtBoundsControlConfig.h> Inheritance Inherits from UDataAsset Public Attributes Name TArray< FUxtAffordanceConfig > Affordances bool bIsSlate bool bUniformScaling Public Attributes Documentation variable Affordances TArray< FUxtAffordanceConfig > Affordances; variable bIsSlate bool bIsSlate = false; Whether this configuration is intended to be used for slate elements variable bUniformScaling bool bUniformScaling = true; Whether this configuration transforms the target uniformly or not Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_i_uxt_poke_target.html": {
    "href": "api/_i_uxt_poke_target.html",
    "title": "MRTK Unreal API Reference IUxtPokeTarget | UXT Documentation",
    "keywords": "IUxtPokeTarget Interface to implement to enable poke interaction for given primitives. class IUxtPokeTarget; Header #include <UxtPokeTarget.h> Inheritance Inherited by UUxtPressableButtonComponent , UUxtTouchableVolumeComponent , UUxtWidgetComponent Public Functions Name bool IsPokeFocusable (const UPrimitiveComponent * Primitive) const EUxtPokeBehaviour GetPokeBehaviour () const bool GetClosestPoint (const UPrimitiveComponent * Primitive, const FVector & Point, FVector & OutClosestPoint, FVector & OutNormal) const Public Functions Documentation function IsPokeFocusable bool IsPokeFocusable( const UPrimitiveComponent * Primitive ) const Returns true if the given primitive should be considerered a valid focus target. function GetPokeBehaviour EUxtPokeBehaviour GetPokeBehaviour() const Returns which poke behaviour this target supports. function GetClosestPoint bool GetClosestPoint( const UPrimitiveComponent * Primitive, const FVector & Point, FVector & OutClosestPoint, FVector & OutNormal ) const Returns the closest point to Point on the given Primitive. Also provides the surface normal. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_i_uxt_poke_handler.html": {
    "href": "api/_i_uxt_poke_handler.html",
    "title": "MRTK Unreal API Reference IUxtPokeHandler | UXT Documentation",
    "keywords": "IUxtPokeHandler Interface for components that can be poked. class IUxtPokeHandler; Header #include <UxtPokeHandler.h> Inheritance Inherited by UUxtPressableButtonComponent , UUxtTouchableVolumeComponent , UUxtWidgetComponent Public Functions Name bool CanHandlePoke (UPrimitiveComponent * Primitive) const void OnEnterPokeFocus ( UUxtNearPointerComponent * Pointer) void OnUpdatePokeFocus ( UUxtNearPointerComponent * Pointer) void OnExitPokeFocus ( UUxtNearPointerComponent * Pointer) void OnBeginPoke ( UUxtNearPointerComponent * Pointer) void OnUpdatePoke ( UUxtNearPointerComponent * Pointer) void OnEndPoke ( UUxtNearPointerComponent * Pointer) Public Functions Documentation function CanHandlePoke bool CanHandlePoke( UPrimitiveComponent * Primitive ) const Returns true if the this can handle events from this primitive. function OnEnterPokeFocus void OnEnterPokeFocus( UUxtNearPointerComponent * Pointer ) Raised when a pointer focuses the actor. function OnUpdatePokeFocus void OnUpdatePokeFocus( UUxtNearPointerComponent * Pointer ) Raised when a pointer has been updated while focused. function OnExitPokeFocus void OnExitPokeFocus( UUxtNearPointerComponent * Pointer ) Raised when a pointer stops focusing the actor. function OnBeginPoke void OnBeginPoke( UUxtNearPointerComponent * Pointer ) Raised when a pointer poke volume starts overlapping the actor. function OnUpdatePoke void OnUpdatePoke( UUxtNearPointerComponent * Pointer ) Raised while a pointer poke volume is overlapping the actor. function OnEndPoke void OnEndPoke( UUxtNearPointerComponent * Pointer ) Raised when a pointer poke volume stops overlapping the actor. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_f_x_r_simulation_input_device.html": {
    "href": "api/_f_x_r_simulation_input_device.html",
    "title": "MRTK Unreal API Reference FXRSimulationInputDevice | UXT Documentation",
    "keywords": "FXRSimulationInputDevice Virtual device for simulated XR input events. class FXRSimulationInputDevice; Header #include <XRSimulationInputDevice.h> Inheritance Inherits from IInputDevice, TSharedFromThis< FXRSimulationInputDevice > Public Functions Name FXRSimulationInputDevice ( FXRSimulationHMD * InputSimHMD) virtual ~FXRSimulationInputDevice () virtual void Tick (float DeltaTime) override virtual void SendControllerEvents () override virtual void SetMessageHandler (const TSharedRef< FGenericApplicationMessageHandler > & InMessageHandler) override virtual bool Exec (UWorld * InWorld, const TCHAR * Cmd, FOutputDevice & Ar) override virtual void SetChannelValue (int32 ControllerId, FForceFeedbackChannelType ChannelType, float Value) override virtual void SetChannelValues (int32 ControllerId, const FForceFeedbackValues & values) override Public Functions Documentation function FXRSimulationInputDevice FXRSimulationInputDevice( FXRSimulationHMD * InputSimHMD ) function ~FXRSimulationInputDevice virtual ~FXRSimulationInputDevice() function Tick virtual void Tick( float DeltaTime ) override IInputDevice implementation function SendControllerEvents virtual void SendControllerEvents() override function SetMessageHandler virtual void SetMessageHandler( const TSharedRef< FGenericApplicationMessageHandler > & InMessageHandler ) override function Exec virtual bool Exec( UWorld * InWorld, const TCHAR * Cmd, FOutputDevice & Ar ) override function SetChannelValue virtual void SetChannelValue( int32 ControllerId, FForceFeedbackChannelType ChannelType, float Value ) override function SetChannelValues virtual void SetChannelValues( int32 ControllerId, const FForceFeedbackValues & values ) override Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_f_x_r_simulation_h_m_d.html": {
    "href": "api/_f_x_r_simulation_h_m_d.html",
    "title": "MRTK Unreal API Reference FXRSimulationHMD | UXT Documentation",
    "keywords": "FXRSimulationHMD Simple Head Mounted Display class FXRSimulationHMD; Header #include <XRSimulationHMD.h> Inheritance Inherits from FHeadMountedDisplayBase, FXRRenderTargetManager, FSceneViewExtensionBase Public Functions Name virtual FName GetSystemName () const override int32 GetXRSystemFlags () const virtual bool EnumerateTrackedDevices (TArray< int32 > & OutDevices, EXRTrackedDeviceType Type =EXRTrackedDeviceType::Any) override virtual void SetInterpupillaryDistance (float NewInterpupillaryDistance) override virtual float GetInterpupillaryDistance () const override virtual void ResetOrientationAndPosition (float Yaw =0.f) override virtual void ResetOrientation (float Yaw =0.f) override virtual void ResetPosition () override virtual bool GetCurrentPose (int32 DeviceId, FQuat & CurrentOrientation, FVector & CurrentPosition) override virtual void SetBaseRotation (const FRotator & BaseRot) override virtual FRotator GetBaseRotation () const override virtual void SetBaseOrientation (const FQuat & BaseOrient) override virtual FQuat GetBaseOrientation () const override virtual bool DoesSupportPositionalTracking () const override virtual class IHeadMountedDisplay * GetHMDDevice () override virtual class TSharedPtr< class IStereoRendering, ESPMode::ThreadSafe > GetStereoRenderingDevice () override virtual void OnBeginPlay (FWorldContext & InWorldContext) override virtual void OnEndPlay (FWorldContext & InWorldContext) override virtual void OnBeginRendering_RenderThread (FRHICommandListImmediate & RHICmdList, FSceneViewFamily & ViewFamily) override virtual FIntRect GetFullFlatEyeRect_RenderThread (FTexture2DRHIRef EyeTexture) const override virtual void CopyTexture_RenderThread (FRHICommandListImmediate & RHICmdList, FRHITexture2D * SrcTexture, FIntRect SrcRect, FRHITexture2D * DstTexture, FIntRect DstRect, bool bClearBlack, bool bNoAlpha) const override virtual void GetMotionControllerData (UObject * WorldContext, const EControllerHand Hand, FXRMotionControllerData & MotionControllerData) override virtual bool IsHMDConnected () override virtual bool IsHMDEnabled () const override virtual void EnableHMD (bool bEnable =true) override virtual bool GetHMDMonitorInfo (MonitorInfo & MonitorDesc) override virtual void GetFieldOfView (float & OutHFOVInDegrees, float & OutVFOVInDegrees) const override virtual bool IsChromaAbCorrectionEnabled () const override virtual FIntPoint GetIdealRenderTargetSize () const override virtual bool OnStartGameFrame (FWorldContext & WorldContext) override virtual bool IsStereoEnabled () const override virtual bool EnableStereo (bool bEnable =true) override virtual void AdjustViewRect (EStereoscopicPass StereoPass, int32 & X, int32 & Y, uint32 & SizeX, uint32 & SizeY) const override virtual EStereoscopicPass GetViewPassForIndex (bool bStereoRequested, uint32 ViewIndex) const override virtual uint32 GetViewIndexForPass (EStereoscopicPass StereoPassType) const override virtual int32 GetDesiredNumberOfViews (bool bStereoRequested) const override virtual FMatrix GetStereoProjectionMatrix (const enum EStereoscopicPass StereoPassType) const override virtual void GetEyeRenderParams_RenderThread (const struct FRenderingCompositePassContext & Context, FVector2D & EyeToSrcUVScaleValue, FVector2D & EyeToSrcUVOffsetValue) const override virtual IStereoRenderTargetManager * GetRenderTargetManager () override virtual void RenderTexture_RenderThread (class FRHICommandListImmediate & RHICmdList, class FRHITexture2D * BackBuffer, class FRHITexture2D * SrcTexture, FVector2D WindowSize) const override virtual bool ShouldUseSeparateRenderTarget () const override virtual void SetupViewFamily (FSceneViewFamily & InViewFamily) override virtual void SetupView (FSceneViewFamily & InViewFamily, FSceneView & InView) override virtual void BeginRenderViewFamily (FSceneViewFamily & InViewFamily) virtual void PreRenderView_RenderThread (FRHICommandListImmediate & RHICmdList, FSceneView & InView) override virtual void PreRenderViewFamily_RenderThread (FRHICommandListImmediate & RHICmdList, FSceneViewFamily & InViewFamily) override FXRSimulationHMD (const FAutoRegister & AutoRegister) virtual ~FXRSimulationHMD () bool IsInitialized () const AXRSimulationActor * GetSimulationActor () const Protected Functions Name virtual float GetWorldToMetersScale () const override virtual bool IsActiveThisFrame_Internal (const FSceneViewExtensionContext & Context) const override Public Attributes Name const FName SystemName Public Functions Documentation function GetSystemName inline virtual FName GetSystemName() const override IXRTrackingSystem interface function GetXRSystemFlags inline int32 GetXRSystemFlags() const function EnumerateTrackedDevices virtual bool EnumerateTrackedDevices( TArray< int32 > & OutDevices, EXRTrackedDeviceType Type =EXRTrackedDeviceType::Any ) override function SetInterpupillaryDistance virtual void SetInterpupillaryDistance( float NewInterpupillaryDistance ) override function GetInterpupillaryDistance virtual float GetInterpupillaryDistance() const override function ResetOrientationAndPosition virtual void ResetOrientationAndPosition( float Yaw =0.f ) override function ResetOrientation virtual void ResetOrientation( float Yaw =0.f ) override function ResetPosition virtual void ResetPosition() override function GetCurrentPose virtual bool GetCurrentPose( int32 DeviceId, FQuat & CurrentOrientation, FVector & CurrentPosition ) override function SetBaseRotation virtual void SetBaseRotation( const FRotator & BaseRot ) override function GetBaseRotation virtual FRotator GetBaseRotation() const override function SetBaseOrientation virtual void SetBaseOrientation( const FQuat & BaseOrient ) override function GetBaseOrientation virtual FQuat GetBaseOrientation() const override function DoesSupportPositionalTracking virtual bool DoesSupportPositionalTracking() const override function GetHMDDevice inline virtual class IHeadMountedDisplay * GetHMDDevice() override function GetStereoRenderingDevice inline virtual class TSharedPtr< class IStereoRendering, ESPMode::ThreadSafe > GetStereoRenderingDevice() override function OnBeginPlay virtual void OnBeginPlay( FWorldContext & InWorldContext ) override function OnEndPlay virtual void OnEndPlay( FWorldContext & InWorldContext ) override function OnBeginRendering_RenderThread virtual void OnBeginRendering_RenderThread( FRHICommandListImmediate & RHICmdList, FSceneViewFamily & ViewFamily ) override function GetFullFlatEyeRect_RenderThread virtual FIntRect GetFullFlatEyeRect_RenderThread( FTexture2DRHIRef EyeTexture ) const override function CopyTexture_RenderThread virtual void CopyTexture_RenderThread( FRHICommandListImmediate & RHICmdList, FRHITexture2D * SrcTexture, FIntRect SrcRect, FRHITexture2D * DstTexture, FIntRect DstRect, bool bClearBlack, bool bNoAlpha ) const override function GetMotionControllerData virtual void GetMotionControllerData( UObject * WorldContext, const EControllerHand Hand, FXRMotionControllerData & MotionControllerData ) override function IsHMDConnected virtual bool IsHMDConnected() override IHeadMountedDisplay interface function IsHMDEnabled virtual bool IsHMDEnabled() const override function EnableHMD virtual void EnableHMD( bool bEnable =true ) override function GetHMDMonitorInfo virtual bool GetHMDMonitorInfo( MonitorInfo & MonitorDesc ) override function GetFieldOfView virtual void GetFieldOfView( float & OutHFOVInDegrees, float & OutVFOVInDegrees ) const override function IsChromaAbCorrectionEnabled virtual bool IsChromaAbCorrectionEnabled() const override function GetIdealRenderTargetSize virtual FIntPoint GetIdealRenderTargetSize() const override function OnStartGameFrame virtual bool OnStartGameFrame( FWorldContext & WorldContext ) override function IsStereoEnabled virtual bool IsStereoEnabled() const override IStereoRendering interface function EnableStereo virtual bool EnableStereo( bool bEnable =true ) override function AdjustViewRect virtual void AdjustViewRect( EStereoscopicPass StereoPass, int32 & X, int32 & Y, uint32 & SizeX, uint32 & SizeY ) const override function GetViewPassForIndex virtual EStereoscopicPass GetViewPassForIndex( bool bStereoRequested, uint32 ViewIndex ) const override function GetViewIndexForPass virtual uint32 GetViewIndexForPass( EStereoscopicPass StereoPassType ) const override function GetDesiredNumberOfViews virtual int32 GetDesiredNumberOfViews( bool bStereoRequested ) const override function GetStereoProjectionMatrix virtual FMatrix GetStereoProjectionMatrix( const enum EStereoscopicPass StereoPassType ) const override function GetEyeRenderParams_RenderThread virtual void GetEyeRenderParams_RenderThread( const struct FRenderingCompositePassContext & Context, FVector2D & EyeToSrcUVScaleValue, FVector2D & EyeToSrcUVOffsetValue ) const override function GetRenderTargetManager virtual IStereoRenderTargetManager * GetRenderTargetManager() override function RenderTexture_RenderThread virtual void RenderTexture_RenderThread( class FRHICommandListImmediate & RHICmdList, class FRHITexture2D * BackBuffer, class FRHITexture2D * SrcTexture, FVector2D WindowSize ) const override function ShouldUseSeparateRenderTarget virtual bool ShouldUseSeparateRenderTarget() const override IStereoRenderTargetManager function SetupViewFamily virtual void SetupViewFamily( FSceneViewFamily & InViewFamily ) override ISceneViewExtension interface function SetupView virtual void SetupView( FSceneViewFamily & InViewFamily, FSceneView & InView ) override function BeginRenderViewFamily inline virtual void BeginRenderViewFamily( FSceneViewFamily & InViewFamily ) function PreRenderView_RenderThread virtual void PreRenderView_RenderThread( FRHICommandListImmediate & RHICmdList, FSceneView & InView ) override function PreRenderViewFamily_RenderThread virtual void PreRenderViewFamily_RenderThread( FRHICommandListImmediate & RHICmdList, FSceneViewFamily & InViewFamily ) override function FXRSimulationHMD FXRSimulationHMD( const FAutoRegister & AutoRegister ) Constructor function ~FXRSimulationHMD virtual ~FXRSimulationHMD() Destructor function IsInitialized bool IsInitialized() const Return : True if the HMD was initialized OK function GetSimulationActor AXRSimulationActor * GetSimulationActor() const Protected Functions Documentation function GetWorldToMetersScale virtual float GetWorldToMetersScale() const override FXRTrackingSystemBase protected interface function IsActiveThisFrame_Internal virtual bool IsActiveThisFrame_Internal( const FSceneViewExtensionContext & Context ) const override Public Attributes Documentation variable SystemName static const FName SystemName = TEXT(\"XRSimulation\"); Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_f_u_x_tools_input_module.html": {
    "href": "api/_f_u_x_tools_input_module.html",
    "title": "MRTK Unreal API Reference FUXToolsInputModule | UXT Documentation",
    "keywords": "FUXToolsInputModule Module for XR input handling. Note: Input mappings should be generated in the PostEngineInit loading phase, which is why a separate input module is required. This is because we need to be sure that all input keys have been registered before trying to create mappings. class FUXToolsInputModule; Inheritance Inherits from IModuleInterface Public Functions Name virtual void StartupModule () override virtual void ShutdownModule () override Public Functions Documentation function StartupModule inline virtual void StartupModule() override IModuleInterface implementation function ShutdownModule inline virtual void ShutdownModule() override Updated on 23 August 2021 at 12:07:13 Coordinated Universal Time"
  },
  "api/_f_u_x_tools_editor_module.html": {
    "href": "api/_f_u_x_tools_editor_module.html",
    "title": "MRTK Unreal API Reference FUXToolsEditorModule | UXT Documentation",
    "keywords": "FUXToolsEditorModule class FUXToolsEditorModule; Inheritance Inherits from IModuleInterface Public Functions Name virtual void StartupModule () override virtual void ShutdownModule () override Public Functions Documentation function StartupModule virtual void StartupModule() override function ShutdownModule virtual void ShutdownModule() override Updated on 23 August 2021 at 12:07:13 Coordinated Universal Time"
  },
  "api/_f_uxt_button_audio_brush.html": {
    "href": "api/_f_uxt_button_audio_brush.html",
    "title": "MRTK Unreal API Reference FUxtButtonAudioBrush | UXT Documentation",
    "keywords": "FUxtButtonAudioBrush Structure containing data representing button audio assets and properties. struct FUxtButtonAudioBrush; Header #include <UxtButtonBrush.h> Public Attributes Name USoundBase * PressedSound USoundBase * ReleasedSound Public Attributes Documentation variable PressedSound USoundBase* FUxtButtonAudioBrush::PressedSound USoundBase * PressedSound = nullptr; The sound which plays when a button is pressed. This sound is spatialized. variable ReleasedSound USoundBase* FUxtButtonAudioBrush::ReleasedSound USoundBase * ReleasedSound = nullptr; The sound which plays when a button is released. This sound is spatialized. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_f_uxt_affordance_config.html": {
    "href": "api/_f_uxt_affordance_config.html",
    "title": "MRTK Unreal API Reference FUxtAffordanceConfig | UXT Documentation",
    "keywords": "FUxtAffordanceConfig Affordances are grabbable actors placed on the bounding box which enable interaction. struct FUxtAffordanceConfig; Header #include <UxtBoundsControlConfig.h> Public Functions Name FVector GetBoundsLocation () const FRotator GetBoundsRotation () const EUxtAffordanceKind GetAffordanceKind () const EUxtAffordanceAction GetAction () const void GetWorldLocationAndRotation (const FBox & Bounds, const FTransform & RootTransform, FVector & OutLocation, FQuat & OutRotation) const Public Attributes Name EUxtAffordancePlacement Placement FVector Rotation Public Functions Documentation function GetBoundsLocation FVector GetBoundsLocation() const Location of the affordance in normalized bounding box space (-1..1). function GetBoundsRotation FRotator GetBoundsRotation() const Rotation of the affordance in bounding box space. function GetAffordanceKind EUxtAffordanceKind GetAffordanceKind() const Kind of actor class to use. The matching actor class from the bounding box component will be used. function GetAction EUxtAffordanceAction GetAction() const Action that this affordance will perform when grabbed function GetWorldLocationAndRotation void GetWorldLocationAndRotation( const FBox & Bounds, const FTransform & RootTransform, FVector & OutLocation, FQuat & OutRotation ) const Location and rotation of the affordance in world space, based on the root transform. Root transform scale is not included in the result. Public Attributes Documentation variable Placement EUxtAffordancePlacement FUxtAffordanceConfig::Placement EUxtAffordancePlacement Placement = EUxtAffordancePlacement::Center; Preset type of the affordance. variable Rotation FVector FUxtAffordanceConfig::Rotation FVector Rotation = FVector::ZeroVector; The Euler orientation of the affordance. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_a_uxt_pressable_switch_button_actor.html": {
    "href": "api/_a_uxt_pressable_switch_button_actor.html",
    "title": "MRTK Unreal API Reference AUxtPressableSwitchButtonActor | UXT Documentation",
    "keywords": "AUxtPressableSwitchButtonActor A derived actor of AUxtPressableRadioButtonActor which represents the toggle state with a switch that animates left and right. class AUxtPressableSwitchButtonActor; Header #include <Controls/UxtPressableSwitchButtonActor.h> Inheritance Inherits from AUxtPressableRadioButtonActor , AUxtPressableToggleButtonActor , AUxtPressableButtonActor , AUxtBasePressableButtonActor , AActor, IUxtCollectionObject Public Functions Name AUxtPressableSwitchButtonActor () virtual void UpdateToggleVisuals () override const FUxtIconBrush & GetSwitchedOffIconBrush () const void SetSwitchedOffIconBrush (const FUxtIconBrush & Brush) const FUxtIconBrush & GetSwitchedOnIconBrush () const void SetSwitchedOnIconBrush (const FUxtIconBrush & Brush) Protected Attributes Name FUxtIconBrush SwitchedOffIconBrush FUxtIconBrush SwitchedOnIconBrush Additional inherited members Public Functions inherited from AUxtPressableRadioButtonActor Name AUxtPressableRadioButtonActor () virtual void ConstructIcon () override Protected Attributes inherited from AUxtPressableRadioButtonActor Name UTextRenderComponent * CenterIconComponent Public Functions inherited from AUxtPressableToggleButtonActor Name AUxtPressableToggleButtonActor () virtual void OnConstruction (const FTransform & Transform) override virtual void BeginPlay () override virtual void ConstructVisuals () override bool IsInitiallyChecked () const void SetIsInitiallyChecked (bool InitiallyChecked) void RemoveTogglePlate () Protected Functions inherited from AUxtPressableToggleButtonActor Name virtual void OnButtonPressed ( UUxtPressableButtonComponent * Button, UUxtPointerComponent * Pointer) override virtual void OnButtonReleased ( UUxtPressableButtonComponent * Button, UUxtPointerComponent * Pointer) override virtual void OnButtonToggled (UUxtToggleStateComponent * ToggleState) Protected Attributes inherited from AUxtPressableToggleButtonActor Name bool bToggleOnRelease UUxtToggleStateComponent * ToggleStateComponent UUxtBackPlateComponent * TogglePlateComponent bool bIsInitiallyChecked Public Functions inherited from AUxtPressableButtonActor Name AUxtPressableButtonActor () virtual void OnConstruction (const FTransform & Transform) override virtual void Tick (float DeltaTime) override virtual void ConstructVisuals () virtual void ConstructIcon () virtual void ConstructLabel () bool BeginPulse (const UUxtPointerComponent * Pointer) bool IsPulsing () const FVector GetMillimeterSize () const void SetMillimeterSize (FVector Size) FVector GetSize () const void SetSize (FVector Size) bool IsPlated () const void SetIsPlated (bool IsPlated) const FUxtIconBrush & GetIconBrush () const void SetIconBrush (const FUxtIconBrush & Brush) const FText & GetLabel () const void SetLabel (const FText & NewLabel) const FUxtTextBrush & GetLabelTextBrush () const void SetLabelTextBrush (const FUxtTextBrush & Brush) const FUxtButtonBrush & GetButtonBrush () const void SetButtonBrush (const FUxtButtonBrush & Brush) Protected Functions inherited from AUxtPressableButtonActor Name virtual void OnButtonPressed ( UUxtPressableButtonComponent * Button, UUxtPointerComponent * Pointer) virtual void OnButtonReleased ( UUxtPressableButtonComponent * Button, UUxtPointerComponent * Pointer) virtual void OnBeginFocus ( UUxtPressableButtonComponent * Button, UUxtPointerComponent * Pointer, bool WasAlreadyFocused) virtual void OnButtonEnabled ( UUxtPressableButtonComponent * Button) virtual void OnButtonDisabled ( UUxtPressableButtonComponent * Button) virtual bool AnimatePulse (float DeltaTime) virtual bool AnimateFocus (float DeltaTime) template <class T > T * CreateAndAttachComponent (FName Name, USceneComponent * Parent) Protected Attributes inherited from AUxtPressableButtonActor Name FVector MillimeterSize bool bIsPlated FText Label FUxtTextBrush LabelTextBrush FUxtButtonBrush ButtonBrush USceneComponent * BackPlatePivotComponent UUxtBackPlateComponent * BackPlateMeshComponent USceneComponent * FrontPlatePivotComponent USceneComponent * FrontPlateCenterComponent UStaticMeshComponent * FrontPlateMeshComponent UTextRenderComponent * IconComponent UTextRenderComponent * LabelComponent UAudioComponent * AudioComponent float PulseTimer float PulseFadeTimer UMaterialInterface * PrePulseMaterial UMaterialInstanceDynamic * PulseMaterialInstance uint32 MaterialIndex float FocusTimer bool bCanEditIconBrush FUxtIconBrush IconBrush Public Functions inherited from AUxtBasePressableButtonActor Name AUxtBasePressableButtonActor () TScriptInterface< IUxtPokeTarget > GetPokeTarget () virtual TScriptInterface< IUxtPokeTarget > GetPokeTarget_Implementation () override TScriptInterface< IUxtFarTarget > GetFarTarget () virtual TScriptInterface< IUxtFarTarget > GetFarTarget_Implementation () override UUxtPressableButtonComponent * GetButtonComponent () const Protected Attributes inherited from AUxtBasePressableButtonActor Name UUxtPressableButtonComponent * ButtonComponent Public Functions inherited from IUxtCollectionObject Name TScriptInterface< IUxtPokeTarget > GetPokeTarget () TScriptInterface< IUxtFarTarget > GetFarTarget () Public Functions Documentation function AUxtPressableSwitchButtonActor AUxtPressableSwitchButtonActor() function UpdateToggleVisuals virtual void UpdateToggleVisuals() override Reimplements : AUxtPressableRadioButtonActor::UpdateToggleVisuals Alters the toggle visuals when the toggle state changes. function GetSwitchedOffIconBrush inline const FUxtIconBrush & GetSwitchedOffIconBrush() const Accessor to the button's switched off icon brush. function SetSwitchedOffIconBrush void SetSwitchedOffIconBrush( const FUxtIconBrush & Brush ) Applies a new switched off icon brush. function GetSwitchedOnIconBrush inline const FUxtIconBrush & GetSwitchedOnIconBrush() const Accessor to the button's switched on icon brush. function SetSwitchedOnIconBrush void SetSwitchedOnIconBrush( const FUxtIconBrush & Brush ) Applies a new switched on icon brush. Protected Attributes Documentation variable SwitchedOffIconBrush UPROPERTY(EditAnywhere, Category=\"Uxt Pressable Button\", BlueprintGetter=\"GetSwitchedOffIconBrush\", BlueprintSetter=\"SetSwitchedOffIconBrush\") FUxtIconBrush SwitchedOffIconBrush; Structure which contains properties for the button's icon when switched off. variable SwitchedOnIconBrush UPROPERTY(EditAnywhere, Category=\"Uxt Pressable Button\", BlueprintGetter=\"GetSwitchedOnIconBrush\", BlueprintSetter=\"SetSwitchedOnIconBrush\") FUxtIconBrush SwitchedOnIconBrush; Structure which contains properties for the button's icon when switched on. Updated on 23 August 2021 at 12:07:13 Coordinated Universal Time"
  },
  "Docs/WidgetComponent.html": {
    "href": "Docs/WidgetComponent.html",
    "title": "WidgetComponent | UXT Documentation",
    "keywords": "WidgetComponent The UXT widget component is used to make UXT interaction work with Unreal Engine's own widget component. Usage Create your widget as normal: Create a widget class blueprint asset, and design your UI there. Create an actor and add a UE4 widget component . Set the widget class to your widget asset. After doing this, you should be able to see your widget when you play in editor. However, you will not be able to interact with the widget using the simulated hands. Stop play in editor and add a UXT widget component to your actor: This should be all the set up required. When you play in editor now, you should be able to use far interaction and poke to interact with the ui elements in your widget actor. Behavior Details The UXT widget component only supports far interaction and near poke, and not near grab. For this reason, some UI elements may not behave like their UXT counterparts. For example, the slider widget follows the poking finger, whereas the UXT pinch slider requires a grab for near interaction."
  },
  "api/_f_uxt_hand_proximity_mesh_data.html": {
    "href": "api/_f_uxt_hand_proximity_mesh_data.html",
    "title": "MRTK Unreal API Reference FUxtHandProximityMeshData | UXT Documentation",
    "keywords": "FUxtHandProximityMeshData Utility class for constructing a cone-shaped mesh for proximity detection. The volume is constructed radially symmetric around the forward axis. The near face is a simple disc, while the front is a spherical section. The tip of the cylinder is the origin of the mesh. *------ * ------ * ------ * ------ * | * Far | Near Tip Axis <--—*------------------------—|-------------—o class FUxtHandProximityMeshData; Header #include <Input/UxtHandProximityMesh.h> Public Functions Name void Build (float ConeAngle, float ConeOffset, float ConeSideLength, int32 NewNumSegments) void UpdateMesh (UProceduralMeshComponent * Mesh, int32 Section) const Public Attributes Name bool bEnableLighting Public Functions Documentation function Build void Build( float ConeAngle, float ConeOffset, float ConeSideLength, int32 NewNumSegments ) function UpdateMesh void UpdateMesh( UProceduralMeshComponent * Mesh, int32 Section ) const Public Attributes Documentation variable bEnableLighting bool bEnableLighting = false; Updated on 23 August 2021 at 12:07:13 Coordinated Universal Time"
  },
  "api/_f_uxt_grab_pointer_data.html": {
    "href": "api/_f_uxt_grab_pointer_data.html",
    "title": "MRTK Unreal API Reference FUxtGrabPointerData | UXT Documentation",
    "keywords": "FUxtGrabPointerData Utility struct that stores transient data for a pointer which is interacting with a grabbable component. struct FUxtGrabPointerData; Header #include <UxtGrabTargetComponent.h> Public Attributes Name UUxtNearPointerComponent * NearPointer UUxtFarPointerComponent * FarPointer FTransform GrabPointTransform float StartTime FTransform LocalGrabPoint FTransform GripToGrabPoint FTransform GripToObject FTransform FarRayHitPointInPointer Public Attributes Documentation variable NearPointer UUxtNearPointerComponent* FUxtGrabPointerData::NearPointer UUxtNearPointerComponent * NearPointer = nullptr; The near pointer that is interacting with the component. variable FarPointer UUxtFarPointerComponent* FUxtGrabPointerData::FarPointer UUxtFarPointerComponent * FarPointer = nullptr; The far pointer that is interacting with the component variable GrabPointTransform FTransform FUxtGrabPointerData::GrabPointTransform FTransform GrabPointTransform; Last updated grab point transform. (Pointer transform in near pointer case, ray hit transform in far pointer case) variable StartTime float FUxtGrabPointerData::StartTime float StartTime; The time at which interaction started, in seconds since application start. variable LocalGrabPoint FTransform FUxtGrabPointerData::LocalGrabPoint FTransform LocalGrabPoint; Transform of the pointer when it started interacting, in the local space of the target component. This allows computing pointer offset in relation to the current actor transform. variable GripToGrabPoint FTransform FUxtGrabPointerData::GripToGrabPoint FTransform GripToGrabPoint; Transform of the grab point in near pointer's grip local space at the start of the interaction. This is useful to prevent grab point's position changes after grab starts from altering object's transform (e.g. animation of InputSim's hand). Far pointer doesn't need this because its grip transform is already at grab point. variable GripToObject FTransform FUxtGrabPointerData::GripToObject FTransform GripToObject; Transform of the object in pointer's grip local space at the start of the interaction. variable FarRayHitPointInPointer FTransform FUxtGrabPointerData::FarRayHitPointInPointer FTransform FarRayHitPointInPointer = FTransform::Identity; Far pointer only property -> describes the relative transform of the grab point to the pointer transform (pointer origin / orientation) This is needed to calculate the new grab point on the object on pointer translations / rotations Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_a_uxt_pressable_radio_button_actor.html": {
    "href": "api/_a_uxt_pressable_radio_button_actor.html",
    "title": "MRTK Unreal API Reference AUxtPressableRadioButtonActor | UXT Documentation",
    "keywords": "AUxtPressableRadioButtonActor A derived actor of AUxtPressableToggleButtonActor which represents the toggle state with a circle icon. Radio buttons are normally used in groups alongside the UUxtToggleGroupComponent . class AUxtPressableRadioButtonActor; Header #include <Controls/UxtPressableRadioButtonActor.h> Inheritance Inherits from AUxtPressableToggleButtonActor , AUxtPressableButtonActor , AUxtBasePressableButtonActor , AActor, IUxtCollectionObject Inherited by AUxtPressableSwitchButtonActor Public Functions Name AUxtPressableRadioButtonActor () virtual void ConstructIcon () override virtual void UpdateToggleVisuals () override Protected Attributes Name UTextRenderComponent * CenterIconComponent Additional inherited members Public Functions inherited from AUxtPressableToggleButtonActor Name AUxtPressableToggleButtonActor () virtual void OnConstruction (const FTransform & Transform) override virtual void BeginPlay () override virtual void ConstructVisuals () override bool IsInitiallyChecked () const void SetIsInitiallyChecked (bool InitiallyChecked) void RemoveTogglePlate () Protected Functions inherited from AUxtPressableToggleButtonActor Name virtual void OnButtonPressed ( UUxtPressableButtonComponent * Button, UUxtPointerComponent * Pointer) override virtual void OnButtonReleased ( UUxtPressableButtonComponent * Button, UUxtPointerComponent * Pointer) override virtual void OnButtonToggled (UUxtToggleStateComponent * ToggleState) Protected Attributes inherited from AUxtPressableToggleButtonActor Name bool bToggleOnRelease UUxtToggleStateComponent * ToggleStateComponent UUxtBackPlateComponent * TogglePlateComponent bool bIsInitiallyChecked Public Functions inherited from AUxtPressableButtonActor Name AUxtPressableButtonActor () virtual void OnConstruction (const FTransform & Transform) override virtual void Tick (float DeltaTime) override virtual void ConstructVisuals () virtual void ConstructLabel () bool BeginPulse (const UUxtPointerComponent * Pointer) bool IsPulsing () const FVector GetMillimeterSize () const void SetMillimeterSize (FVector Size) FVector GetSize () const void SetSize (FVector Size) bool IsPlated () const void SetIsPlated (bool IsPlated) const FUxtIconBrush & GetIconBrush () const void SetIconBrush (const FUxtIconBrush & Brush) const FText & GetLabel () const void SetLabel (const FText & NewLabel) const FUxtTextBrush & GetLabelTextBrush () const void SetLabelTextBrush (const FUxtTextBrush & Brush) const FUxtButtonBrush & GetButtonBrush () const void SetButtonBrush (const FUxtButtonBrush & Brush) Protected Functions inherited from AUxtPressableButtonActor Name virtual void OnButtonPressed ( UUxtPressableButtonComponent * Button, UUxtPointerComponent * Pointer) virtual void OnButtonReleased ( UUxtPressableButtonComponent * Button, UUxtPointerComponent * Pointer) virtual void OnBeginFocus ( UUxtPressableButtonComponent * Button, UUxtPointerComponent * Pointer, bool WasAlreadyFocused) virtual void OnButtonEnabled ( UUxtPressableButtonComponent * Button) virtual void OnButtonDisabled ( UUxtPressableButtonComponent * Button) virtual bool AnimatePulse (float DeltaTime) virtual bool AnimateFocus (float DeltaTime) template <class T > T * CreateAndAttachComponent (FName Name, USceneComponent * Parent) Protected Attributes inherited from AUxtPressableButtonActor Name FVector MillimeterSize bool bIsPlated FText Label FUxtTextBrush LabelTextBrush FUxtButtonBrush ButtonBrush USceneComponent * BackPlatePivotComponent UUxtBackPlateComponent * BackPlateMeshComponent USceneComponent * FrontPlatePivotComponent USceneComponent * FrontPlateCenterComponent UStaticMeshComponent * FrontPlateMeshComponent UTextRenderComponent * IconComponent UTextRenderComponent * LabelComponent UAudioComponent * AudioComponent float PulseTimer float PulseFadeTimer UMaterialInterface * PrePulseMaterial UMaterialInstanceDynamic * PulseMaterialInstance uint32 MaterialIndex float FocusTimer bool bCanEditIconBrush FUxtIconBrush IconBrush Public Functions inherited from AUxtBasePressableButtonActor Name AUxtBasePressableButtonActor () TScriptInterface< IUxtPokeTarget > GetPokeTarget () virtual TScriptInterface< IUxtPokeTarget > GetPokeTarget_Implementation () override TScriptInterface< IUxtFarTarget > GetFarTarget () virtual TScriptInterface< IUxtFarTarget > GetFarTarget_Implementation () override UUxtPressableButtonComponent * GetButtonComponent () const Protected Attributes inherited from AUxtBasePressableButtonActor Name UUxtPressableButtonComponent * ButtonComponent Public Functions inherited from IUxtCollectionObject Name TScriptInterface< IUxtPokeTarget > GetPokeTarget () TScriptInterface< IUxtFarTarget > GetFarTarget () Public Functions Documentation function AUxtPressableRadioButtonActor AUxtPressableRadioButtonActor() function ConstructIcon virtual void ConstructIcon() override Reimplements : AUxtPressableButtonActor::ConstructIcon Adds toggle visuals. function UpdateToggleVisuals virtual void UpdateToggleVisuals() override Reimplements : AUxtPressableToggleButtonActor::UpdateToggleVisuals Reimplemented by : AUxtPressableSwitchButtonActor::UpdateToggleVisuals Alters the toggle visuals when the toggle state changes. Protected Attributes Documentation variable CenterIconComponent UTextRenderComponent * CenterIconComponent = nullptr; Displays the radio button's center icon which gets toggled on and off. Updated on 23 August 2021 at 12:07:13 Coordinated Universal Time"
  },
  "api/_a_uxt_hand_interaction_actor.html": {
    "href": "api/_a_uxt_hand_interaction_actor.html",
    "title": "MRTK Unreal API Reference AUxtHandInteractionActor | UXT Documentation",
    "keywords": "AUxtHandInteractionActor Actor that drives hand interactions with components that implement the far, grab and poke target interfaces. A hand has two interaction modes: Near: interactions performed by poking or grabbing targets directly. Far: interactions performed by pointing at far targets from a distance via a hand ray. The actor transitions between modes depending on whether there is a grab or poke target within the near activation distance. class AUxtHandInteractionActor; Header #include <Input/UxtHandInteractionActor.h> Inheritance Inherits from AActor Public Functions Name AUxtHandInteractionActor (const FObjectInitializer & ObjectInitializer) virtual void BeginPlay () override virtual void Tick (float DeltaTime) override EControllerHand GetHand () const void SetHand (EControllerHand NewHand) ECollisionChannel GetTraceChannel () const void SetTraceChannel (ECollisionChannel NewTraceChannel) float GetPokeRadius () const void SetPokeRadius (float NewPokeRadius) float GetRayStartOffset () const void SetRayStartOffset (float NewRayStartOffset) float GetRayLength () const void SetRayLength (float NewRayLength) FVector GetHandVelocity () const FVector GetHandAngularVelocity () const Public Attributes Name float ProximityConeOffset float ProximityConeSideLength bool bUseDefaultNearCursor bool bUseDefaultFarCursor bool bUseDefaultFarBeam bool bShowNearCursorOnGrabTargets float ProximityConeAngle float ProximityConeAngleLerp int32 InteractionMode Public Functions Documentation function AUxtHandInteractionActor AUxtHandInteractionActor( const FObjectInitializer & ObjectInitializer ) function BeginPlay virtual void BeginPlay() override function Tick virtual void Tick( float DeltaTime ) override function GetHand inline EControllerHand GetHand() const function SetHand void SetHand( EControllerHand NewHand ) function GetTraceChannel inline ECollisionChannel GetTraceChannel() const function SetTraceChannel void SetTraceChannel( ECollisionChannel NewTraceChannel ) function GetPokeRadius inline float GetPokeRadius() const function SetPokeRadius void SetPokeRadius( float NewPokeRadius ) function GetRayStartOffset inline float GetRayStartOffset() const function SetRayStartOffset void SetRayStartOffset( float NewRayStartOffset ) function GetRayLength inline float GetRayLength() const function SetRayLength void SetRayLength( float NewRayLength ) function GetHandVelocity inline FVector GetHandVelocity() const function GetHandAngularVelocity inline FVector GetHandAngularVelocity() const Public Attributes Documentation variable ProximityConeOffset float ProximityConeOffset = 8.0f; variable ProximityConeSideLength float ProximityConeSideLength = 35.0f; variable bUseDefaultNearCursor bool bUseDefaultNearCursor = true; Create default visuals for the near cursor. Changes to this value after BeginPlay have no effect. variable bUseDefaultFarCursor bool bUseDefaultFarCursor = true; Create default visuals for the far cursor. Changes to this value after BeginPlay have no effect. variable bUseDefaultFarBeam bool bUseDefaultFarBeam = true; Create default visuals for the far beam. Changes to this value after BeginPlay have no effect. variable bShowNearCursorOnGrabTargets bool bShowNearCursorOnGrabTargets = false; Show the near cursor on grab targets. Changes to this value after BeginPlay have no effect. variable ProximityConeAngle UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Uxt Hand Interaction\", AdvancedDisplay, meta=(ClampMin=\"0.0\", ClampMax=\"90.0\")) float ProximityConeAngle; variable ProximityConeAngleLerp UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Uxt Hand Interaction\", AdvancedDisplay, meta=(ClampMin=\"0.0\", ClampMax=\"1.0\")) float ProximityConeAngleLerp = 0.9f; variable InteractionMode UPROPERTY(Transient, EditAnywhere, BlueprintReadWrite, Category=\"Uxt Hand Interaction\", meta=(Bitmask, BitmaskEnum=EUxtInteractionMode)) int32 InteractionMode; Active interaction modes Updated on 23 August 2021 at 12:07:13 Coordinated Universal Time"
  },
  "api/_x_r_simulation_input.html": {
    "href": "api/_x_r_simulation_input.html",
    "title": "MRTK Unreal API Reference XRSimulationInput | UXT Documentation",
    "keywords": "XRSimulationInput class XRSimulationInput; Inheritance Inherits from ModuleRules Public Functions Name XRSimulationInput (ReadOnlyTargetRules Target) Public Functions Documentation function XRSimulationInput inline XRSimulationInput( ReadOnlyTargetRules Target ) Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_f_x_r_simulation_hand_state.html": {
    "href": "api/_f_x_r_simulation_hand_state.html",
    "title": "MRTK Unreal API Reference FXRSimulationHandState | UXT Documentation",
    "keywords": "FXRSimulationHandState Simulation state for a single hand. struct FXRSimulationHandState; Header #include <XRSimulationState.h> Public Attributes Name bool bIsVisible bool bIsControlled FTransform RelativeTransform FName TargetPose TOptional< FTransform > GripToWristTransform Public Attributes Documentation variable bIsVisible bool FXRSimulationHandState::bIsVisible bool bIsVisible = true; True if the hand is currently visible, i.e. simulated as tracked. variable bIsControlled bool FXRSimulationHandState::bIsControlled bool bIsControlled = false; True if the hand is currently controlled by the user. variable RelativeTransform FTransform FXRSimulationHandState::RelativeTransform FTransform RelativeTransform = FTransform(); Transform offset relative to the rest pose. variable TargetPose FName FXRSimulationHandState::TargetPose FName TargetPose = NAME_None; Target pose. variable GripToWristTransform TOptional<FTransform> FXRSimulationHandState::GripToWristTransform TOptional< FTransform > GripToWristTransform; Relative transform of palm to wrist, frozen at the time grip starts. This is used to produce a stable grip pose by ignoring palm animation during grab. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_a_uxt_pressable_button_actor.html": {
    "href": "api/_a_uxt_pressable_button_actor.html",
    "title": "MRTK Unreal API Reference AUxtPressableButtonActor | UXT Documentation",
    "keywords": "AUxtPressableButtonActor The default pressable button actor which programmatically builds an actor hierarchy with a back plate, front plate, icon, and label. All button properties within this class are reactive at edit and runtime. This actor also contains behaviors to support icon focus animation and sound playback. This class is extensible to support derived button types. class AUxtPressableButtonActor; Header #include <Controls/UxtPressableButtonActor.h> Inheritance Inherits from AUxtBasePressableButtonActor , AActor, IUxtCollectionObject Inherited by AUxtPressableToggleButtonActor Public Functions Name AUxtPressableButtonActor () virtual void OnConstruction (const FTransform & Transform) override virtual void Tick (float DeltaTime) override virtual void ConstructVisuals () virtual void ConstructIcon () virtual void ConstructLabel () bool BeginPulse (const UUxtPointerComponent * Pointer) bool IsPulsing () const FVector GetMillimeterSize () const void SetMillimeterSize (FVector Size) FVector GetSize () const void SetSize (FVector Size) bool IsPlated () const void SetIsPlated (bool IsPlated) const FUxtIconBrush & GetIconBrush () const void SetIconBrush (const FUxtIconBrush & Brush) const FText & GetLabel () const void SetLabel (const FText & NewLabel) const FUxtTextBrush & GetLabelTextBrush () const void SetLabelTextBrush (const FUxtTextBrush & Brush) const FUxtButtonBrush & GetButtonBrush () const void SetButtonBrush (const FUxtButtonBrush & Brush) Protected Functions Name virtual void OnButtonPressed ( UUxtPressableButtonComponent * Button, UUxtPointerComponent * Pointer) virtual void OnButtonReleased ( UUxtPressableButtonComponent * Button, UUxtPointerComponent * Pointer) virtual void OnBeginFocus ( UUxtPressableButtonComponent * Button, UUxtPointerComponent * Pointer, bool WasAlreadyFocused) virtual void OnButtonEnabled ( UUxtPressableButtonComponent * Button) virtual void OnButtonDisabled ( UUxtPressableButtonComponent * Button) virtual bool AnimatePulse (float DeltaTime) virtual bool AnimateFocus (float DeltaTime) template <class T > T * CreateAndAttachComponent (FName Name, USceneComponent * Parent) Protected Attributes Name FVector MillimeterSize bool bIsPlated FText Label FUxtTextBrush LabelTextBrush FUxtButtonBrush ButtonBrush USceneComponent * BackPlatePivotComponent UUxtBackPlateComponent * BackPlateMeshComponent USceneComponent * FrontPlatePivotComponent USceneComponent * FrontPlateCenterComponent UStaticMeshComponent * FrontPlateMeshComponent UTextRenderComponent * IconComponent UTextRenderComponent * LabelComponent UAudioComponent * AudioComponent float PulseTimer float PulseFadeTimer UMaterialInterface * PrePulseMaterial UMaterialInstanceDynamic * PulseMaterialInstance uint32 MaterialIndex float FocusTimer bool bCanEditIconBrush FUxtIconBrush IconBrush Additional inherited members Public Functions inherited from AUxtBasePressableButtonActor Name AUxtBasePressableButtonActor () TScriptInterface< IUxtPokeTarget > GetPokeTarget () virtual TScriptInterface< IUxtPokeTarget > GetPokeTarget_Implementation () override TScriptInterface< IUxtFarTarget > GetFarTarget () virtual TScriptInterface< IUxtFarTarget > GetFarTarget_Implementation () override UUxtPressableButtonComponent * GetButtonComponent () const Protected Attributes inherited from AUxtBasePressableButtonActor Name UUxtPressableButtonComponent * ButtonComponent Public Functions inherited from IUxtCollectionObject Name TScriptInterface< IUxtPokeTarget > GetPokeTarget () TScriptInterface< IUxtFarTarget > GetFarTarget () Public Functions Documentation function AUxtPressableButtonActor AUxtPressableButtonActor() function OnConstruction virtual void OnConstruction( const FTransform & Transform ) override Reimplemented by : AUxtPressableToggleButtonActor::OnConstruction Creates (and initializes) the button hierarchy when properties are changed. function Tick virtual void Tick( float DeltaTime ) override Conditional tick method which occurs when a button needs to animate. function ConstructVisuals virtual void ConstructVisuals() Reimplemented by : AUxtPressableToggleButtonActor::ConstructVisuals Creates (and initializes) the button's visual hierarchy. function ConstructIcon virtual void ConstructIcon() Reimplemented by : AUxtPressableRadioButtonActor::ConstructIcon Creates (and initializes) the button's icon hierarchy. function ConstructLabel virtual void ConstructLabel() Creates (and initializes) the button's label hierarchy. function BeginPulse bool BeginPulse( const UUxtPointerComponent * Pointer ) Starts the pulse animation for a given pointer. function IsPulsing inline bool IsPulsing() const Returns true if a pulse is currently animating. function GetMillimeterSize inline FVector GetMillimeterSize() const Accessor to the button size in millimeters. function SetMillimeterSize void SetMillimeterSize( FVector Size ) Sets the button size in millimeters. function GetSize inline FVector GetSize() const Accessor to the button size in default units. function SetSize void SetSize( FVector Size ) Sets the button size in default units. function IsPlated inline bool IsPlated() const Accessor to if the button is plated. function SetIsPlated void SetIsPlated( bool IsPlated ) Enables or disabled the button back plate. function GetIconBrush inline const FUxtIconBrush & GetIconBrush() const Accessor to the button's icon brush. function SetIconBrush void SetIconBrush( const FUxtIconBrush & Brush ) Applies a new icon brush. function GetLabel inline const FText & GetLabel() const Accessor to the button's label. function SetLabel void SetLabel( const FText & NewLabel ) Applies a new label. function GetLabelTextBrush inline const FUxtTextBrush & GetLabelTextBrush() const Accessor to the button's label text brush. function SetLabelTextBrush void SetLabelTextBrush( const FUxtTextBrush & Brush ) Applies a new label text brush. function GetButtonBrush inline const FUxtButtonBrush & GetButtonBrush() const Accessor to the button's button brush. function SetButtonBrush void SetButtonBrush( const FUxtButtonBrush & Brush ) Applies a new button brush. Protected Functions Documentation function OnButtonPressed virtual void OnButtonPressed( UUxtPressableButtonComponent * Button, UUxtPointerComponent * Pointer ) Reimplemented by : AUxtPressableToggleButtonActor::OnButtonPressed Method which is invoked when the button is pressed. function OnButtonReleased virtual void OnButtonReleased( UUxtPressableButtonComponent * Button, UUxtPointerComponent * Pointer ) Reimplemented by : AUxtPressableToggleButtonActor::OnButtonReleased Method which is invoked when the button is released. function OnBeginFocus virtual void OnBeginFocus( UUxtPressableButtonComponent * Button, UUxtPointerComponent * Pointer, bool WasAlreadyFocused ) Method which is invoked when the button is focused on. function OnButtonEnabled virtual void OnButtonEnabled( UUxtPressableButtonComponent * Button ) Method which is invoked when the button is enabled. function OnButtonDisabled virtual void OnButtonDisabled( UUxtPressableButtonComponent * Button ) Method which is invoked when the button is disabled. function AnimatePulse virtual bool AnimatePulse( float DeltaTime ) Method to update the pulse animation and behavior. Returns true when the animation is complete. function AnimateFocus virtual bool AnimateFocus( float DeltaTime ) Method to update the focus animation and behavior. Returns true when the animation is complete. function CreateAndAttachComponent template <class T > inline T * CreateAndAttachComponent( FName Name, USceneComponent * Parent ) Utility method to allocate and add a scene component to the button. Protected Attributes Documentation variable MillimeterSize FVector MillimeterSize = FVector(16, 32, 32); The millimeter size of the button which dynamically resizes components within the button. This will preserve the actor scale. variable bIsPlated bool bIsPlated = true; True if the button should display a back plate. Collections of buttons should share a common back plate. variable Label FText Label = NSLOCTEXT(\"PressableButtonActor\", \"LabelDefault\", \"16x32x32mm\"); Localizable text for the label. variable LabelTextBrush FUxtTextBrush LabelTextBrush; Text settings for the label. variable ButtonBrush FUxtButtonBrush ButtonBrush; Structure which contains properties for the button's appearance and behavior. variable BackPlatePivotComponent USceneComponent * BackPlatePivotComponent = nullptr; Pivot component to support back plate compression visuals. variable BackPlateMeshComponent UUxtBackPlateComponent * BackPlateMeshComponent = nullptr; Back plate mesh component. variable FrontPlatePivotComponent USceneComponent * FrontPlatePivotComponent = nullptr; Pivot component to support front plate compression visuals. variable FrontPlateCenterComponent USceneComponent * FrontPlateCenterComponent = nullptr; The center of mass pivot of the front plate. variable FrontPlateMeshComponent UStaticMeshComponent * FrontPlateMeshComponent = nullptr; Front plate mesh component. variable IconComponent UTextRenderComponent * IconComponent = nullptr; Icon text component. variable LabelComponent UTextRenderComponent * LabelComponent = nullptr; Label text component. variable AudioComponent UAudioComponent * AudioComponent = nullptr; Audio playback component. variable PulseTimer float PulseTimer = -1; The current animation time of the pulse animation. variable PulseFadeTimer float PulseFadeTimer = -1; The current animation time of the pulse fade out animation. variable PrePulseMaterial UMaterialInterface * PrePulseMaterial = nullptr; Handle to the original (unaltered) material before pulsing. variable PulseMaterialInstance UMaterialInstanceDynamic * PulseMaterialInstance = nullptr; Handle to any dynamic material the pulse instantiates due to material parameter changes. variable MaterialIndex uint32 MaterialIndex = 0; The active material based on which pointer triggered the pulse. variable FocusTimer float FocusTimer = 0; The current animation time of the focus animation. variable bCanEditIconBrush bool bCanEditIconBrush = true; Allows derived classes to control if the icon brush can be edited. variable IconBrush UPROPERTY(EditAnywhere, Category=\"Uxt Pressable Button\", BlueprintGetter=\"GetIconBrush\", BlueprintSetter=\"SetIconBrush\", meta=(EditCondition=\"bCanEditIconBrush\")) FUxtIconBrush IconBrush; Structure which contains properties for the button's icon. Updated on 23 August 2021 at 12:07:13 Coordinated Universal Time"
  },
  "README.html": {
    "href": "README.html",
    "title": "What are the UX Tools? | UXT Documentation",
    "keywords": "What are the UX Tools? UX Tools for Unreal Engine is a UE game plugin with code, blueprints and example assets created to help you add in features commonly needed when you're developing UX for Mixed Reality applications. NOTE: All OpenXR devices should be supported, although only HoloLens 2 and Windows Mixed Reality VR devices have been tested. Getting started with UX Tools If you're new to MRTK or Mixed Reality development in Unreal, we recommend starting at the beginning of our Unreal development journey in the Microsoft Docs. The Unreal development journey is specifically tailored to walk new developers through the installation, core concepts, and usage of the UX Tools. CAUTION: The Unreal development journey currently uses UX Tools 0.12.x and Unreal 4.26.0+ . If you're already familiar with Mixed Reality development in Unreal, you can find the installation instructions for the UX Tools plugin here . Documentation Release Notes Welcome to UX Tools Feature Guides API Reference Required software Windows SDK 18362+ Unreal 4.27.0+ Visual Studio 2019 To build apps with MRTK-Unreal and UX Tools, you need the Windows 10 May 2019 Update SDK The Unreal Engine provides support for building Mixed Reality projects in Windows 10 Visual Studio is used for code editing UX building blocks Input Simulation Hand Interaction Button In-editor simulation of articulated hands and headset pose Support for far and near hand interactions with Unreal's primitives A 3d button specifically designed for hand interactions Slider Bounds Control Manipulators A 3d slider specifically designed for hand interactions A component that allows the user to transform an actor via affordances A component that allows an actor to be picked up by a user and then moved, rotated or scaled Hand Menu Near Menu UMG support Hand-attached UI great for frequently used functions Floating menu UI for near interactions A component that allows hand-driven interactions with Unreal's UMG widgets Tap to Place Follow Behavior Surface Magnetism A component that can be used to easily place primitive components against surfaces A component used to keep objects \"following\" the user by applying a set of constraints on the component's owner A component that allows an actor to stick to a surface UI Element Tooltips Touchable Volume A component that allows an actor's visibility to be controlled by its parent actor, allowing for easy construction of hierarchical UIs Annotation UI with a flexible anchor/pivot system, which can be used for labeling objects A component that allows the user to interact with an object by touching it Tools Utilities Graphics Plugin containing a handful of tools that augment the Unreal Engine editor Breakdown of shaders, materials, and graphics techniques used to render UX components Example maps If you want to explore the different UXT features you can try out the UX Tools Game project. You can download the pre-built UX Tools Game application and deploy it to a HoloLens device right away. Alternatively, you can build the latest version of UX Tools Game from source. It is also possible to try out the UX Tools examples inside your own project . Please note that the examples should be only used as a reference. Your final project should not have a dependency on the UX Tools Examples plugin. Packaged UX Tools Game example application We also provide the UX Tools Game pre-packaged for HoloLens 2, so you can try out the main UX Tools features directly on device easily. To use it: Obtain the packaged game from the latest release page (i.e. UXTGame-HoloLens.<version>.zip ) and unzip it to a local directory. Install it in the device via the Device Portal . Building the latest UX Tools Game example application For that you should: Clone this repository. Checkout the latest 'public/ version .x' branch. Bear in mind that this branch is alive. It's not a release, and will be updated regularly with potentially breaking changes . There will be a release tag (e.g. release/0.11.0 ) marked as such in GitHub. You can now open the UX Tools Game ( /UXToolsGame/UXToolsGame.uproject ) and explore individual example maps or open the Loader level to access some of the examples from a centralized hub. Importing examples to your project You can also copy the UX Tools Examples to a new project. This is a convenient way to use the provided sample scenes as a reference when building your own Mixed Reality experiences. You are free to reuse the sample UI elements but please ensure that your final project does not declare a dependency on the UX Tools Examples plugin. There are two ways in which you can add the example scenes to your project: You can obtain a pre-built version of the UX Tools Examples plugin from the latest GitHub release. You can download UXToolsExamples.<version>.zip from release attachments and extract its contents into the Plugins folder inside your Unreal Engine project. Alternatively, you can clone this repository and copy UXToolsGame/Plugins/UXToolsExamples to the Plugins subdirectory in your own project. If you want to use content from the examples plugin as part of your project, make sure to copy that content to your project's Content folder. Newer versions of the examples plugin may change or remove existing content without notice. Please note that you also need to add the UX Tools plugin to your project . Always use a UX Tools Plugin version that matches the version of the UX Tools Examples . Example content is only guaranteed to work with a single version of the UX Tools Plugin as releases can introduce breaking changes. Sample apps made with UX Tools This simple Chess App is the final result of following the getting started tutorial located on Microsoft's Mixed Reality docs. If you're new to Mixed Reality development and UX Tools, get started here: Build a chess app with MRTK UX Tools Kippy's Escape is an open-source HoloLens 2 sample app demonstrating how to use UX Tools components to create a fun and interactive Mixed Reality experience. Read the story behind the app: The Making of Kippy's Escape Videos A step-by-step tutorial on how to set up a dev environment for HoloLens 2 and a simple level from scratch Walk through how to get started developing for HoloLens 2 using Unreal Engine Webinar showing how to build a product configurator using UX Tools Feedback and contributions Contributions and feedback in the shape of bug reports, suggestions and feature requests are always welcome! However, we are not in a position to accept external contributions through pull requests at this time."
  },
  "api/_u_x_tools.html": {
    "href": "api/_u_x_tools.html",
    "title": "MRTK Unreal API Reference UXTools | UXT Documentation",
    "keywords": "UXTools class UXTools; Inheritance Inherits from ModuleRules Public Functions Name UXTools (ReadOnlyTargetRules Target) Public Functions Documentation function UXTools inline UXTools( ReadOnlyTargetRules Target ) Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_x_r_simulation_runtime_settings.html": {
    "href": "api/_u_x_r_simulation_runtime_settings.html",
    "title": "MRTK Unreal API Reference UXRSimulationRuntimeSettings | UXT Documentation",
    "keywords": "UXRSimulationRuntimeSettings Settings for XRSimulation . class UXRSimulationRuntimeSettings; Header #include <XRSimulationRuntimeSettings.h> Inheritance Inherits from UObject Public Functions Name UXRSimulationRuntimeSettings (const FObjectInitializer & ObjectInitializer) UXRSimulationRuntimeSettings * Get () Public Attributes Name bool bEnableSimulation bool bStartWithPositionalHeadTracking bool bStartWithHandsEnabled FVector DefaultHandPosition FVector ShoulderPosition FName DefaultHandPose FName PrimaryHandPose FName SecondaryHandPose FName MenuHandPose TArray< FXRSimulationHandPoseKeyMapping > HandPoseKeys FBox HandMovementBox FRotator HandRestOrientation TSoftObjectPtr< USkeletalMesh > HandMesh TSubclassOf< UAnimInstance > HandAnimInstance Public Functions Documentation function UXRSimulationRuntimeSettings UXRSimulationRuntimeSettings( const FObjectInitializer & ObjectInitializer ) function Get static UXRSimulationRuntimeSettings * Get() Public Attributes Documentation variable bEnableSimulation UPROPERTY(GlobalConfig, EditAnywhere, Category=\"XRSimulation\", Meta=(DisplayName=\"Enable Simulation\", Tooltip=\"Enable XR simulation by setting the simulated HMD to connected state.\")) bool bEnableSimulation; Enable XR simulation by setting the simulated HMD to connected state. variable bStartWithPositionalHeadTracking UPROPERTY(GlobalConfig, EditAnywhere, Category=\"XRSimulation\", Meta=(DisplayName=\"Start With Positional Head Tracking\", Tooltip=\"Enable positional head tracking on game start.\")) bool bStartWithPositionalHeadTracking; Enable positional head tracking on game start. variable bStartWithHandsEnabled UPROPERTY(GlobalConfig, EditAnywhere, Category=\"XRSimulation\", Meta=(DisplayName=\"Start With Hands Enabled\", Tooltip=\"If true, hands will start with tracking enabled.\")) bool bStartWithHandsEnabled; Start With Hands Enabled. variable DefaultHandPosition UPROPERTY(GlobalConfig, EditAnywhere, Category=\"XRSimulation\", Meta=(DisplayName=\"Default Hand Position\", Tooltip=\"Default position of the right hand in camera space.\")) FVector DefaultHandPosition; Default position of the right hand in camera space. variable ShoulderPosition UPROPERTY(GlobalConfig, EditAnywhere, Category=\"XRSimulation\", Meta=(DisplayName=\"Shoulder Position\", Tooltip=\"Position of the right shoulder in camera space.\")) FVector ShoulderPosition; Position of the right shoulder in camera space. variable DefaultHandPose UPROPERTY(GlobalConfig, EditAnywhere, Category=\"XRSimulation\", Meta=(DisplayName=\"Default Hand Pose\", Tooltip=\"Default pose when no button is pressed.\")) FName DefaultHandPose; Default pose when no button is pressed. variable PrimaryHandPose UPROPERTY(GlobalConfig, EditAnywhere, Category=\"XRSimulation\", Meta=(DisplayName=\"Primary Hand Pose\", Tooltip=\"Pose mapped to the primary pose action.\")) FName PrimaryHandPose; Pose mapped to the primary pose action. variable SecondaryHandPose UPROPERTY(GlobalConfig, EditAnywhere, Category=\"XRSimulation\", Meta=(DisplayName=\"Secondary Hand Pose\", Tooltip=\"Pose mapped to the secondary pose action.\")) FName SecondaryHandPose; Pose mapped to the secondary pose action. variable MenuHandPose UPROPERTY(GlobalConfig, EditAnywhere, Category=\"XRSimulation\", Meta=(DisplayName=\"Menu Hand Pose\", Tooltip=\"Pose mapped to the menu action.\")) FName MenuHandPose; Pose mapped to the menu action. variable HandPoseKeys UPROPERTY(GlobalConfig, EditAnywhere, Category=\"XRSimulation\", Meta=(DisplayName=\"Hand Pose Keys\", Tooltip=\"Input keys that are triggered by hand poses.\")) TArray< FXRSimulationHandPoseKeyMapping > HandPoseKeys; Input keys that are triggered by certain hand poses. variable HandMovementBox UPROPERTY(GlobalConfig, EditAnywhere, Category=\"XRSimulation\", Meta=(DisplayName=\"Hand Movement Range\", Tooltip=\"Allowed range of hand movement in camera space.\")) FBox HandMovementBox; Allowed range of hand movement in camera space. variable HandRestOrientation UPROPERTY(GlobalConfig, EditAnywhere, Category=\"XRSimulation\", Meta=(DisplayName=\"Hand Rest Orientation\", Tooltip=\"Orientation of the right hand in the default pose.\")) FRotator HandRestOrientation; Orientation of the right hand in the default pose. This is used to determine limits when rotating the hand. variable HandMesh UPROPERTY(GlobalConfig, EditAnywhere, Category=\"XRSimulation\", Meta=(DisplayName=\"Hand Mesh\", Tooltip=\"Skeletal mesh for animating hands.\")) TSoftObjectPtr< USkeletalMesh > HandMesh; Skeletal mesh for animating hands. The skeleton should contain bones that match the names in the EHandKeypoint enum. variable HandAnimInstance UPROPERTY(GlobalConfig, EditAnywhere, Category=\"XRSimulation\", Meta=(DisplayName=\"Hand Animation\", Tooltip=\"Animation instance used for animating hand meshes.\")) TSubclassOf< UAnimInstance > HandAnimInstance; Animation instance used for animating hand meshes. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_uxt_tap_to_place_component.html": {
    "href": "api/_u_uxt_tap_to_place_component.html",
    "title": "MRTK Unreal API Reference UUxtTapToPlaceComponent | UXT Documentation",
    "keywords": "UUxtTapToPlaceComponent Tap to place is a control used to transform objects at a distance. The control allows you to select an object you wish to place using far interaction. After that, the object will be locked to your gaze and will be placed against surfaces and other objects. Any subsequent far release will end placement, even if the pointer is not pointing at the object being placed. class UUxtTapToPlaceComponent; Header #include <Behaviors/UxtTapToPlaceComponent.h> Inheritance Inherits from UActorComponent, IUxtFarTarget , IUxtFarHandler Public Functions Name UUxtTapToPlaceComponent () USceneComponent * GetTargetComponent () const void SetTargetComponent (USceneComponent * Target) void StartPlacement () void EndPlacement () Protected Functions Name virtual void BeginPlay () override virtual void TickComponent (float DeltaTime, ELevelTick TickType, FActorComponentTickFunction * ThisTickFunction) override virtual void EndPlay (const EEndPlayReason::Type EndPlayReason) override virtual bool IsFarFocusable_Implementation (const UPrimitiveComponent * Primitive) const override virtual bool CanHandleFar_Implementation (UPrimitiveComponent * Primitive) const override virtual void OnEnterFarFocus_Implementation ( UUxtFarPointerComponent * Pointer) override virtual void OnUpdatedFarFocus_Implementation ( UUxtFarPointerComponent * Pointer) override virtual void OnExitFarFocus_Implementation ( UUxtFarPointerComponent * Pointer) override virtual void OnFarPressed_Implementation ( UUxtFarPointerComponent * Pointer) override virtual void OnFarReleased_Implementation ( UUxtFarPointerComponent * Pointer) override Public Attributes Name FUxtTapToPlaceBeginFocusDelegate OnBeginFocus FUxtTapToPlaceUpdateFocusDelegate OnUpdateFocus FUxtTapToPlaceEndFocusDelegate OnEndFocus FUxtTapToPlaceBeginPlacingDelegate OnBeginPlacing FUxtTapToPlaceEndPlacingDelegate OnEndPlacing TEnumAsByte< EUxtTapToPlaceOrientBehavior > OrientationType TEnumAsByte< EUxtTapToPlaceMode > PlacementType bool KeepOrientationVertical float HorizontalSurfaceThreshold float DefaultPlacementDistance float MaxRaycastDistance TEnumAsByte< ECollisionChannel > TraceChannel bool bInterpolatePose float LerpTime bool bUseDefaultSurfaceNormalOffset float SurfaceNormalOffset Additional inherited members Public Functions inherited from IUxtFarTarget Name bool IsFarFocusable (const UPrimitiveComponent * Primitive) const Public Functions inherited from IUxtFarHandler Name bool CanHandleFar (UPrimitiveComponent * Primitive) const void OnEnterFarFocus ( UUxtFarPointerComponent * Pointer) void OnUpdatedFarFocus ( UUxtFarPointerComponent * Pointer) void OnExitFarFocus ( UUxtFarPointerComponent * Pointer) void OnFarPressed ( UUxtFarPointerComponent * Pointer) void OnFarDragged ( UUxtFarPointerComponent * Pointer) void OnFarReleased ( UUxtFarPointerComponent * Pointer) Public Functions Documentation function UUxtTapToPlaceComponent UUxtTapToPlaceComponent() function GetTargetComponent USceneComponent * GetTargetComponent() const Get the component to transform. function SetTargetComponent void SetTargetComponent( USceneComponent * Target ) Set the component to transform. function StartPlacement void StartPlacement() Start placement of the target component. function EndPlacement void EndPlacement() End placement of the target component. Protected Functions Documentation function BeginPlay virtual void BeginPlay() override function TickComponent virtual void TickComponent( float DeltaTime, ELevelTick TickType, FActorComponentTickFunction * ThisTickFunction ) override function EndPlay virtual void EndPlay( const EEndPlayReason::Type EndPlayReason ) override function IsFarFocusable_Implementation virtual bool IsFarFocusable_Implementation( const UPrimitiveComponent * Primitive ) const override function CanHandleFar_Implementation virtual bool CanHandleFar_Implementation( UPrimitiveComponent * Primitive ) const override function OnEnterFarFocus_Implementation virtual void OnEnterFarFocus_Implementation( UUxtFarPointerComponent * Pointer ) override function OnUpdatedFarFocus_Implementation virtual void OnUpdatedFarFocus_Implementation( UUxtFarPointerComponent * Pointer ) override function OnExitFarFocus_Implementation virtual void OnExitFarFocus_Implementation( UUxtFarPointerComponent * Pointer ) override function OnFarPressed_Implementation virtual void OnFarPressed_Implementation( UUxtFarPointerComponent * Pointer ) override function OnFarReleased_Implementation virtual void OnFarReleased_Implementation( UUxtFarPointerComponent * Pointer ) override Public Attributes Documentation variable OnBeginFocus FUxtTapToPlaceBeginFocusDelegate OnBeginFocus; Event raised when a pointer starts focusing the placeable object. bWasAlreadyFocused indicates if the object was already focused by another pointer. variable OnUpdateFocus FUxtTapToPlaceUpdateFocusDelegate OnUpdateFocus; Event raised when a focusing pointer updates. variable OnEndFocus FUxtTapToPlaceEndFocusDelegate OnEndFocus; Event raised when a pointer ends focusing the placeable object. bIsStillFocused indicates if the object is still focused by another pointer. variable OnBeginPlacing FUxtTapToPlaceBeginPlacingDelegate OnBeginPlacing; Event raised when a placeable object is selected. variable OnEndPlacing FUxtTapToPlaceEndPlacingDelegate OnEndPlacing; Event raised when a placeable object is deselected and placed. variable OrientationType TEnumAsByte< EUxtTapToPlaceOrientBehavior > OrientationType = EUxtTapToPlaceOrientBehavior::AlignToSurface; How the object is oriented against hit surfaces. variable PlacementType TEnumAsByte< EUxtTapToPlaceMode > PlacementType = EUxtTapToPlaceMode::Head; How the target should be placed, using head or far pointer. variable KeepOrientationVertical bool KeepOrientationVertical = false; Whether the orientation of the object should pitch or roll. variable HorizontalSurfaceThreshold float HorizontalSurfaceThreshold = 10.0f; Angle in degrees at which a surface is considered horizontal in AlignToSurface mode. Slightly increasing this value helps avoid jitter resulting from noise in depth data but it can cause objects to lean sideways when moved over slightly inclined surfaces. variable DefaultPlacementDistance float DefaultPlacementDistance = 150; Distance to place the object at if no obstructing surface. variable MaxRaycastDistance float MaxRaycastDistance = 2000; Max distance to cast to when checking for obstructing surfaces. variable TraceChannel TEnumAsByte< ECollisionChannel > TraceChannel = ECollisionChannel::ECC_Visibility; Trace channel for raycast. variable bInterpolatePose bool bInterpolatePose = true; Option to ignore interpolation between follow poses variable LerpTime float LerpTime = 0.1f; Rate at which its owner will move toward default distance when angular leashing variable bUseDefaultSurfaceNormalOffset bool bUseDefaultSurfaceNormalOffset = true; When false, use SurfaceNormalOffset. Otherwise, automatically calculate the offset value. variable SurfaceNormalOffset UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Uxt Tap To Place\", meta=(DisplayAfter=\"bUseDefaultSurfaceNormalOffset\", EditCondition=\"!bUseDefaultSurfaceNormalOffset\")) float SurfaceNormalOffset = 0.0f; The distance between the pivot point of the object and the surface on which the object is being placed. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_uxt_rotation_axis_constraint.html": {
    "href": "api/_u_uxt_rotation_axis_constraint.html",
    "title": "MRTK Unreal API Reference UUxtRotationAxisConstraint | UXT Documentation",
    "keywords": "UUxtRotationAxisConstraint Component for limiting the rotation axes for Manipulator Usage: Attach to actor that the constraint should be applied to. class UUxtRotationAxisConstraint; Header #include <Interactions/Constraints/UxtRotationAxisConstraint.h> Inheritance Inherits from UUxtTransformConstraint , UActorComponent Public Functions Name virtual EUxtTransformMode GetConstraintType () const virtual void ApplyConstraint (FTransform & Transform) const Public Attributes Name EUxtAxis AllowedAxis bool bUseLocalSpaceForConstraint Additional inherited members Public Functions inherited from UUxtTransformConstraint Name virtual void virtual void Initialize (const FTransform & WorldPose) Public Attributes inherited from UUxtTransformConstraint Name int32 HandType int32 InteractionMode Protected Attributes inherited from UUxtTransformConstraint Name FTransform WorldPoseOnManipulationStart Public Functions Documentation function GetConstraintType virtual EUxtTransformMode GetConstraintType() const Reimplements : UUxtTransformConstraint::GetConstraintType Enabled manipulation modes. function ApplyConstraint virtual void ApplyConstraint( FTransform & Transform ) const Reimplements : UUxtTransformConstraint::ApplyConstraint Applies constraints to transforms during manipulation Public Attributes Documentation variable AllowedAxis EUxtAxis AllowedAxis = EUxtAxis::None; Defines which axis allows rotation. variable bUseLocalSpaceForConstraint bool bUseLocalSpaceForConstraint = false; Use local or global space for constraint calculations Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_uxt_poke_handler.html": {
    "href": "api/_u_uxt_poke_handler.html",
    "title": "MRTK Unreal API Reference UUxtPokeHandler | UXT Documentation",
    "keywords": "UUxtPokeHandler class UUxtPokeHandler; Inheritance Inherits from UInterface Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_uxt_pointer_component.html": {
    "href": "api/_u_uxt_pointer_component.html",
    "title": "MRTK Unreal API Reference UUxtPointerComponent | UXT Documentation",
    "keywords": "UUxtPointerComponent Base component for UXT pointers. class UUxtPointerComponent; Header #include <Input/UxtPointerComponent.h> Inheritance Inherits from UActorComponent Inherited by UUxtFarPointerComponent , UUxtNearPointerComponent Public Functions Name UUxtPointerComponent () =default bool GetFocusLocked () const virtual void SetFocusLocked (bool bLocked) Public Attributes Name UObject * GetFocusTarget FTransform GetCursorTransform EControllerHand Hand Protected Attributes Name bool bFocusLocked Public Functions Documentation function UUxtPointerComponent UUxtPointerComponent() =default function GetFocusLocked bool GetFocusLocked() const Get the lock state of the pointer. function SetFocusLocked virtual void SetFocusLocked( bool bLocked ) Reimplemented by : UUxtFarPointerComponent::SetFocusLocked Set the lock state of the pointer. Locked pointers don't update their hit, remaining focused on the primitive they were hitting until unlocked. Public Attributes Documentation variable GetFocusTarget UObject * GetFocusTarget; Get the target currently being focused by the pointer, if any. variable GetCursorTransform FTransform GetCursorTransform; Get the cursor transform. variable Hand EControllerHand Hand = EControllerHand::AnyHand; The hand to be used for targeting. TODO: replace with generic input device. Protected Attributes Documentation variable bFocusLocked bool bFocusLocked = false; The lock state of the pointer. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_uxt_icon_brush_editor_utility_widget.html": {
    "href": "api/_u_uxt_icon_brush_editor_utility_widget.html",
    "title": "MRTK Unreal API Reference UUxtIconBrushEditorUtilityWidget | UXT Documentation",
    "keywords": "UUxtIconBrushEditorUtilityWidget class UUxtIconBrushEditorUtilityWidget; Inheritance Inherits from UEditorUtilityWidget Public Functions Name void SetTabID (FName ID) void SetPropertyHandle (TSharedRef< IPropertyHandle > InPropertyHandle) bool HasValidPropertyHandle () const Protected Functions Name void OnPropertyHandleChanged () UFont * GetIconBrushFont () const bool SetIconBrushFont (const UFont * Font) bool GetIconBrushString (FString & IconString) const bool SetIconBrushString (const FString & IconString) Protected Attributes Name FName TabID Public Functions Documentation function SetTabID inline void SetTabID( FName ID ) Sets the unique identifier for the tab this EditorUtilityWidget was spawned into. function SetPropertyHandle inline void SetPropertyHandle( TSharedRef< IPropertyHandle > InPropertyHandle ) Sets the property handle which will be queried and altered for FUxtIconBrush properties. function HasValidPropertyHandle inline bool HasValidPropertyHandle() const Returns true if a non-null PropertyHandle is set. Protected Functions Documentation function OnPropertyHandleChanged void OnPropertyHandleChanged() Event which triggers when the PropertyHandle is changed. function GetIconBrushFont UFont * GetIconBrushFont() const Gets the font associated with the UUxtIconBrush. function SetIconBrushFont bool SetIconBrushFont( const UFont * Font ) Sets the font associated with the UUxtIconBrush. function GetIconBrushString bool GetIconBrushString( FString & IconString ) const Gets the string associated with the UUxtIconBrush. function SetIconBrushString bool SetIconBrushString( const FString & IconString ) Sets the string associated with the UUxtIconBrush. Protected Attributes Documentation variable TabID FName TabID; Gets unique identifier for the tab this EditorUtilityWidget was spawned into. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "Docs/WelcomeToUXTools.html": {
    "href": "Docs/WelcomeToUXTools.html",
    "title": "Welcome to UX Tools | UXT Documentation",
    "keywords": "Welcome to UX Tools UX Tools is the first MRTK-Unreal component to be released and is currently only supported on HoloLens 2. The component plugin includes code, blueprints, and example assets of common UX features for input simulation, hand interaction actors, press-able button components, manipulator components and follow behavior components. Development If you're new to MRTK or Mixed Reality development in Unreal, we recommend starting at the beginning of our Unreal development journey , which was specifically created to walk you through installation, core concepts, and usage. Caution The Unreal development journey currently uses UX Tools 0.12.x and Unreal 4.27.0 or later . If you're working with other configurations it's still recommended that you start there, but you can also refer to the installation instructions . Documentation Versioning We have complete documentation for all release versions, but we recommend using the highest numbered public release branch for stability. Versions can be selected from the dropdown at the top-right of the screen: Getting help If you run into issues caused by UX Tools or have questions about how to do something, please file an issue on the GitHub repo."
  },
  "Docs/Utilities.html": {
    "href": "Docs/Utilities.html",
    "title": "Utilities | UXT Documentation",
    "keywords": "Utilities UX Tools contains a handful of utilities that augment the Unreal Engine editor. Editor Utility Blueprints Editor utilities can be authored using scripted actions . Scripted actions are accessed by right-clicking actors or assets. Align Actors The Align Actors action aides in the layout of UX controls, or any actor type. To access the action select multiple actors you wish to align. Then right-click in a viewport or outliner window. Finally, select Scripted Actions > Align Actors . A properties window will pop up prompting for alignment settings. Note, the first actor selected is used as the alignment origin. The actor's bounds are used to ensure actors don't interpenetrate when aligned. Editor Utility Widgets Editor utility widgets can be used to modify the User Interface (UI) of the Unreal Editor. Icon Brush Editor The Icon Brush Editor editor utility widget aides in editing a UxtIconBrush by visually searching though the characters in a UFont . To open the editor click the \"Open Icon Brush Editor\" button from any UxtIconBrush details panel. Once opened, the editor should display a window similar to the one below: Selecting different icons, outlined in green, will apply the icon selection to the current UxtIconBrush . The Icon Brush Editor comes in handy when selecting new icons for controls. The BP_ButtonHoloLens2 blueprint makes the viewer accessible via the top level details panel :"
  },
  "Docs/UIElements.html": {
    "href": "Docs/UIElements.html",
    "title": "UI Elements | UXT Documentation",
    "keywords": "UI Elements UI elements give the user a way to show and hide groups of UI functionality. UI elements are scene components that can be attached to any actor to allow its visibility to be controlled by its parent element. Parent-child relationships are managed via actor attachments. If the parent is hidden, all of its children will be hidden. It is recommended to have the UxtUIElementComponent as the root component as the actor as this allows it to automatically update if the actor is attached to a new parent actor. If it is not the root component, RefreshUIElement() will need to be called manually after attaching a new parent actor. Note : Manually changing actor visibility will not affect child UI elements and may lead to unwanted behavior. Built-in UI Elements A number of the built in components are UI elements by default, but any actor can be given UI element functionality by attaching a UxtUIElementComponent . UxtPressableButtonComponent UxtPinchSliderComponent UxtTouchableVolumeComponent"
  },
  "Docs/TransformConstraints.html": {
    "href": "Docs/TransformConstraints.html",
    "title": "Transform Constraints | UXT Documentation",
    "keywords": "Transform Constraints UXTools provides a mechanism to implement and apply transform constraints to actors during manipulation. All you need to do is inherit from UUxtManipulatorComponent , as UUxtGenericManipulatorComponent and UUxtBoundsControlComponent for example. Usage In order to use constraints: Add any desired UxtTransformConstraint -derived components to the actor. Add any UUxtManipulatorComponent -derived components to the actor, such as UUxtGenericManipulatorComponent and UUxtBoundsControlComponent . Each UUxtManipulatorComponent will apply all constraint components in the actor if bAutoDetectConstraints is set to true . Otherwise, you can fill the SelectedConstraints array to choose which constraints you'd like that component to apply during its interaction. Implicit scale There's an implicit constraint which doesn't inherit from UxtTransformConstraint and is applied by all UUxtManipulatorComponent s. The reason for that is preventing their scales from reaching 0 or even negative values. Besides that, UUxtBoundsControlComponent avoids having interaction issues with its handles when the scale is too small. The MinScale and MaxScale properties give you flexibility to configure this behavior within reasonable values, clamped to prevent the unexpected results previously mentioned. Use bRelativeToInitialScale to configure whether the limits are relative to the scale at interaction start ( true ) or absolute ( false ). In the following example, MinScale is set to 0.3 : Built-in constraint components There are a few built-in constraint components, which will hopefully save you from having to write your own. UxtFaceUserConstraint Makes the actor face the camera while interacting with it. Set bFaceAway to true to make the object face away from the camera. UxtFixedDistanceConstraint Makes the actor stay at a fixed distance from the camera. With Without UxtFixedRotationToUserConstraint Makes the actor maintain the same rotation (relative to the user) that it had when the interaction started. Set bExcludeRoll to false to allow rolling of the actor. UxtFixedRotationToWorldConstraint Makes the actor maintain the same rotation (relative to the world) that it had when the interaction started. UxtMaintainApparentSizeConstraint Makes the actor maintain the apparent size (relative to the user) that it had when the interaction started. UxtMoveAxisConstraint Limits movement on specific axes. Use the ConstraintOnMovement bit mask of EUxtAxisFlags . (Example limiting the movement along the X and Z axes) UxtRotationAxisConstraint Limits rotation on specific axes. Use the ConstraintOnRotation bit mask of EUxtAxisFlags . (Example limiting the rotation around the X and Y axes) Adding more constraint components If none of the Built-in constraint components suits your needs, you can add more by simply creating a new UCLASS that inherits from UxtTransformConstraint . Then, provide implementations for GetConstraintType , ApplyConstraint and (optionally) Initialize . In this case, please feel free to take a look at our contributing docs and make a suggestion!"
  },
  "Docs/TapToPlaceComponent.html": {
    "href": "Docs/TapToPlaceComponent.html",
    "title": "Tap To Place | UXT Documentation",
    "keywords": "Tap To Place The UXT Tap To Place component is a far interaction component used to place objects against surfaces. It is especially useful for placing objects against the spacial mesh. You can initiate the tap to place behaviour by selecting the target object with far interaction. The object will then track either the head or the hand, moving along hit surfaces until it the user ends placement by making any other far tap. To enable real world collision generation, the following values should be enabled in ARSessionConfig > ARSettings > World Mapping : [x] Generate Mesh Data from Tracked Geometry [x] Generate Collision for Mesh Data You can also add a World Override blueprint in Blueprint > World Override (see TapToPlaceExample for reference). Usage Add a primitive component to your actor/actor blueprint. Also add a UxtTapToPlaceComponent. Set the Target Component property to reference the primitive component you have already added. You should now be able to select the primitive with far interaction to initiate placement. Events OnBeginFocus : Event raised when the far pointer starts focusing the tap to place target primitive. OnUpdateFocus : Event raised when the focusing far pointer updates. OnEndFocus : Event raised when the far pointer stops focusing the tap to place target primitive. OnBeginPlacing : Event raised when a far pointer selects the tap to place target primitive and placement begins. OnEndPlacing : Event raised when any far pointer is pressed during placement. Properties Orientation Type : This property provides options for how the target component will be placed against hit surfaces. If Align to Camera is selected, the target component will always face the camera. If Align To Surface is selected, the target component will align with the normal of the surface the component is being placed against. If Maintain Orientation is selected, the original orientation of the target component will be preserved while the object is being placed. Placement Type : This property provides options for what the target component will track during placement. If Head is selected, the component will be placed at the centre of the users vision and will move as the user moves their hand. If Hand is selected, the component will be placed at the end of the hand Far Beam and will move as the user moves their hand. Keep Orientation Vertical : If true, the object will remain upright, even if being placed against surfaces that are not upright. Horizontal Surface Threshold : Objects using Align To Surface mode face towards or away from the camera when moved over a flat surface (e.g. on the floor or on the ceiling). This setting allows to specify the angle at which the object being placed stops rotating with the camera and aligns its Up vector with the surface (i.e. the angle at which the surface is still considered to be horizontal for the purposes of setting the orientation of the object). Increasing this threshold helps to eliminate jitter resulting from inaccuracies in the reconstructed depth mesh. However, if the value is too high, it can cause the object to lean sideways when moved over slightly inclined surfaces. Therefore, the value should be kept as low as possible. The HorizontalSurfaceThreshold is expressed as the angle in degrees that a surface can deviate from horizontal plane and by default is set to 10 degrees. Default Placement Distance : During placement, if there is no surface to place against, the target component will be placed at this distance from the head/hand. Max Raycast Distance : The maximum distance to ray cast to check if there are surfaces to place against. Trace Channel : The trace channel used for the ray cast. Interpolate Pose : If true, the object will interpolate smoothly between poses. Lerp Time : The rate at which the object will interpolate between target poses if Interpolate Pose is true. Use Default Surface Normal Offset : If true, the object will be aligned with the surface on which it is being placed and the value SurfaceNormalOffset will be calculated automatically. Setting this property to false allows to provide a custom value for SurfaceNormalOffset , e.g. in order to maintain a fixed distance between the surface and the object. Surface Normal Offset : The distance between the pivot point of the object and the surface on which the object is being placed. The offset should be measured along the X axis in the positive direction. This property is only applied to an object if UseDefaultSurfaceNormalOffset is false. Target Component : A reference to the primitive component that is transformed by the tap to place component. Selecting this primitive with far interaction will initiate placement."
  },
  "Docs/SurfaceMagnetism.html": {
    "href": "Docs/SurfaceMagnetism.html",
    "title": "Surface Magnetism | UXT Documentation",
    "keywords": "Surface Magnetism The surface magnetism component allows the user to interact with the component and stick the containing actor to a surface (either in game or to real world walls). Interaction is done via far interaction only. To enable real world collision generation, the following values should be enabled in ARSessionConfig > ARSettings > World Mapping : [x] Generate Mesh Data from Tracked Geometry [x] Generate Collision for Mesh Data Here are the events that you can use to hook up to your application logic: OnMagnetismStarted : This event is called when the user interacts with the component. OnMagnetismEnded : This event is called when the user stops interacting with the component or, if movement is smoothed, when the component comes to a stop after interaction ends. Instance Editable Properties Trace Distance Maximum length of the trace for a surface to stick to. Smooth position If true , the target will interpolate between current position and hit location. If false , the target will snap instantly to the hit location. Position Interp Value If SmoothPosition is true , this is the position's interpolation speed (using standard UE4 Interp values). Smooth Rotation If true , the target will interpolate between current rotation and hit normal. If false , the target will snap instantly to the hit normal. Rotation Interp Value If SmoothRotation is true , this is the rotation's interpolation speed (using standard UE4 Interp values) Impact Normal Offset Distance offset from the hit point to place the target at, along the hit normal. Trace Ray Offset Distance offset from the hit point to place the target at, along the traced ray (i.e. back towards the user). Trace Channel The channel that is traced for surfaces to stick to. Keep Orientation Vertical If true , pitch and roll are omitted."
  },
  "Docs/ReleaseNotes.html": {
    "href": "Docs/ReleaseNotes.html",
    "title": "Release Notes | UXT Documentation",
    "keywords": "UX Tools 0.12.0 release notes What's new Cross-platform support for XR devices Manipulator improvements Bounds Control improvements Tap to Place improvements Touchable Volume improvements Breaking changes UxtHandTrackingFunctionLibrary removed UxtMathUtilsFunctionLibrary's API update UxtOneHandedRotationMode UxtTransformConstraint UxtTouchableVolumeComponent's API update UxtRotationAxisConstraint UxtMinMaxScaleConstraint Renamed mesh for Bounds Control's face handles UxtBasePressableButtonActor button component access IUxtHandTracker ControllerOrientation property removed from UUxtFarPointerComponent Updated smoothing factors for Manipulator and Pinch Slider Full change list This release of the UX Tools has been tested on HoloLens 2 and Windows Mixed Reality VR but should work on all XR devices supported by Unreal Engine via OpenXR : HoloLens 2 Windows Mixed Reality VR Oculus Steam VR Unreal 4.27 required. What's new These are some of this release's highlights. For a more comprehensive list of changes see the full change list . Cross-platform support for XR devices UX Tools now offers cross-platform support across XR devices! UXT 0.12.0 leverages the common AR and VR interfaces added in Unreal Engine 4.26 to keep application code platform agnostic. This means UX Tools is no longer tied to the Windows Mixed Reality plugin and HoloLens 2 device. UXT 0.12.0 supports OpenXR and can be used with the Microsoft OpenXR plugin for full support of HoloLens 2 and Windows Mixed Reality VR headsets. Note that while we have only tested UXT 0.12.0 on Microsoft's mixed reality headsets, we expect UXT to work on all devices that support OpenXR. Manipulator improvements UI to add constraints to Generic Manipulator and Bounds Control The generic manipulator and bounds control components now provide a constraint picker to allow for fine grained control of what constraints are applied by the manipulator. The constraint picker can be used to add constraints to actor instances and blueprints. The UI automatically populates with classes inheriting from UxtTransformConstraint so user defined constraints can also be added using this dialog box. Rotation Axis Constraint improvements The UUxtRotationAxisConstraint is now based on quaternions instead of Euler angles. By using swing-twist decomposition, we got rid of rotation errors and undesired flips. Besides that, ConstraintOnRotation has been replaced by AllowedAxis in order to better convey the meaning of the constraint and prevent unexpected configurations. If only 1 axis was constrained (which is a configuration previously allowed), combinations of rotations around the other two axes might end up in a rotation that you wouldn't expect to be allowed. Thanks to these changes, UUxtBoundsControlComponent is now able to interact appropriately with this constraint. In the following example, you can see how the constraint works when it only allows rotation around the Z axis: | bUseLocalSpaceForConstraint == false | bUseLocalSpaceForConstraint == true | | --- | --- | | | | (NOTE: debug axes aligned to world's have been added for reference) Built-in scale constraint Instead of relying on an external component (which is easier to forget about or misconfigure), potentially leading to undesired effects such as actor mirroring, all classes inheriting from UUxtManipulatorComponent (which includes UUxtBoundsControlComponent and UUxtGenericManipulatorComponent ) have now an implicitly applied scale constraint, configurable via editor. See TransformConstraints.md for details. Fixed slowdown when running below 60 FPS The calculation of smoothed movement for the manipulator and pinch slider components was using an incorrect formula, leading to slower manipulation when the frame rate drops. See the breaking changes section for necessary action: Updated smoothing factors for Manipulator and Pinch Slider . Bounds Control improvements Bounds override UUxtBoundsControlComponent now has a BoundsOverride property, which (if set) will make the bounds control box and affordances display around that UPrimitiveComponent instead of around the whole actor. Please note that this setup will still modify the actor's root transform. Unset Set Improved interaction with Tap to Place Thanks to the new BoundsOverride property in UUxtBoundsControlComponent and other few changes, this component and UUxtTapToPlaceComponent can now work together. Automatic scaling of affordances with distance to camera In order to match the HoloLens 2 shell's behavior, affordances are now scaled up, based on the distance to the hologram they are surrounding. This makes it easier to interact with them when the actors are big and far away. Improvements to face affordances UUxtBoundsControlComponent::TransformTarget 's handling of the EUxtAffordanceAction::Translate action has been fixed. The face mesh ( SM_BoundingBox_FaceHandle.uasset ) now has collisions, so you can interact with them. A new UUxtBoundsControlConfig data asset (named BoundsControlDefaultWithFaces.uasset ) has been added, with face affordances configured by default. BoundsControlExamples.umap has a new coffee cup instance featuring face handles. The default mesh used for face handles has been renamed to SM_BoundingBox_TranslateHandle.uasset , so it better matches its scale/rotate counterparts. The old placeholder mesh is also replaced by the appropriate mesh: Old mesh New mesh Tap to Place improvements Allow keeping the original orientation of the object being placed Added MaintainOrientation mode to UxtTapToPlaceComponent to allow preserving the original orientation of the object while it is being repositioned. Customizable surface normal offset The TapToPlace component now allows you to specify a custom offset between the object being placed and the surface it is being placed on. This can be achieved by setting bUseDefaultSurfaceNormalOffset to false and providing a custom offset in SurfaceNormalOffset property. The offset is measured from the pivot point of the object along the X axis (towards the positive direction as this is the side which is aligned with the surface). If bUseDefaultSurfaceNormalOffset is set to true, the object will be aligned with the surface on which it is being placed and the value SurfaceNormalOffset will be calculated automatically. The offset will now be correct also for objects that use a pivot point which is not located in the centre of the bounding box. Allow Scene Components as target UUxtTapToPlaceComponent allows assigning USceneComponent as the TargetComponent (previously UPrimitiveComponent was required). This allows adding TapToPlace behaviour to any hierarchy of actor components and makes the experience consistent with the other UX Tools components (e.g. UxtGenericManipulator ). Touchable Volume improvements An InteractionMode property has been added to allow limiting the interactions to only near or far pointers. The bLockFocus flag has been added to allow the focus locking of pointers be disabled. Breaking changes UxtHandTrackingFunctionLibrary removed This function library was just a thin wrapper around the IUxtHandTracker interface. It has been removed to make code less redundant. The IUxtHandTracker singleton getter returns a reference instead of a pointer for simpler access. If the function library was used in blueprints, the equivalent functions of the XR tracking system should be used, such as Get Motion Controller Data . UxtMathUtilsFunctionLibrary's API update CalculateNestedActorBoundsInGivenSpace and CalculateNestedActorBoundsInLocalSpace have been removed in favor of a simpler and more flexible CalculateNestedBoundsInGivenSpace . Hopefully, switching to the new function is not troublesome, but here are some guidelines: The first parameter is now a USceneComponent instead of an AActor . Simply add a GetRootComponent() to the previously used parameter. If you were using the InLocalSpace variant, now you need to pass in the local space explicitly. On the same component that you're now passing as first parameter (see previous point), simply use GetComponentTransform().Inverse() . The Ignore parameter is now a TArrayView<const USceneComponent* const> , instead of a single component. Typically, enclosing the previously used parameter in curly braces {} will suffice, thanks to the TArrayView's initializer list constructor . The MakeArrayView overload list and MoveTemp utilities might come in handy, too. UxtOneHandedRotationMode MaintainOriginalRotation , MaintainOriginalRotation , MaintainOriginalRotation , MaintainOriginalRotation and MaintainOriginalRotation have been removed in favor of using transform constraints . UxtTransformConstraint The TargetComponent property has been removed in favor of using WorldPoseOnManipulationStart . UxtTouchableVolumeComponent's API update The OnBeginFocus , OnUpdateFocus , OnEndFocus events now pass the pointer as a UUxtPointerComponent instead of a UObject . The OnBeginPoke , OnUpdatePoke , OnEndPoke events now pass the pointer as a UUxtPointerComponent instead of a UUxtNearPointerComponent . UxtRotationAxisConstraint As mentioned in the UxtRotationAxisConstraint's improvement section, ConstraintOnRotation has been replaced by AllowedAxis , becoming a single EUxtAxis instead of a bit mask. Any existing instances of this constraint will take the value EUxtAxis::None by default (preventing any rotations at all), so you need to reconfigure said instances by selecting the axis you want to allow rotation around. In the event that you had any UUxtRotationAxisConstraint instanced from C++ code, please remember to check for any assignments of ConstraintOnRotation , such as RotationConstraint->ConstraintOnRotation = static_cast<uint32>(EUxtAxisFlags::X | EUxtAxisFlags::Y | EUxtAxisFlags::Z); and replace them by the corresponding RotationConstraint->AllowedAxis = EUxtAxis::None; UxtMinMaxScaleConstraint As this component has been removed and its functionality is now embedded inside UUxtManipulatorComponent , you need to revisit any instances of this constraint that you had. All you need to do is copy the MinScale , MaxScale and bRelativeToInitialScale values over to all applicable components in the actor. Please remember that, if you have UUxtBoundsControlComponent and UUxtGenericManipulatorComponent in the same actor, you now need to configure both of them separately. Renamed mesh for Bounds Control's face handles The asset has been renamed to better match its rotate/scale counterparts, so you need to replace any references to SM_BoundingBox_FaceHandle.uasset by SM_BoundingBox_TranslateHandle.uasset . UxtBasePressableButtonActor button component access The UxtBasePressableButtonActor 's ButtonComponent property has been changed from BlueprintReadWrite to BlueprintReadOnly because changing the button component is an unsupported code path. IUxtHandTracker The EUxtHandJoint enum has been replaced by EHandKeypoint, which is part of the UE4 engine ( HeadMountedDisplayTypes.h ). This affects the \"Joint\" parameter in the IUxtHandTracker::GetJointState function. ControllerOrientation property removed from UUxtFarPointerComponent This property was only caching the wrist orientation. The far pointer is now using the Grip pose for the controller orientation, which can be acquired directly through the IUxtHandTracker interface (see IUxtHandTracker::GetGripPose ). Updated smoothing factors for Manipulator and Pinch Slider The Smoothing factors in the UUxtGenericManipulatorComponent and UUxtPinchSliderComponent have been replaced by LerpTime properties, similar to UUxtFollowComponent , UUxtHandConstraintComponent , and UUxtTapToPlaceComponent . If your manipulator or slider used a non-default smoothing factor you may want to adjust the new LerpTime property to achieve matching behavior. If necessary you can calculate the exact equivalent LerpTime at 60 FPS using the formula below: LerpTime = -1 / (60 * log(1 - exp(-Smoothing / 60))) where log is the natural logarithm. Here are a few values for comparison: | Smoothing | LerpTime | |---|---| |0|0| |0.1|0.0026| |1|0.0041| |10|0.0089| |100|0.080| Full change list Commit Description 5e5d84b8e Update README and release notes for 0.12.x 5c48e6f6b Fix handmenu scale warning d3e820019 Enable XRSimulation to be built on Hololens and Android 9c5858950 Workaround for resetting on tracking loss. 0dd33d5fd Update to 4.26.2 9b69367d3 Apply workaround for WMR grip pose not applying world scale b6a01919d Adding option (default) to not instance tick marks on sliders. 964b13b51 Mention the broken smoothing at low FPS for manipulator and pinch slider as a known issue b46c04485 Restrict Bounds Control's grab target component to one-handed 3c8141568 Fix BoundsControl's release notes 594109019 Fix for Tooltip Desc Grammer 7ee136cf8 Feature panel button for toggling AR surface mesh display 8560ddaeb Ensure LerpAmount in TapToPlace does not exceed 1 4fa650614 Minor change to to the hand's fresnel material. 17786d51a Fix near interaction in scenes with \"Collision for Mesh Data\" enabled b8d47e5ac Fix TapToPlace object orientation dfb8e77a0 Stabilize the grip pose from input sim to avoid movement when grabbing objects. b967855a6 Fix manipulation started notification PR 59fbf430f Add AffordanceConfig assets without the constrained affordances b77219caf Add manipulation started notification 239a98deb Adding extra checks to FUXToolsEditorModule::ShutdownModule. ffb88ce24 Use lower case for anchors in docs. 12b9709d6 Move XRSimulation parts out of the UxtDefaultHandTrackerSubsystem. 59318194c Added 'OnValueUpdated' event to slider actor 8b19a2562 Add breaking change note about the use of input sim in the WMR plugin. 1808bb3ef Button example map had stale menu BP property override, needed BP recompile. 5a7a1f914 Increment plugin versions to 0.12.x b6955100c Replace face handle meshes 336bb8cf1 Fix clang formatting error. ad0a4a433 Replace WMR hand tracking with new XRTrackingSystem APIs 2b4829a52 Adding new banners from Emily. b32ba809d Changing the AUxtBasePressableButtonActor button component to readonly. 63b22b93f Enable text input in Widgets example scene 74ba46a0e Make MinMaxScaleConstraint implicit 61b7eca05 Text Formatting Docs 1bd66c704 Add checks when calling GetOwner to handle cases where a component owner is null bd6d6cf5c Added videos section to README with link to Inside Unreal talk 36185ada3 Fix BoundsControl's face affordances 44249b2cd Rewrite RotationAxisConstraint 44524b64c RecoverySpeed Units Documentation 3d484a777 Generate API Reference as markdown b45137eae Fix the map reference for the loader map in packaging settings. a5f2950cb Remove location offsets from Slate2D's bounded meshes 8226b7483 Add push to GitHub at the end of CI pipeline 8d874b2a0 Fix-up example assets to allow UXToolsGame enable Blueprint nativization bdd0e3721 Increasing the Proximity_Far_Radius from 16 to 40 b5e418b14 Spline jitter fix: adding billboarding pivot to tooltip actor a90c8d8cc Update Unreal Editor version to 4.26.1 6ce10682e Scale BoundsControl's affordances 4c9ab1fe4 Manipulation constraint picker a826eb1fb TouchableVolume improvements 050be5bcb Update Release Notes b10c2af97 Add BoundsOverride to BoundsControl 43acdf9b3 Remove the UxtHandTrackingFunctionLibrary 2d730a801 Add MaintainOrientation mode to TapToPlace component ce09134f2 Change MinMaxScaleConstraint to be relative to initial scale by default 2ea6499ac Pipeline for generating shipping builds of UXToolsGame 35e4d68e9 Add Button and Follow component automation test 471fe1bc5 Ensuring packaged builds are in the shipping config. bb6008e3c Reposition BP for example levels"
  },
  "Docs/PressableButton.html": {
    "href": "Docs/PressableButton.html",
    "title": "Pressable Button | UXT Documentation",
    "keywords": "Pressable button A button gives the user a way to trigger an immediate action. It is one of the most foundational components in mixed reality. Creating a pressable button from scratch The first step of creating a button from scratch is adding the UxtPressableButtonComponent to an actor blueprint. This is a low level component that drives button logic. This is followed by creating some moving visuals. Moving visuals are essential for pressable button interaction as they're visualizing pressed and released state. Add a StaticMeshComponent (or any SceneComponent ) to the actor and set the visuals property of the UxtPressableButtonComponent to reference this new mesh. Also ensure that the local positive x-axis of this mesh component points in the direction the button is expected to be pushed. Any component children of this mesh will move along with it as the button is pushed. It is important to note that the UxtPressableButtonComponent uses the component assigned to the visuals property to construct a BoxComponent that is used for poke and far interactions. The UxtPressableButtonComponent uses the the visuals property component bounds, and child bounds, to create this box collider. If the button is configured correctly, the button should now react to presses during play. As well as this, the button planes visualizations will be visible in editor while UxtPressableButtonComponent is selected. These planes represent some of the properties of the button. The solid white plane is the front plane. if the finger crosses this plane from the front, the button will be pushed . The front plane aligns with the front face of the BoxComponent discussed earlier The dashed light grey plane is drawn so that it is PressedDistance away from the front plane. If the finger crosses this plane from the front, the button will be pressed . There is more information about this under Pressed Fraction . The solid dark grey plane is drawn so that it is MaxPushDistance away from the front plane. The moving visuals will not move beyond this plane. There is more information about this under Max Push Distance . A distinction is being made here between push and press . A button can be pushed without being pressed. A button will only fire OnButtonPressed once it has been pushed beyond the PressedDistance. If a button needs to respond to push, OnBeginPoke and OnEndPoke can be used. Some buttons may also have static visuals. Static visuals can be created by adding another mesh component, making sure that it is not a child of the moving visuals. Configuring the component hierarchy so that the buttons work should be simple. The only things that are essential are that the pressable button component is not a child of the moving visuals. Also ensure that only visuals that should move with press are children of the moving visuals. Here are some examples of configurations of the button hierarchy that will work: Although this button is behaving correctly, it's not doing anything useful. The pressable button events can be used in a blueprint in order to respond to press/release. There are a few useful events that can be used: OnBeginFocus : This event is called when a pointer starts giving focus to the button. OnUpdateFocus : This event is called for every tick that the button has focus from a pointer. A button will hold focus while it is being pressed. OnEndFocus : This event is called when a pointer stops giving focus to the button. OnBeginPoke : This event is called when a near pointer starts pushing the button. See description above for the difference between a push and a press. OnUpdatePoke : This event is called tick that a pointer is pushing the button. See description above for the difference between a push and a press. OnEndPoke : This event is called when a near pointer stops pushing the button. See description above for the difference between a push and a press. OnButtonPressed : Called when the current push distance of the button exceeds the pressed fraction . OnButtonReleased : Called when the current push distance of the button subceeds the released fraction . OnButtonEnabled : Called when the button is enabled. OnButtonDisabled : Called when the button is disabled. This will not raise a release event if the button is disabled while pressed. Here are some examples of these events in use in the SimpleButton blueprint sample provided with UXT: Button Actors To provide HoloLens 2 style button visuals and behaviors UX Tools contains an actor named named UxtPressableButtonActor . The UxtPressableButtonActor automatically constructs a customizable button front plate, back plate, icon, and label hierarchy. The button visuals are tied to custom shaders and materials, please see the graphics documentation for more information. Visual Configuration To aid in the time it takes to configure buttons, a handful of actor properties are exposed which react to changes made during edit time and runtime. For example, changing the Millimeter Size from (16, 32, 32) to (16, 64, 32) will automatically scale the button's front and back plates to create a wide button without effecting the button icon or label. Changing the Icon to a new unicode code point will generate the appropriate unicode character to index into a font containing the icon (e.g. Font_SegoeMDL2_Regular_42 ). Note, the font atlas will need to be updated to support any new icons which are not already present within the font atlas. Changing the Label will update the underlying text render component. Toggling the IsPlated checkbox will hide the back plate. Hiding the back plate is recommended when buttons are close enough to share a common back plate. To add a new icon, open the icon font, such as Font_SegoeMDL2_Regular_42 . Under \"Import Options\" select the \"Chars\" property. Paste your icon's unicode character into the \"Chars\" property and save the font. Finally reimport the font uasset. Scripting Logic Any blueprints which use UxtPressableButtonActor as a parent class (or any of its derived classes) can easily respond to button events by selecting the \"Button Component\" and binding to the available button events. In this case \"Hello\" will be printed when the button is pressed: If a blueprint needs to respond to a button event externally, such as a button child actor. This can be achieved with the below graph in the case of a child actor component: Acquire the child actor from the \"Child Button\" child actor component Get the \"Button Component\" from the child actor Bind the \"On Button Pressed\" event to a custom event In this case \"Hello\" will be printed when the button is pressed Button Actor Variants A handful of derived UxtPressableButtonActors exist to exhibit behavior not found on a typical pressable button. Non-typical behavior includes a binary button state achieved with the UUxtToggleGroup . To control groups of mutually exclusive UxtToggleStates like radio buttons . To make a group of buttons mutually exclusive supply a UUxtToggleGroup with a list of UxtToggleStates . UxtPressableToggleButton , displays an additional back plate based on the button's UxtToggleState checked property. UxtPressableCheckButton , displays a check box icon based on the button's UxtToggleState checked property. UxtPressableSwitchButton , displays a switch icon based on the button's UxtToggleState checked property. UxtPressableRadioButton , displays a radio circle icon based on the button's UxtToggleState checked property. Radio buttons are intended to be used with the UUxtToggleGroup to ensure only one button is checked at a time. Pressable Button Component Public Properties Push Behavior How the visuals should react when the button is pressed. Translate means the visuals move move along the local x-axis. Compress means the visuals will scale along the x-axis. Note, when compressed the visual's pivot should align with the back face of the compressible region. In other words, the plane visualized by the max push distance . Max Push Distance The maximum distance the button can move. Pressed Fraction The fraction of the maximum push distance that an unpressed button needs to be pushed in order for the button pressed event to fire. Released Fraction The fraction of the maximum push distance that a pressed button needs to be pushed in order for the button released event to fire. Recovery Speed The speed at which the button visuals return to the their resting position when no longer being touched by near interaction or selected using far interaction. This value is specified in Unreal units per second (uu/s). Front Face Collision Margin The distance in front of the visuals front face to place the front of the button box collider. Visuals A reference to the scene component that represents the moving part of the button. The extents of the button collider will also be constructed using this scene component and child bounds. Collision Profile The collision profile used for the button collider, which is constructed using the moving visuals mesh component extents."
  },
  "api/_u_uxt_pinch_slider_component.html": {
    "href": "api/_u_uxt_pinch_slider_component.html",
    "title": "MRTK Unreal API Reference UUxtPinchSliderComponent | UXT Documentation",
    "keywords": "UUxtPinchSliderComponent A slider that can be moved by grabbing / pinching a slider thumb. The thumb visuals must be set using the 'Visuals' property. class UUxtPinchSliderComponent; Header #include <Controls/UxtPinchSliderComponent.h> Inheritance Inherits from UUxtUIElementComponent , IUxtGrabTarget , IUxtGrabHandler , IUxtFarTarget , IUxtFarHandler , USceneComponent Public Functions Name EUxtSliderState GetState () const void SetEnabled (bool bEnabled) UStaticMeshComponent * GetVisuals () const void SetVisuals (UStaticMeshComponent * NewVisuals) void SetVisuals (const FComponentReference & NewVisuals) float GetValue () const void SetValue (float NewValue) float GetTrackLength () const void SetTrackLength (float NewTrackLength) float GetValueLowerBound () const void SetValueLowerBound (float NewLowerBound) float GetValueUpperBound () const void SetValueUpperBound (float NewUpperBound) bool GetUseSteppedMovement () const void SetUseSteppedMovement (bool bNewUseSteppedMovement) int GetNumSteps () const void SetNumSteps (int NewNumSteps) float GetLerpTime () const void SetLerpTime (float NewLerpTime) FName GetCollisionProfile () const void SetCollisionProfile (FName NewCollisionProfile) Protected Functions Name virtual void BeginPlay () override virtual bool IsGrabFocusable_Implementation (const UPrimitiveComponent * Primitive) const override virtual bool CanHandleGrab_Implementation (UPrimitiveComponent * Primitive) const override virtual void OnEnterGrabFocus_Implementation ( UUxtNearPointerComponent * Pointer) override virtual void OnUpdateGrabFocus_Implementation ( UUxtNearPointerComponent * Pointer) override virtual void OnExitGrabFocus_Implementation ( UUxtNearPointerComponent * Pointer) override virtual void OnBeginGrab_Implementation ( UUxtNearPointerComponent * Pointer) override virtual void OnUpdateGrab_Implementation ( UUxtNearPointerComponent * Pointer) override virtual void OnEndGrab_Implementation ( UUxtNearPointerComponent * Pointer) override virtual bool IsFarFocusable_Implementation (const UPrimitiveComponent * Primitive) const override virtual bool CanHandleFar_Implementation (UPrimitiveComponent * Primitive) const override virtual void OnEnterFarFocus_Implementation ( UUxtFarPointerComponent * Pointer) override virtual void OnUpdatedFarFocus_Implementation ( UUxtFarPointerComponent * Pointer) override virtual void OnExitFarFocus_Implementation ( UUxtFarPointerComponent * Pointer) override virtual void OnFarPressed_Implementation ( UUxtFarPointerComponent * Pointer) override virtual void OnFarDragged_Implementation ( UUxtFarPointerComponent * Pointer) override virtual void OnFarReleased_Implementation ( UUxtFarPointerComponent * Pointer) override Public Attributes Name FUxtPinchSliderUpdateStateDelegate OnUpdateState FUxtPinchSliderBeginFocusDelegate OnBeginFocus FUxtPinchSliderUpdateFocusDelegate OnUpdateFocus FUxtPinchSliderEndFocusDelegate OnEndFocus FUxtPinchSliderBeginGrabDelegate OnBeginGrab FUxtPinchSliderUpdateValueDelegate OnUpdateValue FUxtPinchSliderEndGrabDelegate OnEndGrab FUxtPinchSliderEnableDelegate OnEnable FUxtPinchSliderDisableDelegate OnDisable Additional inherited members Public Functions inherited from UUxtUIElementComponent Name UUxtUIElementComponent () =default EUxtUIElementVisibility GetUIVisibilitySelf () const EUxtUIElementVisibility GetUIVisibilityInHierarchy () const void SetUIVisibility (EUxtUIElementVisibility NewVisibility) void RefreshUIElement () Protected Functions inherited from UUxtUIElementComponent Name virtual void OnAttachmentChanged () override Public Attributes inherited from UUxtUIElementComponent Name FUxtUIElementShowDelegate OnShowElement FUxtUIElementHideDelegate OnHideElement Public Functions inherited from IUxtGrabTarget Name bool IsGrabFocusable (const UPrimitiveComponent * Primitive) const Public Functions inherited from IUxtGrabHandler Name bool CanHandleGrab (UPrimitiveComponent * Primitive) const void OnEnterGrabFocus ( UUxtNearPointerComponent * Pointer) void OnUpdateGrabFocus ( UUxtNearPointerComponent * Pointer) void OnExitGrabFocus ( UUxtNearPointerComponent * Pointer) void OnUpdateGrab ( UUxtNearPointerComponent * Pointer) Public Functions inherited from IUxtFarTarget Name bool IsFarFocusable (const UPrimitiveComponent * Primitive) const Public Functions inherited from IUxtFarHandler Name bool CanHandleFar (UPrimitiveComponent * Primitive) const void OnEnterFarFocus ( UUxtFarPointerComponent * Pointer) void OnUpdatedFarFocus ( UUxtFarPointerComponent * Pointer) void OnExitFarFocus ( UUxtFarPointerComponent * Pointer) void OnFarPressed ( UUxtFarPointerComponent * Pointer) void OnFarDragged ( UUxtFarPointerComponent * Pointer) void OnFarReleased ( UUxtFarPointerComponent * Pointer) Public Functions Documentation function GetState inline EUxtSliderState GetState() const Get the current state of the slider. function SetEnabled void SetEnabled( bool bEnabled ) Set if the slider is enabled. function GetVisuals inline UStaticMeshComponent * GetVisuals() const Get the static mesh representing the thumb visuals. function SetVisuals void SetVisuals( UStaticMeshComponent * NewVisuals ) Set the static mesh representing the thumb visuals. function SetVisuals void SetVisuals( const FComponentReference & NewVisuals ) Set the thumb visuals using a component reference, this is necessary if the visuals will be serialized. function GetValue inline float GetValue() const function SetValue void SetValue( float NewValue ) function GetTrackLength inline float GetTrackLength() const function SetTrackLength void SetTrackLength( float NewTrackLength ) function GetValueLowerBound inline float GetValueLowerBound() const function SetValueLowerBound void SetValueLowerBound( float NewLowerBound ) function GetValueUpperBound inline float GetValueUpperBound() const function SetValueUpperBound void SetValueUpperBound( float NewUpperBound ) function GetUseSteppedMovement inline bool GetUseSteppedMovement() const function SetUseSteppedMovement void SetUseSteppedMovement( bool bNewUseSteppedMovement ) function GetNumSteps inline int GetNumSteps() const function SetNumSteps void SetNumSteps( int NewNumSteps ) function GetLerpTime inline float GetLerpTime() const function SetLerpTime void SetLerpTime( float NewLerpTime ) function GetCollisionProfile inline FName GetCollisionProfile() const function SetCollisionProfile void SetCollisionProfile( FName NewCollisionProfile ) Protected Functions Documentation function BeginPlay virtual void BeginPlay() override Reimplements : UUxtUIElementComponent::BeginPlay function IsGrabFocusable_Implementation virtual bool IsGrabFocusable_Implementation( const UPrimitiveComponent * Primitive ) const override function CanHandleGrab_Implementation virtual bool CanHandleGrab_Implementation( UPrimitiveComponent * Primitive ) const override function OnEnterGrabFocus_Implementation virtual void OnEnterGrabFocus_Implementation( UUxtNearPointerComponent * Pointer ) override function OnUpdateGrabFocus_Implementation virtual void OnUpdateGrabFocus_Implementation( UUxtNearPointerComponent * Pointer ) override function OnExitGrabFocus_Implementation virtual void OnExitGrabFocus_Implementation( UUxtNearPointerComponent * Pointer ) override function OnBeginGrab_Implementation virtual void OnBeginGrab_Implementation( UUxtNearPointerComponent * Pointer ) override function OnUpdateGrab_Implementation virtual void OnUpdateGrab_Implementation( UUxtNearPointerComponent * Pointer ) override function OnEndGrab_Implementation virtual void OnEndGrab_Implementation( UUxtNearPointerComponent * Pointer ) override function IsFarFocusable_Implementation virtual bool IsFarFocusable_Implementation( const UPrimitiveComponent * Primitive ) const override function CanHandleFar_Implementation virtual bool CanHandleFar_Implementation( UPrimitiveComponent * Primitive ) const override function OnEnterFarFocus_Implementation virtual void OnEnterFarFocus_Implementation( UUxtFarPointerComponent * Pointer ) override function OnUpdatedFarFocus_Implementation virtual void OnUpdatedFarFocus_Implementation( UUxtFarPointerComponent * Pointer ) override function OnExitFarFocus_Implementation virtual void OnExitFarFocus_Implementation( UUxtFarPointerComponent * Pointer ) override function OnFarPressed_Implementation virtual void OnFarPressed_Implementation( UUxtFarPointerComponent * Pointer ) override function OnFarDragged_Implementation virtual void OnFarDragged_Implementation( UUxtFarPointerComponent * Pointer ) override function OnFarReleased_Implementation virtual void OnFarReleased_Implementation( UUxtFarPointerComponent * Pointer ) override Public Attributes Documentation variable OnUpdateState FUxtPinchSliderUpdateStateDelegate OnUpdateState; Event raised when slider changes state. variable OnBeginFocus FUxtPinchSliderBeginFocusDelegate OnBeginFocus; Event raised when a pointer starts focusing the slider. variable OnUpdateFocus FUxtPinchSliderUpdateFocusDelegate OnUpdateFocus; Event raised when a focusing pointer updates. variable OnEndFocus FUxtPinchSliderEndFocusDelegate OnEndFocus; Event raised when a pointer stops focusing the slider. variable OnBeginGrab FUxtPinchSliderBeginGrabDelegate OnBeginGrab; Event raised when slider is grabbed. variable OnUpdateValue FUxtPinchSliderUpdateValueDelegate OnUpdateValue; Event raised when slider's value changes. variable OnEndGrab FUxtPinchSliderEndGrabDelegate OnEndGrab; Event raised when slider is released. variable OnEnable FUxtPinchSliderEnableDelegate OnEnable; Event raised when slider is enabled. variable OnDisable FUxtPinchSliderDisableDelegate OnDisable; Event raised when slider is disabled. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_uxt_palm_up_constraint_component.html": {
    "href": "api/_u_uxt_palm_up_constraint_component.html",
    "title": "MRTK Unreal API Reference UUxtPalmUpConstraintComponent | UXT Documentation",
    "keywords": "UUxtPalmUpConstraintComponent Hand constraint component that becomes active if the hand is facing the player camera. The palm must be facing the camera for the constraint to be active. Optionally the hand can also be rejected if it isn't flat. class UUxtPalmUpConstraintComponent; Header #include <Behaviors/UxtPalmUpConstraintComponent.h> Inheritance Inherits from UUxtHandConstraintComponent , UActorComponent Public Functions Name virtual bool IsHandUsableForConstraint (EControllerHand NewHand) override Public Attributes Name float MaxPalmAngle bool bRequireFlatHand bool bRequireGaze float MaxFlatHandAngle float EyeGazeProximityThreshold float HeadGazeProximityThreshold Additional inherited members Public Functions inherited from UUxtHandConstraintComponent Name UUxtHandConstraintComponent () EControllerHand GetTrackedHand () const const FBox & GetHandBounds () const bool IsConstraintActive () const const FVector & GetGoalLocation () const const FQuat & GetGoalRotation () const Protected Functions inherited from UUxtHandConstraintComponent Name virtual void BeginPlay () override virtual void TickComponent (float DeltaTime, ELevelTick TickType, FActorComponentTickFunction * ThisTickFunction) override Public Attributes inherited from UUxtHandConstraintComponent Name EControllerHand Hand EUxtHandConstraintZone Zone EUxtHandConstraintOffsetMode OffsetMode EUxtHandConstraintRotationMode RotationMode float GoalMargin bool bMoveOwningActor float LocationLerpTime float RotationLerpTime FUxtHandConstraintActivatedDelegate OnConstraintActivated FUxtHandConstraintDeactivatedDelegate OnConstraintDeactivated FUxtHandConstraintBeginTrackingDelegate OnBeginTracking FUxtHandConstraintEndTrackingDelegate OnEndTracking Public Functions Documentation function IsHandUsableForConstraint virtual bool IsHandUsableForConstraint( EControllerHand NewHand ) override Reimplements : UUxtHandConstraintComponent::IsHandUsableForConstraint Returns true if the given hand is eligible for the constraint. If the hand is rejected the constraint will be deactivated. Public Attributes Documentation variable MaxPalmAngle float MaxPalmAngle = 75.0f; Maximum allowed angle between the negative palm normal and view vector. If the angle exceeds the limit the hand is not used. variable bRequireFlatHand bool bRequireFlatHand = false; If true then the hand needs to be flat to be accepted. The triangle between index, ring finger, and palm needs to be aligned with the palm within MaxFlatHandAngle. variable bRequireGaze bool bRequireGaze = false; If true then the user must be looking at their hand to be accepted. Head gaze will be used if an eye tracker is not available. variable MaxFlatHandAngle UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Uxt Palm Up Constraint\", meta=(EditCondition=\"bRequireFlatHand\", ClampMin=\"0.0\", ClampMax=\"90.0\")) float MaxFlatHandAngle; Maximum allowed angle between palm and index/ring finger/palm triangle to be considered a flat hand. variable EyeGazeProximityThreshold UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Uxt Palm Up Constraint\", meta=(EditCondition=\"bRequireGaze\", ClampMin=\"0.0\")) float EyeGazeProximityThreshold; The maximum distance between the eye gaze location on the hand plane and the reference point to accept the gaze. variable HeadGazeProximityThreshold UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Uxt Palm Up Constraint\", meta=(EditCondition=\"bRequireGaze\", ClampMin=\"0.0\")) float HeadGazeProximityThreshold; The maximum distance between the head gaze location on the hand plane and the reference point to accept the gaze. Only used if eye gaze isn't available. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_uxt_near_pointer_component.html": {
    "href": "api/_u_uxt_near_pointer_component.html",
    "title": "MRTK Unreal API Reference UUxtNearPointerComponent | UXT Documentation",
    "keywords": "UUxtNearPointerComponent Adds poke and grab interactions to an actor. It keeps track of all overlapping poke targets and raises focus events on the closest one. Targets use the transform of pointers focusing them to drive their interactions. class UUxtNearPointerComponent; Header #include <Input/UxtNearPointerComponent.h> Inheritance Inherits from UUxtPointerComponent , UActorComponent Public Functions Name UUxtNearPointerComponent () virtual ~UUxtNearPointerComponent () virtual void BeginPlay () override virtual void EndPlay (const EEndPlayReason::Type EndPlayReason) override virtual void TickComponent (float DeltaTime, ELevelTick TickType, FActorComponentTickFunction * ThisTickFunction) override virtual void SetActive (bool bNewActive, bool bReset =false) override virtual UObject * GetFocusTarget () const override virtual FTransform GetCursorTransform () const override void UpdatePokeInteraction () UObject * GetFocusedGrabTarget (FVector & OutClosestPointOnTarget, FVector & Normal) const UObject * GetFocusedPokeTarget (FVector & OutClosestPointOnTarget, FVector & Normal) const UPrimitiveComponent * GetFocusedGrabPrimitive (FVector & OutClosestPointOnTarget, FVector & Normal) const UPrimitiveComponent * GetFocusedPokePrimitive (FVector & OutClosestPointOnTarget, FVector & Normal) const bool SetFocusedGrabTarget (UActorComponent * NewFocusedTarget, bool bEnableFocusLock) bool SetFocusedPokeTarget (UActorComponent * NewFocusedTarget, bool bEnableFocusLock) bool IsGrabbing () const bool GetIsPoking () const FTransform GetGrabPointerTransform () const FTransform GetPokePointerTransform () const float GetPokePointerRadius () const Public Attributes Name TEnumAsByte< ECollisionChannel > TraceChannel float ProximityRadius float PokeRadius float GrabRadius float PokeDepth float DebounceDepth Protected Attributes Name FUxtGrabPointerFocus * GrabFocus FUxtPokePointerFocus * PokeFocus Additional inherited members Public Functions inherited from UUxtPointerComponent Name UUxtPointerComponent () =default bool GetFocusLocked () const virtual void SetFocusLocked (bool bLocked) Public Attributes inherited from UUxtPointerComponent Name EControllerHand Hand Protected Attributes inherited from UUxtPointerComponent Name bool bFocusLocked Public Functions Documentation function UUxtNearPointerComponent UUxtNearPointerComponent() function ~UUxtNearPointerComponent virtual ~UUxtNearPointerComponent() function BeginPlay virtual void BeginPlay() override function EndPlay virtual void EndPlay( const EEndPlayReason::Type EndPlayReason ) override function TickComponent virtual void TickComponent( float DeltaTime, ELevelTick TickType, FActorComponentTickFunction * ThisTickFunction ) override function SetActive virtual void SetActive( bool bNewActive, bool bReset =false ) override function GetFocusTarget virtual UObject * GetFocusTarget() const override function GetCursorTransform virtual FTransform GetCursorTransform() const override function UpdatePokeInteraction void UpdatePokeInteraction() Update poke distances and detect if poking the target. function GetFocusedGrabTarget UObject * GetFocusedGrabTarget( FVector & OutClosestPointOnTarget, FVector & Normal ) const Returns currently focused grab target or null if there is none. function GetFocusedPokeTarget UObject * GetFocusedPokeTarget( FVector & OutClosestPointOnTarget, FVector & Normal ) const Returns currently focused poke target or null if there is none. function GetFocusedGrabPrimitive UPrimitiveComponent * GetFocusedGrabPrimitive( FVector & OutClosestPointOnTarget, FVector & Normal ) const Returns currently focused grab primitive or null if there is none. function GetFocusedPokePrimitive UPrimitiveComponent * GetFocusedPokePrimitive( FVector & OutClosestPointOnTarget, FVector & Normal ) const Returns currently focused poke primitive or null if there is none. function SetFocusedGrabTarget bool SetFocusedGrabTarget( UActorComponent * NewFocusedTarget, bool bEnableFocusLock ) Set a focused grab target explicitly which will receive grasp events. If bEnableFocusLock is true, then the new focus target will be locked until released by calling SetFocusLocked. function SetFocusedPokeTarget bool SetFocusedPokeTarget( UActorComponent * NewFocusedTarget, bool bEnableFocusLock ) Set a focused poke target explicitly which will receive grasp events. If bEnableFocusLock is true, then the new focus target will be locked until released by calling SetFocusLocked. function IsGrabbing bool IsGrabbing() const function GetIsPoking bool GetIsPoking() const function GetGrabPointerTransform FTransform GetGrabPointerTransform() const function GetPokePointerTransform FTransform GetPokePointerTransform() const function GetPokePointerRadius float GetPokePointerRadius() const Public Attributes Documentation variable TraceChannel TEnumAsByte< ECollisionChannel > TraceChannel = ECollisionChannel::ECC_Visibility; variable ProximityRadius float ProximityRadius = 20.0f; variable PokeRadius float PokeRadius = 0.75f; variable GrabRadius float GrabRadius = 3.5f; variable PokeDepth float PokeDepth = 30.0f; The depth beyond the front face at which a front face pokable no longer recieves poke events. While poking a front face pokable, if the near pointer moves beyond this depth, the pokable will receive a poke end event. variable DebounceDepth float DebounceDepth = 0.5f; The distance the fingertip must be from a pokeable in order to fire a poke end event. This is used in order to distinguish the queries for poke begin and poke end so you cannot easily cause end touch to fire one frame and begin touch to fire on the next frame. Protected Attributes Documentation variable GrabFocus FUxtGrabPointerFocus * GrabFocus; Focus of the grab pointer variable PokeFocus FUxtPokePointerFocus * PokeFocus; Focus of the poke pointer Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_uxt_move_axis_constraint.html": {
    "href": "api/_u_uxt_move_axis_constraint.html",
    "title": "MRTK Unreal API Reference UUxtMoveAxisConstraint | UXT Documentation",
    "keywords": "UUxtMoveAxisConstraint Component for limiting the translation axes for Manipulator Usage: Attach to actor that the constraint should be applied to. class UUxtMoveAxisConstraint; Header #include <Interactions/Constraints/UxtMoveAxisConstraint.h> Inheritance Inherits from UUxtTransformConstraint , UActorComponent Public Functions Name virtual EUxtTransformMode GetConstraintType () const virtual void ApplyConstraint (FTransform & Transform) const Public Attributes Name int32 ConstraintOnMovement bool bUseLocalSpaceForConstraint Additional inherited members Public Functions inherited from UUxtTransformConstraint Name virtual void virtual void Initialize (const FTransform & WorldPose) Public Attributes inherited from UUxtTransformConstraint Name int32 HandType int32 InteractionMode Protected Attributes inherited from UUxtTransformConstraint Name FTransform WorldPoseOnManipulationStart Public Functions Documentation function GetConstraintType virtual EUxtTransformMode GetConstraintType() const Reimplements : UUxtTransformConstraint::GetConstraintType Enabled manipulation modes. function ApplyConstraint virtual void ApplyConstraint( FTransform & Transform ) const Reimplements : UUxtTransformConstraint::ApplyConstraint Applies constraints to transforms during manipulation Public Attributes Documentation variable ConstraintOnMovement int32 ConstraintOnMovement = 0; Defines the axis the movement constraint should be applied to. variable bUseLocalSpaceForConstraint bool bUseLocalSpaceForConstraint = false; Use local or global space for constraint calculations Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_uxt_manipulation_move_logic.html": {
    "href": "api/_uxt_manipulation_move_logic.html",
    "title": "MRTK Unreal API Reference UxtManipulationMoveLogic | UXT Documentation",
    "keywords": "UxtManipulationMoveLogic Implements a move logic that will move an object based on the initial position of the grab point relative to the pointer and relative to the object, and subsequent changes to the pointer and the object's rotation Usage: When a manipulation starts, call Setup. Call Update for querying a new position for the object. class UxtManipulationMoveLogic; Header #include <Interactions/Manipulation/UxtManipulationMoveLogic.h> Public Functions Name void Setup (const FTransform & PointerCentroidPose, const FVector & GrabCentroid, const FTransform & ObjectTransform, const FVector & HeadPosition) FVector Update (const FTransform & PointerCentroidPose, const FQuat & ObjectRotation, const FVector & ObjectScale, bool UsePointerRotation, const FVector & HeadPosition) const Public Functions Documentation function Setup void Setup( const FTransform & PointerCentroidPose, const FVector & GrabCentroid, const FTransform & ObjectTransform, const FVector & HeadPosition ) Setup move logic by caching initial input values function Update FVector Update( const FTransform & PointerCentroidPose, const FQuat & ObjectRotation, const FVector & ObjectScale, bool UsePointerRotation, const FVector & HeadPosition ) const Provide updated input and head/camera position to retrieve new object position Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_uxt_affordance_interaction_cache.html": {
    "href": "api/_uxt_affordance_interaction_cache.html",
    "title": "MRTK Unreal API Reference UxtAffordanceInteractionCache | UXT Documentation",
    "keywords": "UxtAffordanceInteractionCache Internal cache that will be used during the interaction with an affordance. struct UxtAffordanceInteractionCache; Public Attributes Name bool IsValid FBox InitialBounds FTransform InitialTransform FVector InitialDiagonalDirection FVector InitialOppositeAffordanceLoc FTransform InitialGrabPointTransform UPrimitiveComponent * OppositeAffordancePrimitive Public Attributes Documentation variable IsValid bool UxtAffordanceInteractionCache::IsValid bool IsValid = false; Whether this cache is valid for use. It can be false when the opposite affordance can't be found due to misconfiguration, for example. variable InitialBounds FBox UxtAffordanceInteractionCache::InitialBounds FBox InitialBounds; Initial bounding box at the start of interaction. variable InitialTransform FTransform UxtAffordanceInteractionCache::InitialTransform FTransform InitialTransform; Initial transform of the actor at the start of interaction. variable InitialDiagonalDirection FVector UxtAffordanceInteractionCache::InitialDiagonalDirection FVector InitialDiagonalDirection; Initial diagonal direction (opposite to grabbed affordance). variable InitialOppositeAffordanceLoc FVector UxtAffordanceInteractionCache::InitialOppositeAffordanceLoc FVector InitialOppositeAffordanceLoc; Initial location of the opposite affordance. variable InitialGrabPointTransform FTransform UxtAffordanceInteractionCache::InitialGrabPointTransform FTransform InitialGrabPointTransform; Initial transform of the grab point (world space) variable OppositeAffordancePrimitive UPrimitiveComponent* UxtAffordanceInteractionCache::OppositeAffordancePrimitive UPrimitiveComponent * OppositeAffordancePrimitive; Opposite affordance's primitive. Caching here prevents iterating over the map each frame. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_i_uxt_far_handler.html": {
    "href": "api/_i_uxt_far_handler.html",
    "title": "MRTK Unreal API Reference IUxtFarHandler | UXT Documentation",
    "keywords": "IUxtFarHandler Interface to be implemented by components to handle far interactions. class IUxtFarHandler; Header #include <UxtFarHandler.h> Inheritance Inherited by UUxtGrabTargetComponent , UUxtPinchSliderComponent , UUxtPressableButtonComponent , UUxtTapToPlaceComponent , UUxtTouchableVolumeComponent , UUxtWidgetComponent Public Functions Name bool CanHandleFar (UPrimitiveComponent * Primitive) const void OnEnterFarFocus ( UUxtFarPointerComponent * Pointer) void OnUpdatedFarFocus ( UUxtFarPointerComponent * Pointer) void OnExitFarFocus ( UUxtFarPointerComponent * Pointer) void OnFarPressed ( UUxtFarPointerComponent * Pointer) void OnFarDragged ( UUxtFarPointerComponent * Pointer) void OnFarReleased ( UUxtFarPointerComponent * Pointer) Public Functions Documentation function CanHandleFar bool CanHandleFar( UPrimitiveComponent * Primitive ) const Returns true if the this can handle events from this primitive. function OnEnterFarFocus void OnEnterFarFocus( UUxtFarPointerComponent * Pointer ) Raised when a far pointer starts focusing a primitive. function OnUpdatedFarFocus void OnUpdatedFarFocus( UUxtFarPointerComponent * Pointer ) Raised when a focusing far pointer is updated. function OnExitFarFocus void OnExitFarFocus( UUxtFarPointerComponent * Pointer ) Raised when a far pointer stops focusing a primitive. function OnFarPressed void OnFarPressed( UUxtFarPointerComponent * Pointer ) Raised when a focusing far pointer is pressed. function OnFarDragged void OnFarDragged( UUxtFarPointerComponent * Pointer ) Raised when a focusing far pointer is dragged. function OnFarReleased void OnFarReleased( UUxtFarPointerComponent * Pointer ) Raised when a focusing far pointer is released. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_i_uxt_collection_object.html": {
    "href": "api/_i_uxt_collection_object.html",
    "title": "MRTK Unreal API Reference IUxtCollectionObject | UXT Documentation",
    "keywords": "IUxtCollectionObject Interface for components that can be poked. class IUxtCollectionObject; Header #include <UxtCollectionObject.h> Inheritance Inherited by AUxtBasePressableButtonActor , UUxtPressableButtonComponent Public Functions Name TScriptInterface< IUxtPokeTarget > GetPokeTarget () TScriptInterface< IUxtFarTarget > GetFarTarget () Public Functions Documentation function GetPokeTarget TScriptInterface< IUxtPokeTarget > GetPokeTarget() function GetFarTarget TScriptInterface< IUxtFarTarget > GetFarTarget() Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_uxt_grab_target_component.html": {
    "href": "api/_u_uxt_grab_target_component.html",
    "title": "MRTK Unreal API Reference UUxtGrabTargetComponent | UXT Documentation",
    "keywords": "UUxtGrabTargetComponent Interactable component that listens to grab events from near pointers. A pointer that starts grabing while near the actor is considered a grabbing pointer. The grab is released when the pointer stops grabing, regardless of whether it is still near or not. The GrabComponent does not react to grabbing pointers by itself, but serves as a base class for manipulation. class UUxtGrabTargetComponent; Header #include <Interactions/UxtGrabTargetComponent.h> Inheritance Inherits from UUxtManipulatorComponent , IUxtGrabTarget , IUxtGrabHandler , IUxtFarTarget , IUxtFarHandler , UActorComponent Inherited by UUxtManipulatorComponentBase Public Functions Name UUxtGrabTargetComponent () void FindGrabPointer ( UUxtNearPointerComponent * NearPointer, UUxtFarPointerComponent * FarPointer, bool & Success, FUxtGrabPointerData & PointerData, int & Index) const void GetPrimaryGrabPointer (bool & Valid, FUxtGrabPointerData & PointerData) const void GetSecondaryGrabPointer (bool & Valid, FUxtGrabPointerData & PointerData) const bool ForceEndGrab () FTransform GetGrabPointCentroid (const FTransform & ToWorldTransform) const FVector GetTargetCentroid () const bool GetTickOnlyWhileGrabbed () const void SetTickOnlyWhileGrabbed (bool bEnable) const TArray< FUxtGrabPointerData > & GetGrabPointers () const virtual void OnExternalManipulationStarted () override Protected Functions Name virtual void BeginPlay () override virtual bool IsGrabFocusable_Implementation (const UPrimitiveComponent * Primitive) const override virtual bool CanHandleGrab_Implementation (UPrimitiveComponent * Primitive) const override virtual void OnEnterGrabFocus_Implementation ( UUxtNearPointerComponent * Pointer) override virtual void OnUpdateGrabFocus_Implementation ( UUxtNearPointerComponent * Pointer) override virtual void OnExitGrabFocus_Implementation ( UUxtNearPointerComponent * Pointer) override virtual void OnBeginGrab_Implementation ( UUxtNearPointerComponent * Pointer) override virtual void OnUpdateGrab_Implementation ( UUxtNearPointerComponent * Pointer) override virtual void OnEndGrab_Implementation ( UUxtNearPointerComponent * Pointer) override virtual bool IsFarFocusable_Implementation (const UPrimitiveComponent * Primitive) const override virtual bool CanHandleFar_Implementation (UPrimitiveComponent * Primitive) const override virtual void OnFarPressed_Implementation ( UUxtFarPointerComponent * Pointer) override virtual void OnFarReleased_Implementation ( UUxtFarPointerComponent * Pointer) override virtual void OnFarDragged_Implementation ( UUxtFarPointerComponent * Pointer) override virtual void OnEnterFarFocus_Implementation ( UUxtFarPointerComponent * Pointer) override virtual void OnExitFarFocus_Implementation ( UUxtFarPointerComponent * Pointer) override virtual void OnUpdatedFarFocus_Implementation ( UUxtFarPointerComponent * Pointer) override FTransform GetPointerCentroid () const Public Attributes Name FUxtEnterFarFocusDelegate OnEnterFarFocus FUxtUpdateFarFocusDelegate OnUpdateFarFocus FUxtExitFarFocusDelegate OnExitFarFocus FUxtEnterGrabFocusDelegate OnEnterGrabFocus FUxtUpdateGrabFocusDelegate OnUpdateGrabFocus FUxtExitGrabFocusDelegate OnExitGrabFocus FUxtBeginGrabDelegate OnBeginGrab FUxtUpdateGrabDelegate OnUpdateGrab FUxtEndGrabDelegate OnEndGrab int32 InteractionMode int32 GrabModes Additional inherited members Public Functions inherited from UUxtManipulatorComponent Name bool GetAutoDetectConstraints () const void SetAutoDetectConstraints (bool bNewAutoDetectConstraints) const TArray< FComponentReference > & GetSelectedConstraints () const void AddConstraint (const FComponentReference & NewConstraint) void RemoveConstraint (const FComponentReference & NewConstraint) bool GetRelativeToInitialScale () const void SetRelativeToInitialScale (const bool Value) float GetMinScale () const void SetMinScale (const float Value) float GetMaxScale () const void SetMaxScale (const float Value) Protected Functions inherited from UUxtManipulatorComponent Name virtual void TickComponent (float DeltaTime, ELevelTick TickType, FActorComponentTickFunction * ThisTickFunction) override void InitializeConstraints (USceneComponent * NewTargetComponent) void ApplyConstraints (FTransform & Transform, EUxtTransformMode TransformMode, bool bIsOneHanded, bool bIsNear) const Public Functions inherited from IUxtGrabTarget Name bool IsGrabFocusable (const UPrimitiveComponent * Primitive) const Public Functions inherited from IUxtGrabHandler Name bool CanHandleGrab (UPrimitiveComponent * Primitive) const Public Functions inherited from IUxtFarTarget Name bool IsFarFocusable (const UPrimitiveComponent * Primitive) const Public Functions inherited from IUxtFarHandler Name bool CanHandleFar (UPrimitiveComponent * Primitive) const void OnUpdatedFarFocus ( UUxtFarPointerComponent * Pointer) void OnFarPressed ( UUxtFarPointerComponent * Pointer) void OnFarDragged ( UUxtFarPointerComponent * Pointer) void OnFarReleased ( UUxtFarPointerComponent * Pointer) Public Functions Documentation function UUxtGrabTargetComponent UUxtGrabTargetComponent() function FindGrabPointer void FindGrabPointer( UUxtNearPointerComponent * NearPointer, UUxtFarPointerComponent * FarPointer, bool & Success, FUxtGrabPointerData & PointerData, int & Index ) const Returns true if the pointer is currently grabbing the actor. PointerData will contain the associated grab data for the pointer. Index is the order in which pointers started grabbing. function GetPrimaryGrabPointer void GetPrimaryGrabPointer( bool & Valid, FUxtGrabPointerData & PointerData ) const Returns the first active grab pointer. If no pointer is grabbing the Valid output will be false. function GetSecondaryGrabPointer void GetSecondaryGrabPointer( bool & Valid, FUxtGrabPointerData & PointerData ) const Returns the second active grab pointer. If less than two pointers are grabbing the Valid output will be false. function ForceEndGrab bool ForceEndGrab() Release all currently grabbing pointers. Returns true if any pointers were grabbing and have been released, false if no pointers were grabbing. function GetGrabPointCentroid FTransform GetGrabPointCentroid( const FTransform & ToWorldTransform ) const Compute the centroid of the grab points in world space. function GetTargetCentroid FVector GetTargetCentroid() const Compute the centroid of the pointer targets in world space. function GetTickOnlyWhileGrabbed bool GetTickOnlyWhileGrabbed() const function SetTickOnlyWhileGrabbed void SetTickOnlyWhileGrabbed( bool bEnable ) function GetGrabPointers const TArray< FUxtGrabPointerData > & GetGrabPointers() const Returns a list of all currently grabbing pointers. function OnExternalManipulationStarted virtual void OnExternalManipulationStarted() override Protected Functions Documentation function BeginPlay virtual void BeginPlay() override Reimplements : UUxtManipulatorComponent::BeginPlay Reimplemented by : UUxtManipulatorComponentBase::BeginPlay function IsGrabFocusable_Implementation virtual bool IsGrabFocusable_Implementation( const UPrimitiveComponent * Primitive ) const override function CanHandleGrab_Implementation virtual bool CanHandleGrab_Implementation( UPrimitiveComponent * Primitive ) const override function OnEnterGrabFocus_Implementation virtual void OnEnterGrabFocus_Implementation( UUxtNearPointerComponent * Pointer ) override function OnUpdateGrabFocus_Implementation virtual void OnUpdateGrabFocus_Implementation( UUxtNearPointerComponent * Pointer ) override function OnExitGrabFocus_Implementation virtual void OnExitGrabFocus_Implementation( UUxtNearPointerComponent * Pointer ) override function OnBeginGrab_Implementation virtual void OnBeginGrab_Implementation( UUxtNearPointerComponent * Pointer ) override function OnUpdateGrab_Implementation virtual void OnUpdateGrab_Implementation( UUxtNearPointerComponent * Pointer ) override function OnEndGrab_Implementation virtual void OnEndGrab_Implementation( UUxtNearPointerComponent * Pointer ) override function IsFarFocusable_Implementation virtual bool IsFarFocusable_Implementation( const UPrimitiveComponent * Primitive ) const override function CanHandleFar_Implementation virtual bool CanHandleFar_Implementation( UPrimitiveComponent * Primitive ) const override function OnFarPressed_Implementation virtual void OnFarPressed_Implementation( UUxtFarPointerComponent * Pointer ) override function OnFarReleased_Implementation virtual void OnFarReleased_Implementation( UUxtFarPointerComponent * Pointer ) override function OnFarDragged_Implementation virtual void OnFarDragged_Implementation( UUxtFarPointerComponent * Pointer ) override function OnEnterFarFocus_Implementation virtual void OnEnterFarFocus_Implementation( UUxtFarPointerComponent * Pointer ) override function OnExitFarFocus_Implementation virtual void OnExitFarFocus_Implementation( UUxtFarPointerComponent * Pointer ) override function OnUpdatedFarFocus_Implementation virtual void OnUpdatedFarFocus_Implementation( UUxtFarPointerComponent * Pointer ) override function GetPointerCentroid FTransform GetPointerCentroid() const Compute the average transform of currently grabbing pointers Public Attributes Documentation variable OnEnterFarFocus FUxtEnterFarFocusDelegate OnEnterFarFocus; Event raised when entering grab focus. variable OnUpdateFarFocus FUxtUpdateFarFocusDelegate OnUpdateFarFocus; Event raised when grab focus updates. variable OnExitFarFocus FUxtExitFarFocusDelegate OnExitFarFocus; Event raised when exiting grab. variable OnEnterGrabFocus FUxtEnterGrabFocusDelegate OnEnterGrabFocus; Event raised when entering grab focus. variable OnUpdateGrabFocus FUxtUpdateGrabFocusDelegate OnUpdateGrabFocus; Event raised when grab focus updates. variable OnExitGrabFocus FUxtExitGrabFocusDelegate OnExitGrabFocus; Event raised when exiting grab. variable OnBeginGrab FUxtBeginGrabDelegate OnBeginGrab; Event raised when grab starts. variable OnUpdateGrab FUxtUpdateGrabDelegate OnUpdateGrab; Event raised when grab updates. variable OnEndGrab FUxtEndGrabDelegate OnEndGrab; Event raised when grab ends. variable InteractionMode int32 InteractionMode; Property that indicates if the object is grabbable with far or near interaction or both. variable GrabModes int32 GrabModes; Enabled grab modes. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_uxt_grab_target.html": {
    "href": "api/_u_uxt_grab_target.html",
    "title": "MRTK Unreal API Reference UUxtGrabTarget | UXT Documentation",
    "keywords": "UUxtGrabTarget class UUxtGrabTarget; Inheritance Inherits from UInterface Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_x_tools_editor.html": {
    "href": "api/_u_x_tools_editor.html",
    "title": "MRTK Unreal API Reference UXToolsEditor | UXT Documentation",
    "keywords": "UXToolsEditor class UXToolsEditor; Inheritance Inherits from ModuleRules Public Functions Name UXToolsEditor (ReadOnlyTargetRules Target) Public Functions Documentation function UXToolsEditor inline UXToolsEditor( ReadOnlyTargetRules Target ) Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_uxt_toggle_group_component.html": {
    "href": "api/_u_uxt_toggle_group_component.html",
    "title": "MRTK Unreal API Reference UUxtToggleGroupComponent | UXT Documentation",
    "keywords": "UUxtToggleGroupComponent Component which controls the state of a collection of UUxtToggleStateComponent to behave like a radio group. The component ensures that only one toggle state can be toggled on at a time. Optionally, all states can be toggled off if the SelectedIndex is set to INDEX_NONE. class UUxtToggleGroupComponent; Header #include <Controls/UxtToggleGroupComponent.h> Inheritance Inherits from UActorComponent Protected Types Name typedef TWeakObjectPtr< UUxtToggleStateComponent > ToggleStateWeak Public Functions Name void SetSelectedIndex (int32 Index) int32 GetSelectedIndex () const bool AddToggleState (UUxtToggleStateComponent * ToggleState) bool InsertToggleState (UUxtToggleStateComponent * ToggleState, int32 Index) bool RemoveToggleState (UUxtToggleStateComponent * ToggleState) void EmptyGroup () int32 GetGroupCount () const int32 GetToggleStateIndex (const UUxtToggleStateComponent * ToggleState) const Protected Functions Name virtual void BeginPlay () override virtual void OnToggled (UUxtToggleStateComponent * ToggleState) Public Attributes Name FUxtToggleGroupSelectionChangedDelegate OnGroupSelectionChanged Protected Attributes Name TArray< ToggleStateWeak > ToggleStates Protected Types Documentation typedef ToggleStateWeak typedef TWeakObjectPtr<UUxtToggleStateComponent> UUxtToggleGroupComponent::ToggleStateWeak; Public Functions Documentation function SetSelectedIndex void SetSelectedIndex( int32 Index ) Mutates the selected index, broadcasts events, and performs bounds checking. function GetSelectedIndex inline int32 GetSelectedIndex() const Accessor to the selected index. function AddToggleState bool AddToggleState( UUxtToggleStateComponent * ToggleState ) Adds a toggle state to the end of the ToggleStates list. Returns true if the insertion was successful. function InsertToggleState bool InsertToggleState( UUxtToggleStateComponent * ToggleState, int32 Index ) Adds a toggle state to a specific index within the ToggleStates list. Increments the selection index if the toggle state is added before the current selection index. Returns true if the insertion was successful. function RemoveToggleState bool RemoveToggleState( UUxtToggleStateComponent * ToggleState ) Removes a toggle state from the ToggleStates list. Returns true if the removal was successful. function EmptyGroup void EmptyGroup() Removes all toggle states from the ToggleStates list and invalidates the selected index. function GetGroupCount inline int32 GetGroupCount() const Returns how many toggle states are within the group. function GetToggleStateIndex int32 GetToggleStateIndex( const UUxtToggleStateComponent * ToggleState ) const Returns the index of the ToggleState in the ToggleStates list, if the ToggleState does not exist returns INDEX_NONE (-1). Protected Functions Documentation function BeginPlay virtual void BeginPlay() override Extracts references from the ToggleReferences and sets the initial selection. function OnToggled virtual void OnToggled( UUxtToggleStateComponent * ToggleState ) Delegate for when any toggle state within ToggleStates is toggled. Public Attributes Documentation variable OnGroupSelectionChanged FUxtToggleGroupSelectionChangedDelegate OnGroupSelectionChanged; Event which broadcasts when the toggle group selection changes. Protected Attributes Documentation variable ToggleStates TArray< ToggleStateWeak > ToggleStates; A collection of toggle states that act as one toggle group, only one state can be toggle on at a time. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_uxt_input_subsystem.html": {
    "href": "api/_u_uxt_input_subsystem.html",
    "title": "MRTK Unreal API Reference UUxtInputSubsystem | UXT Documentation",
    "keywords": "UUxtInputSubsystem Subsystem for dispatching events to interested handlers. class UUxtInputSubsystem; Header #include <Input/UxtInputSubsystem.h> Inheritance Inherits from UGameInstanceSubsystem Public Functions Name bool RegisterHandler (UObject * Handler, TSubclassOf< UInterface > Interface) bool UnregisterHandler (UObject * Handler, TSubclassOf< UInterface > Interface) void RaiseEnterFarFocus (UPrimitiveComponent * Target, UUxtFarPointerComponent * Pointer) void RaiseUpdatedFarFocus (UPrimitiveComponent * Target, UUxtFarPointerComponent * Pointer) void RaiseExitFarFocus (UPrimitiveComponent * Target, UUxtFarPointerComponent * Pointer) void RaiseFarPressed (UPrimitiveComponent * Target, UUxtFarPointerComponent * Pointer) void RaiseFarDragged (UPrimitiveComponent * Target, UUxtFarPointerComponent * Pointer) void RaiseFarReleased (UPrimitiveComponent * Target, UUxtFarPointerComponent * Pointer) void RaiseEnterGrabFocus (UPrimitiveComponent * Target, UUxtNearPointerComponent * Pointer) void RaiseUpdateGrabFocus (UPrimitiveComponent * Target, UUxtNearPointerComponent * Pointer) void RaiseExitGrabFocus (UPrimitiveComponent * Target, UUxtNearPointerComponent * Pointer) void RaiseBeginGrab (UPrimitiveComponent * Target, UUxtNearPointerComponent * Pointer) void RaiseUpdateGrab (UPrimitiveComponent * Target, UUxtNearPointerComponent * Pointer) void RaiseEndGrab (UPrimitiveComponent * Target, UUxtNearPointerComponent * Pointer) void RaiseEnterPokeFocus (UPrimitiveComponent * Target, UUxtNearPointerComponent * Pointer) void RaiseUpdatePokeFocus (UPrimitiveComponent * Target, UUxtNearPointerComponent * Pointer) void RaiseExitPokeFocus (UPrimitiveComponent * Target, UUxtNearPointerComponent * Pointer) void RaiseBeginPoke (UPrimitiveComponent * Target, UUxtNearPointerComponent * Pointer) void RaiseUpdatePoke (UPrimitiveComponent * Target, UUxtNearPointerComponent * Pointer) void RaiseEndPoke (UPrimitiveComponent * Target, UUxtNearPointerComponent * Pointer) Public Functions Documentation function RegisterHandler static bool RegisterHandler( UObject * Handler, TSubclassOf< UInterface > Interface ) Register the given handler as interested in events for a given handler interface. function UnregisterHandler static bool UnregisterHandler( UObject * Handler, TSubclassOf< UInterface > Interface ) Unregister the given handler as interested in events for a given handler interface. function RaiseEnterFarFocus static void RaiseEnterFarFocus( UPrimitiveComponent * Target, UUxtFarPointerComponent * Pointer ) Raised when a far pointer starts focusing a primitive. function RaiseUpdatedFarFocus static void RaiseUpdatedFarFocus( UPrimitiveComponent * Target, UUxtFarPointerComponent * Pointer ) Raised when a focusing far pointer is updated. function RaiseExitFarFocus static void RaiseExitFarFocus( UPrimitiveComponent * Target, UUxtFarPointerComponent * Pointer ) Raised when a far pointer stops focusing a primitive. function RaiseFarPressed static void RaiseFarPressed( UPrimitiveComponent * Target, UUxtFarPointerComponent * Pointer ) Raised when a focusing far pointer is pressed. function RaiseFarDragged static void RaiseFarDragged( UPrimitiveComponent * Target, UUxtFarPointerComponent * Pointer ) Raised when a focusing far pointer is dragged. function RaiseFarReleased static void RaiseFarReleased( UPrimitiveComponent * Target, UUxtFarPointerComponent * Pointer ) Raised when a focusing far pointer is released. function RaiseEnterGrabFocus static void RaiseEnterGrabFocus( UPrimitiveComponent * Target, UUxtNearPointerComponent * Pointer ) Raised when a pointer focuses the actor. function RaiseUpdateGrabFocus static void RaiseUpdateGrabFocus( UPrimitiveComponent * Target, UUxtNearPointerComponent * Pointer ) Raised when a pointer has been updated while focused. function RaiseExitGrabFocus static void RaiseExitGrabFocus( UPrimitiveComponent * Target, UUxtNearPointerComponent * Pointer ) Raised when a pointer stops focusing the actor. function RaiseBeginGrab static void RaiseBeginGrab( UPrimitiveComponent * Target, UUxtNearPointerComponent * Pointer ) Raised when a pointer starts grabbing while overlapping the actor. function RaiseUpdateGrab static void RaiseUpdateGrab( UPrimitiveComponent * Target, UUxtNearPointerComponent * Pointer ) Raised when a pointer has been updated while grabbing. function RaiseEndGrab static void RaiseEndGrab( UPrimitiveComponent * Target, UUxtNearPointerComponent * Pointer ) Raised when a pointer stops grabbing or stops overlapping the actor while grabbing. function RaiseEnterPokeFocus static void RaiseEnterPokeFocus( UPrimitiveComponent * Target, UUxtNearPointerComponent * Pointer ) Raised when a pointer focuses the actor. function RaiseUpdatePokeFocus static void RaiseUpdatePokeFocus( UPrimitiveComponent * Target, UUxtNearPointerComponent * Pointer ) Raised when a pointer has been updated while focused. function RaiseExitPokeFocus static void RaiseExitPokeFocus( UPrimitiveComponent * Target, UUxtNearPointerComponent * Pointer ) Raised when a pointer stops focusing the actor. function RaiseBeginPoke static void RaiseBeginPoke( UPrimitiveComponent * Target, UUxtNearPointerComponent * Pointer ) Raised when a pointer poke volume starts overlapping the actor. function RaiseUpdatePoke static void RaiseUpdatePoke( UPrimitiveComponent * Target, UUxtNearPointerComponent * Pointer ) Raised while a pointer poke volume is overlapping the actor. function RaiseEndPoke static void RaiseEndPoke( UPrimitiveComponent * Target, UUxtNearPointerComponent * Pointer ) Raised when a pointer poke volume stops overlapping the actor. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_uxt_fixed_rotation_to_world_constraint.html": {
    "href": "api/_u_uxt_fixed_rotation_to_world_constraint.html",
    "title": "MRTK Unreal API Reference UUxtFixedRotationToWorldConstraint | UXT Documentation",
    "keywords": "UUxtFixedRotationToWorldConstraint Component for fixing the rotation of a manipulated object relative to the world Usage: Attach to actor that the constraint should be applied to. class UUxtFixedRotationToWorldConstraint; Header #include <UxtFixedRotationToWorldConstraint.h> Inheritance Inherits from UUxtTransformConstraint , UActorComponent Public Functions Name virtual EUxtTransformMode GetConstraintType () const virtual void ApplyConstraint (FTransform & Transform) const Additional inherited members Public Functions inherited from UUxtTransformConstraint Name virtual void virtual void Initialize (const FTransform & WorldPose) Public Attributes inherited from UUxtTransformConstraint Name int32 HandType int32 InteractionMode Protected Attributes inherited from UUxtTransformConstraint Name FTransform WorldPoseOnManipulationStart Public Functions Documentation function GetConstraintType virtual EUxtTransformMode GetConstraintType() const Reimplements : UUxtTransformConstraint::GetConstraintType Enabled manipulation modes. function ApplyConstraint virtual void ApplyConstraint( FTransform & Transform ) const Reimplements : UUxtTransformConstraint::ApplyConstraint Applies constraints to transforms during manipulation Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_uxt_face_user_constraint.html": {
    "href": "api/_u_uxt_face_user_constraint.html",
    "title": "MRTK Unreal API Reference UUxtFaceUserConstraint | UXT Documentation",
    "keywords": "UUxtFaceUserConstraint Component for fixing the rotation of a manipulated object such that it always faces (or faces away from) the user Usage: Attach to actor that the constraint should be applied to. class UUxtFaceUserConstraint; Header #include <Interactions/Constraints/UxtFaceUserConstraint.h> Inheritance Inherits from UUxtTransformConstraint , UActorComponent Public Functions Name virtual EUxtTransformMode GetConstraintType () const virtual void ApplyConstraint (FTransform & Transform) const Public Attributes Name bool bFaceAway Additional inherited members Public Functions inherited from UUxtTransformConstraint Name virtual void virtual void Initialize (const FTransform & WorldPose) Public Attributes inherited from UUxtTransformConstraint Name int32 HandType int32 InteractionMode Protected Attributes inherited from UUxtTransformConstraint Name FTransform WorldPoseOnManipulationStart Public Functions Documentation function GetConstraintType virtual EUxtTransformMode GetConstraintType() const Reimplements : UUxtTransformConstraint::GetConstraintType Enabled manipulation modes. function ApplyConstraint virtual void ApplyConstraint( FTransform & Transform ) const Reimplements : UUxtTransformConstraint::ApplyConstraint Applies constraints to transforms during manipulation Public Attributes Documentation variable bFaceAway bool bFaceAway = false; Option to use this constraint to face away from the user. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_i_uxt_grab_handler.html": {
    "href": "api/_i_uxt_grab_handler.html",
    "title": "MRTK Unreal API Reference IUxtGrabHandler | UXT Documentation",
    "keywords": "IUxtGrabHandler Interface for components that can be grabbed. class IUxtGrabHandler; Header #include <UxtGrabHandler.h> Inheritance Inherited by UUxtGrabTargetComponent , UUxtPinchSliderComponent Public Functions Name bool CanHandleGrab (UPrimitiveComponent * Primitive) const void OnEnterGrabFocus ( UUxtNearPointerComponent * Pointer) void OnUpdateGrabFocus ( UUxtNearPointerComponent * Pointer) void OnExitGrabFocus ( UUxtNearPointerComponent * Pointer) void OnBeginGrab ( UUxtNearPointerComponent * Pointer) void OnUpdateGrab ( UUxtNearPointerComponent * Pointer) void OnEndGrab ( UUxtNearPointerComponent * Pointer) Public Functions Documentation function CanHandleGrab bool CanHandleGrab( UPrimitiveComponent * Primitive ) const Returns true if the this can handle events from this primitive. function OnEnterGrabFocus void OnEnterGrabFocus( UUxtNearPointerComponent * Pointer ) Raised when a pointer focuses the actor. function OnUpdateGrabFocus void OnUpdateGrabFocus( UUxtNearPointerComponent * Pointer ) Raised when a pointer has been updated while focused. function OnExitGrabFocus void OnExitGrabFocus( UUxtNearPointerComponent * Pointer ) Raised when a pointer stops focusing the actor. function OnBeginGrab void OnBeginGrab( UUxtNearPointerComponent * Pointer ) Raised when a pointer starts grabbing while overlapping the actor. function OnUpdateGrab void OnUpdateGrab( UUxtNearPointerComponent * Pointer ) Raised when a pointer has been updated while grabbing. function OnEndGrab void OnEndGrab( UUxtNearPointerComponent * Pointer ) Raised when a pointer stops grabbing or stops overlapping the actor while grabbing. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_a_uxt_pinch_slider_actor.html": {
    "href": "api/_a_uxt_pinch_slider_actor.html",
    "title": "MRTK Unreal API Reference AUxtPinchSliderActor | UXT Documentation",
    "keywords": "AUxtPinchSliderActor A simple HoloLens 2 style slider that can be moved by grabbing / pinching a slider thumb. The class is extensible to support additional functionality. class AUxtPinchSliderActor; Header #include <Controls/UxtPinchSliderActor.h> Inheritance Inherits from AActor Public Functions Name AUxtPinchSliderActor () float GetValue () const void SetValue (float NewValue) float GetMinValue () const void SetMinValue (float NewMinValue) float GetMaxValue () const void SetMaxValue (float NewMaxValue) float GetTrackLength () const void SetTrackLength (float NewTrackLength) bool GetStepWithTickMarks () const void SetStepWithTickMarks (bool bNewStepWithTickMarks) FText GetTitle () const void SetTitle (FText NewTitle) int GetValueTextDecimalPlaces () const void SetValueTextDecimalPlaces (int NewValueTextDecimalPlaces) bool GetAlignTextWithZ () const void SetAlignTextWithZ (bool bNewAlignTextWithZ) bool GetMoveTextWithThumb () const void SetMoveTextWithThumb (bool bNewMoveWithThumb) int GetNumTickMarks () const void SetNumTickMarks (int NewNumTickMarks) bool GetShowTickMarks () const void SetShowTickMarks (bool bNewShowTickMarks) FVector GetTickMarkScale () const void SetTickMarkScale (FVector NewTickMarkScale) bool GetInstanceTickMarks () const void SetInstanceTickMarks (bool InstanceTickMarks) FLinearColor GetDefaultThumbColor () const void SetDefaultThumbColor (FLinearColor NewDefaultThumbColor) FLinearColor GetFocusedThumbColor () const void SetFocusedThumbColor (FLinearColor NewFocusedThumbColor) FLinearColor GetGrabbedThumbColor () const void SetGrabbedThumbColor (FLinearColor NewGrabbedThumbColor) FLinearColor GetDisabledThumbColor () const void SetDisabledThumbColor (FLinearColor NewDisabledThumbColor) USoundCue * GetGrabSound () const void SetGrabSound (USoundCue * NewGrabSound) USoundCue * GetReleaseSound () const void SetReleaseSound (USoundCue * NewReleaseSound) USoundCue * GetTickSound () const void SetTickSound (USoundCue * NewTickSound) float GetDefaultThumbScale () const void SetDefaultThumbScale (float NewDefaultThumbScale) float GetFocusedThumbScale () const void SetFocusedThumbScale (float NewFocusedThumbScale) UCurveFloat * GetThumbScaleCurve () const void SetThumbScaleCurve (UCurveFloat * NewThumbScaleCurve) Protected Functions Name virtual void OnConstruction (const FTransform & Transform) override virtual void OnUpdateState ( UUxtPinchSliderComponent * Slider, EUxtSliderState NewState) virtual void OnBeginGrab ( UUxtPinchSliderComponent * Slider, UUxtPointerComponent * Pointer) virtual void OnUpdateValue ( UUxtPinchSliderComponent * Slider, float NewValue) virtual void OnEndGrab ( UUxtPinchSliderComponent * Slider, UUxtPointerComponent * Pointer) void OnUpdateTimeline (float Scale) Public Attributes Name FUxtPinchSliderValueUpdatedDelegate OnValueUpdated Protected Attributes Name UUxtPinchSliderComponent * PinchSlider UStaticMeshComponent * Thumb UStaticMeshComponent * Track class UInstancedStaticMeshComponent * TickMarks TArray< UStaticMeshComponent * > TickMarksNonInstanced USceneComponent * TextRoot class UTextRenderComponent * TitleText class UTextRenderComponent * ValueText class UAudioComponent * Audio UTimelineComponent * ScaleTimeline Public Functions Documentation function AUxtPinchSliderActor AUxtPinchSliderActor() function GetValue inline float GetValue() const function SetValue void SetValue( float NewValue ) function GetMinValue inline float GetMinValue() const function SetMinValue void SetMinValue( float NewMinValue ) function GetMaxValue inline float GetMaxValue() const function SetMaxValue void SetMaxValue( float NewMaxValue ) function GetTrackLength inline float GetTrackLength() const function SetTrackLength void SetTrackLength( float NewTrackLength ) function GetStepWithTickMarks inline bool GetStepWithTickMarks() const function SetStepWithTickMarks void SetStepWithTickMarks( bool bNewStepWithTickMarks ) function GetTitle inline FText GetTitle() const function SetTitle void SetTitle( FText NewTitle ) function GetValueTextDecimalPlaces inline int GetValueTextDecimalPlaces() const function SetValueTextDecimalPlaces void SetValueTextDecimalPlaces( int NewValueTextDecimalPlaces ) function GetAlignTextWithZ inline bool GetAlignTextWithZ() const function SetAlignTextWithZ void SetAlignTextWithZ( bool bNewAlignTextWithZ ) function GetMoveTextWithThumb inline bool GetMoveTextWithThumb() const function SetMoveTextWithThumb void SetMoveTextWithThumb( bool bNewMoveWithThumb ) function GetNumTickMarks inline int GetNumTickMarks() const function SetNumTickMarks void SetNumTickMarks( int NewNumTickMarks ) function GetShowTickMarks inline bool GetShowTickMarks() const function SetShowTickMarks void SetShowTickMarks( bool bNewShowTickMarks ) function GetTickMarkScale inline FVector GetTickMarkScale() const function SetTickMarkScale void SetTickMarkScale( FVector NewTickMarkScale ) function GetInstanceTickMarks inline bool GetInstanceTickMarks() const function SetInstanceTickMarks void SetInstanceTickMarks( bool InstanceTickMarks ) function GetDefaultThumbColor inline FLinearColor GetDefaultThumbColor() const function SetDefaultThumbColor void SetDefaultThumbColor( FLinearColor NewDefaultThumbColor ) function GetFocusedThumbColor inline FLinearColor GetFocusedThumbColor() const function SetFocusedThumbColor void SetFocusedThumbColor( FLinearColor NewFocusedThumbColor ) function GetGrabbedThumbColor inline FLinearColor GetGrabbedThumbColor() const function SetGrabbedThumbColor void SetGrabbedThumbColor( FLinearColor NewGrabbedThumbColor ) function GetDisabledThumbColor inline FLinearColor GetDisabledThumbColor() const function SetDisabledThumbColor void SetDisabledThumbColor( FLinearColor NewDisabledThumbColor ) function GetGrabSound inline USoundCue * GetGrabSound() const function SetGrabSound void SetGrabSound( USoundCue * NewGrabSound ) function GetReleaseSound inline USoundCue * GetReleaseSound() const function SetReleaseSound void SetReleaseSound( USoundCue * NewReleaseSound ) function GetTickSound inline USoundCue * GetTickSound() const function SetTickSound void SetTickSound( USoundCue * NewTickSound ) function GetDefaultThumbScale inline float GetDefaultThumbScale() const function SetDefaultThumbScale void SetDefaultThumbScale( float NewDefaultThumbScale ) function GetFocusedThumbScale inline float GetFocusedThumbScale() const function SetFocusedThumbScale void SetFocusedThumbScale( float NewFocusedThumbScale ) function GetThumbScaleCurve inline UCurveFloat * GetThumbScaleCurve() const function SetThumbScaleCurve void SetThumbScaleCurve( UCurveFloat * NewThumbScaleCurve ) Protected Functions Documentation function OnConstruction virtual void OnConstruction( const FTransform & Transform ) override function OnUpdateState virtual void OnUpdateState( UUxtPinchSliderComponent * Slider, EUxtSliderState NewState ) function OnBeginGrab virtual void OnBeginGrab( UUxtPinchSliderComponent * Slider, UUxtPointerComponent * Pointer ) function OnUpdateValue virtual void OnUpdateValue( UUxtPinchSliderComponent * Slider, float NewValue ) function OnEndGrab virtual void OnEndGrab( UUxtPinchSliderComponent * Slider, UUxtPointerComponent * Pointer ) function OnUpdateTimeline void OnUpdateTimeline( float Scale ) Public Attributes Documentation variable OnValueUpdated FUxtPinchSliderValueUpdatedDelegate OnValueUpdated; Event raised when the slider's value changes. Protected Attributes Documentation variable PinchSlider UUxtPinchSliderComponent * PinchSlider; The slider functionality. variable Thumb UStaticMeshComponent * Thumb; The thumb visuals. variable Track UStaticMeshComponent * Track; The track visuals. variable TickMarks class UInstancedStaticMeshComponent * TickMarks; The tick mark visuals if bInstanceTickMarks is true. variable TickMarksNonInstanced TArray< UStaticMeshComponent * > TickMarksNonInstanced; The tick mark visuals if bInstanceTickMarks is false. variable TextRoot USceneComponent * TextRoot; Root text component to allow text to move as a block. variable TitleText class UTextRenderComponent * TitleText; The title text, configure using the 'Title' property. variable ValueText class UTextRenderComponent * ValueText; The value text. TODO configure variable Audio class UAudioComponent * Audio; The audio cues, configure using the 'Slider Sounds' properties. variable ScaleTimeline UTimelineComponent * ScaleTimeline; The timeline for scaling the thumb, configuring using the 'Slider Thumb Scaling' properties. Updated on 23 August 2021 at 12:07:13 Coordinated Universal Time"
  },
  "api/_u_uxt_grab_handler.html": {
    "href": "api/_u_uxt_grab_handler.html",
    "title": "MRTK Unreal API Reference UUxtGrabHandler | UXT Documentation",
    "keywords": "UUxtGrabHandler class UUxtGrabHandler; Inheritance Inherits from UInterface Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_uxt_far_target.html": {
    "href": "api/_u_uxt_far_target.html",
    "title": "MRTK Unreal API Reference UUxtFarTarget | UXT Documentation",
    "keywords": "UUxtFarTarget class UUxtFarTarget; Inheritance Inherits from UInterface Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_uxt_far_pointer_component.html": {
    "href": "api/_u_uxt_far_pointer_component.html",
    "title": "MRTK Unreal API Reference UUxtFarPointerComponent | UXT Documentation",
    "keywords": "UUxtFarPointerComponent Component that casts a ray for the given hand-tracked hand and raises far interaction events on the far targets hit. A far target is an actor or component implementing the UUxtFarTarget interface. class UUxtFarPointerComponent; Header #include <Input/UxtFarPointerComponent.h> Inheritance Inherits from UUxtPointerComponent , UActorComponent Public Functions Name UUxtFarPointerComponent () FVector GetPointerOrigin () const FQuat GetPointerOrientation () const FVector GetRayStart () const UPrimitiveComponent * GetHitPrimitive () const FVector GetHitPoint () const FVector GetHitNormal () const bool IsPressed () const bool IsEnabled () const virtual void SetActive (bool bNewActive, bool bReset =false) override virtual void TickComponent (float DeltaTime, ELevelTick TickType, FActorComponentTickFunction * ThisTickFunction) override virtual void SetFocusLocked (bool bLocked) override virtual UObject * GetFocusTarget () const override virtual FTransform GetCursorTransform () const override Public Attributes Name TEnumAsByte< ECollisionChannel > TraceChannel float RayStartOffset float RayLength FUxtFarPointerEnabledDelegate OnFarPointerEnabled FUxtFarPointerDisabledDelegate OnFarPointerDisabled Additional inherited members Public Functions inherited from UUxtPointerComponent Name UUxtPointerComponent () =default bool GetFocusLocked () const Public Attributes inherited from UUxtPointerComponent Name EControllerHand Hand Protected Attributes inherited from UUxtPointerComponent Name bool bFocusLocked Public Functions Documentation function UUxtFarPointerComponent UUxtFarPointerComponent() function GetPointerOrigin FVector GetPointerOrigin() const Origin of the pointer ray as reported by the hand tracker. See GetRayStart() for actual start of the ray used for querying the scene. function GetPointerOrientation FQuat GetPointerOrientation() const Orientation of the pointer ray. function GetRayStart FVector GetRayStart() const Start of the ray used for querying the scene. This is the pointer origin shifted by the ray start offset in the pointer forward direction. function GetHitPrimitive UPrimitiveComponent * GetHitPrimitive() const Primitive the pointer is currently hitting or null if none. function GetHitPoint FVector GetHitPoint() const Current hit point location or ray end if there's no hit. function GetHitNormal FVector GetHitNormal() const Current hit point normal or negative ray direction if there's no hit. function IsPressed bool IsPressed() const Whether the pointer is currently pressed. function IsEnabled bool IsEnabled() const Whether the pointer is currently enabled. Hit information is only valid while the pointer is enabled. function SetActive virtual void SetActive( bool bNewActive, bool bReset =false ) override function TickComponent virtual void TickComponent( float DeltaTime, ELevelTick TickType, FActorComponentTickFunction * ThisTickFunction ) override function SetFocusLocked virtual void SetFocusLocked( bool bLocked ) override Reimplements : UUxtPointerComponent::SetFocusLocked Set the lock state of the pointer. Locked pointers don't update their hit, remaining focused on the primitive they were hitting until unlocked. function GetFocusTarget virtual UObject * GetFocusTarget() const override function GetCursorTransform virtual FTransform GetCursorTransform() const override Public Attributes Documentation variable TraceChannel TEnumAsByte< ECollisionChannel > TraceChannel = ECollisionChannel::ECC_Visibility; Trace channel to be used in the pointer's line trace query. variable RayStartOffset float RayStartOffset = 5; Start of the pointer ray expressed as an offset from the hand ray origin in the ray direction. variable RayLength float RayLength = 500; Pointer ray length from ray start. variable OnFarPointerEnabled FUxtFarPointerEnabledDelegate OnFarPointerEnabled; variable OnFarPointerDisabled FUxtFarPointerDisabledDelegate OnFarPointerDisabled; Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_f_uxt_icon_brush.html": {
    "href": "api/_f_uxt_icon_brush.html",
    "title": "MRTK Unreal API Reference FUxtIconBrush | UXT Documentation",
    "keywords": "FUxtIconBrush Structure which contains data representing an icon's appearance. Icons are currently represented as Unicode characters or strings, but in the future could be textures, models, etc. struct FUxtIconBrush; Header #include <UxtIconBrush.h> Public Attributes Name FString Icon EUxtIconBrushContentType ContentType FUxtTextBrush TextBrush Public Attributes Documentation variable Icon FString FUxtIconBrush::Icon FString Icon = \"EBD2\"; String of characters representing a Unicode symbol, or a literal string. variable ContentType EUxtIconBrushContentType FUxtIconBrush::ContentType EUxtIconBrushContentType ContentType = EUxtIconBrushContentType::UnicodeCharacter; Describes what the icon brush content represents. variable TextBrush FUxtTextBrush FUxtIconBrush::TextBrush FUxtTextBrush TextBrush; Text settings for the icon. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_f_uxt_grab_pointer_focus.html": {
    "href": "api/_f_uxt_grab_pointer_focus.html",
    "title": "MRTK Unreal API Reference FUxtGrabPointerFocus | UXT Documentation",
    "keywords": "FUxtGrabPointerFocus Focus implementation for the grab pointers. struct FUxtGrabPointerFocus; Header #include <UxtPointerFocus.h> Inheritance Inherits from FUxtPointerFocus Public Functions Name void BeginGrab ( UUxtNearPointerComponent * Pointer) void UpdateGrab ( UUxtNearPointerComponent * Pointer) void EndGrab ( UUxtNearPointerComponent * Pointer) bool IsGrabbing () const Protected Functions Name virtual UClass * GetInterfaceClass () const override virtual bool ImplementsTargetInterface (UObject * Target) const override virtual bool GetClosestPointOnTarget (const UActorComponent * Target, const UPrimitiveComponent * Primitive, const FVector & Point, FVector & OutClosestPoint, FVector & OutNormal) const override virtual void RaiseEnterFocusEvent (UPrimitiveComponent * Target, UUxtNearPointerComponent * Pointer) const override virtual void RaiseUpdateFocusEvent (UPrimitiveComponent * Target, UUxtNearPointerComponent * Pointer) const override virtual void RaiseExitFocusEvent (UPrimitiveComponent * Target, UUxtNearPointerComponent * Pointer) const override Additional inherited members Public Functions inherited from FUxtPointerFocus Name virtual ~FUxtPointerFocus () const FVector & GetClosestTargetPoint () const const FVector & GetClosestTargetNormal () const UObject * GetFocusedTarget () const UPrimitiveComponent * GetFocusedPrimitive () const UObject * GetFocusedTargetChecked () const void SelectClosestTarget ( UUxtNearPointerComponent * Pointer, const FTransform & PointerTransform, const TArray< FOverlapResult > & Overlaps) void UpdateClosestTarget (const FTransform & PointerTransform) void SelectClosestPointOnTarget ( UUxtNearPointerComponent * Pointer, const FTransform & PointerTransform, UActorComponent * NewTarget) void ClearFocus ( UUxtNearPointerComponent * Pointer) void UpdateFocus ( UUxtNearPointerComponent * Pointer) const UActorComponent * FindInterfaceComponent (AActor * Owner) const Protected Functions inherited from FUxtPointerFocus Name void SetFocus ( UUxtNearPointerComponent * Pointer, const FTransform & PointerTransform, const FUxtPointerFocusSearchResult & FocusResult) FUxtPointerFocusSearchResult FindClosestTarget (const TArray< FOverlapResult > & Overlaps, const FVector & Point) const FUxtPointerFocusSearchResult FindClosestPointOnComponent (UActorComponent * Target, const FVector & Point) const Public Functions Documentation function BeginGrab void BeginGrab( UUxtNearPointerComponent * Pointer ) Notify the target object that grab has started. function UpdateGrab void UpdateGrab( UUxtNearPointerComponent * Pointer ) Notify the grabbed target object that the pointer has been updated. function EndGrab void EndGrab( UUxtNearPointerComponent * Pointer ) Notify the target object that grab has ended. function IsGrabbing bool IsGrabbing() const Protected Functions Documentation function GetInterfaceClass virtual UClass * GetInterfaceClass() const override Reimplements : FUxtPointerFocus::GetInterfaceClass Get the interface class that targets for the pointer must implement. function ImplementsTargetInterface virtual bool ImplementsTargetInterface( UObject * Target ) const override Reimplements : FUxtPointerFocus::ImplementsTargetInterface Returns true if the given object implements the required target interface. function GetClosestPointOnTarget virtual bool GetClosestPointOnTarget( const UActorComponent * Target, const UPrimitiveComponent * Primitive, const FVector & Point, FVector & OutClosestPoint, FVector & OutNormal ) const override Reimplements : FUxtPointerFocus::GetClosestPointOnTarget Find the closest point on the given primitive using the distance function of the target interface. function RaiseEnterFocusEvent virtual void RaiseEnterFocusEvent( UPrimitiveComponent * Target, UUxtNearPointerComponent * Pointer ) const override Reimplements : FUxtPointerFocus::RaiseEnterFocusEvent Notify the target object that it has entered focus. function RaiseUpdateFocusEvent virtual void RaiseUpdateFocusEvent( UPrimitiveComponent * Target, UUxtNearPointerComponent * Pointer ) const override Reimplements : FUxtPointerFocus::RaiseUpdateFocusEvent Notify the focused target object that the pointer has been updated. function RaiseExitFocusEvent virtual void RaiseExitFocusEvent( UPrimitiveComponent * Target, UUxtNearPointerComponent * Pointer ) const override Reimplements : FUxtPointerFocus::RaiseExitFocusEvent Notify the target object that it has exited focus. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_f_uxt_font_character.html": {
    "href": "api/_f_uxt_font_character.html",
    "title": "MRTK Unreal API Reference FUxtFontCharacter | UXT Documentation",
    "keywords": "FUxtFontCharacter Blueprint structure which contains data required to render a character within a offline font. struct FUxtFontCharacter; Header #include <UxtInternalFunctionLibrary.h> Public Attributes Name FString Text UTexture2D * Texture FLinearColor UVTransform FVector Size Public Attributes Documentation variable Text FString FUxtFontCharacter::Text FString Text; The single font character as a string. variable Texture UTexture2D* FUxtFontCharacter::Texture UTexture2D * Texture = nullptr; The texutre containing the font character. variable UVTransform FLinearColor FUxtFontCharacter::UVTransform FLinearColor UVTransform; The UV offset within the texture to find the character. variable Size FVector FUxtFontCharacter::Size FVector Size; The normalized width and height of the character. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_f_uxt_button_visuals_brush.html": {
    "href": "api/_f_uxt_button_visuals_brush.html",
    "title": "MRTK Unreal API Reference FUxtButtonVisualsBrush | UXT Documentation",
    "keywords": "FUxtButtonVisualsBrush Structure containing data representing button visual assets and properties. struct FUxtButtonVisualsBrush; Header #include <UxtButtonBrush.h> Public Attributes Name UMaterialInterface * BackPlateMaterial UStaticMesh * BackPlateMesh UMaterialInterface * FrontPlateMaterial UStaticMesh * FrontPlateMesh UMaterialInterface * FrontPlatePulseLeftMaterial UMaterialInterface * FrontPlatePulseRightMaterial float PulseTime float PulseFadeTime float IconFocusSpeed UCurveFloat * IconFocusCurve UMaterialInterface * TogglePlateMaterial Public Attributes Documentation variable BackPlateMaterial UMaterialInterface* FUxtButtonVisualsBrush::BackPlateMaterial UMaterialInterface * BackPlateMaterial = nullptr; The material used for the button back plate. variable BackPlateMesh UStaticMesh* FUxtButtonVisualsBrush::BackPlateMesh UStaticMesh * BackPlateMesh = nullptr; The mesh used for the button back plate. variable FrontPlateMaterial UMaterialInterface* FUxtButtonVisualsBrush::FrontPlateMaterial UMaterialInterface * FrontPlateMaterial = nullptr; The material used for the button front plate. variable FrontPlateMesh UStaticMesh* FUxtButtonVisualsBrush::FrontPlateMesh UStaticMesh * FrontPlateMesh = nullptr; The mesh used for the button front plate. variable FrontPlatePulseLeftMaterial UMaterialInterface* FUxtButtonVisualsBrush::FrontPlatePulseLeftMaterial UMaterialInterface * FrontPlatePulseLeftMaterial = nullptr; Handle to the default left pulse materials to use for the button front plate. variable FrontPlatePulseRightMaterial UMaterialInterface* FUxtButtonVisualsBrush::FrontPlatePulseRightMaterial UMaterialInterface * FrontPlatePulseRightMaterial = nullptr; Handle to the default right pulse materials to use for the button front plate. variable PulseTime float FUxtButtonVisualsBrush::PulseTime float PulseTime = 0.4f; How long it takes the front plate pulse to animate in size in seconds. variable PulseFadeTime float FUxtButtonVisualsBrush::PulseFadeTime float PulseFadeTime = 0.125f; How long it takes the front plate pulse to fade out in seconds. variable IconFocusSpeed float FUxtButtonVisualsBrush::IconFocusSpeed float IconFocusSpeed = 20.f; When a button is focused, how quickly the icon animates to the focused location. variable IconFocusCurve UCurveFloat* FUxtButtonVisualsBrush::IconFocusCurve UCurveFloat * IconFocusCurve = nullptr; Curve which describes the motion of the focus animation. variable TogglePlateMaterial UMaterialInterface* FUxtButtonVisualsBrush::TogglePlateMaterial UMaterialInterface * TogglePlateMaterial = nullptr; The material used for the button toggle plate. Note, all buttons may not have a toggle plate. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "Docs/PinchSlider.html": {
    "href": "Docs/PinchSlider.html",
    "title": "Pinch Slider | UXT Documentation",
    "keywords": "Pinch slider Sliders are UI components that allow you to continuously change a value by moving a slider on a track. Currently the Pinch Slider can be moved by directly grabbing the slider, either directly or at a distance. Example scene You can find examples in the SliderExample map in the UX Tools Examples plugin. How to use sliders You can simply add a UxtPinchSliderActor to your level. This will give you a HoloLens 2 style slider ready to use. To react to changes to the slider value subscribe to the OnValueUpdated event in the actor: If the default slider actor doesn't suit your needs, you can create your own slider from scratch following these steps: Create a new actor blueprint with a UxtPinchSliderComponent as the root component of the actor. Add a Sphere static mesh to the actor and call it Thumb . Set its scale to 0.025 . Select the UxtPinchSliderComponent and set the Visuals property to reference the sphere mesh. Add a Cylinder static mesh to the actor and call it Track . Set its scale to (0.01, 0.01, 0.5) and its X rotation to 90 degrees. If the slider is configured correctly it will look like this: Events UxtPinchSliderActor has just one event, covering the most common use case: OnValueUpdated : raised when the slider value changes. UxtPinchSliderComponent has a number of events that can be used to respond to slider input: OnUpdateState : raised when the slider changes state. OnBeginFocus : raised when a pointer starts focusing the slider. OnUpdateFocus : raised when a focusing pointer updates. OnEndFocus : raised when a pointer stops focusing the slider. OnBeginGrab : raised when the slider is grabbed. OnUpdateValue : raised when the slider's value changes. OnEndGrab : raised when the slider is released. OnEnable : raised when the slider is enabled. OnDisable : raised when the slider is disabled."
  },
  "Docs/PalmUpConstraintComponent.html": {
    "href": "Docs/PalmUpConstraintComponent.html",
    "title": "Palm-Up Constraint Component | UXT Documentation",
    "keywords": "Palm-Up Constraint Component Hand constraint specialization that activates only when the palm is facing the player. Usage Create a PalmUpConstraintComponent on an Actor. See Hand constraint documentation for common settings. The Palm-Up constraint will activate when the palm normal is within a cone of size Max Palm Angle of the camera direction. Optional conditions Require Flat Hand : Requires the user to have their hand flat for the constraint to activate. Flatness is approximated by checking the triangle between palm, index finger tip and ring finger tip. If the triangle aligns to the palm within the Max Flat Hand Angle the hand is considered flat. Require Gaze : Requires the user to be looking at their hand for the constraint to activate. This will use eye gaze by default but will fall back to head gaze if no eye tracker is available. The activation area will shift towards the Hand Constraint's zone: Ulnar Side : The activation area shifts to the little finger metacarpal joint. Radial Side : The activation area shifts to between the index finger metacarpal and the thumb proximal joints. Above Finger Tips : The activation area shifts to between the middle finger tip and the ring finger tip joints. Below Wrist : The activation area shifts to the wrist joint."
  },
  "Docs/NearMenu.html": {
    "href": "Docs/NearMenu.html",
    "title": "Near Menu | UXT Documentation",
    "keywords": "Near Menu Near Menu is a UX control which provides a collection of buttons or other UI components. It floats around the user's body using the follow component and is easily accessible anytime. Since it is loosely coupled with the user, it does not disturb the user's interaction with the target content. The user can use the 'Pin' button to world-lock/unlock the menu. The menu can be grabbed and placed at a specific position. Interaction behavior Tag-along : The menu follows you and stays within 30-60cm range from the user for the near interactions. Pin : Using the 'Pin' button, the menu can be world-locked and released. Grab and move : The menu is always grabbable and movable. Regardless of the previous state, the menu will be pinned (world-locked) when grabbed and released. There are visual cues for the grabbable area. They are revealed on hand proximity. Blueprints Near Menu blueprints are designed to demonstrate how to use UX Tool's various components to build menus for near interactions. It is recommended to derive from these blueprints when creating new or custom near menus. BP_NearMenu2x1.uasset BP_NearMenu3x1.uasset BP_NearMenu3x2.uasset BP_NearMenu3x3.uasset BP_NearMenu4x1.uasset BP_NearMenu4x2.uasset Example level There are some examples of various near menus within the \\UXToolsGame\\Plugins\\UXToolsExamples\\Content\\NearMenu\\NearMenuExample.umap level. Creating a near menu When creating a near menu for your application it is recommended to copy the near menu you need from the above Blueprints into your project to derive from. Create a new blueprint class, select one of the BP_NearMenu* blueprints as a parent class. In this example we will derive from BP_NearMenu3x3 and call our blueprint BP_ExampleNearMenu . Now that we have our foundation, we can customize the menu. Any button may be customized by selecting a button ChildActorComponent and modifying settings within the child actor template. The UxtFollow and UxtGenericManipulator components can be altered to change follow and manipulation behavior respectively. A handful of properties exist on the near menu blueprint root to adjust the auto follow behavior. Finally, to tie logic to buttons on the menu we need to bind to the On Button Pressed event. The below blueprint graph will print \"Hello\" when \"Menu One\" is pressed: The Get Component by Class method is looking for a UxtPressableButton component. More information FollowComponent Manipulator PressableButton"
  },
  "Docs/Manipulator.html": {
    "href": "Docs/Manipulator.html",
    "title": "Manipulator Component | UXT Documentation",
    "keywords": "Manipulator Components Manipulator components allow an actor to be picked up by a user and then moved, rotated or scaled. Generic Manipulator The Generic Manipulator component is a general-purpose implementation of the Manipulator Component Base . It supports both one and two-handed manipulation with a number of configurable settings to change its behavior. One-handed manipulation If one-handed manipulation is enabled the actor can be moved with just one hand. This mode supports movement and rotation, but not scaling of the actor. The way hand rotation translates into actor rotation depends on the One Hand Rotation Mode : Rotate About Object Center : Only works for articulated hands/controllers. Rotate object using rotation of the hand/controller, but about the object center point. Useful for inspecting at a distance. Rotate About Grab Point : Only works for articulated hands/controllers. Rotate object as if it was being held by hand/controller. Useful for inspection. Two-handed manipulation If two-handed manipulation is enabled the actor can be moved, rotated, and scaled by grabbing it with both hands. Each of these actions can be enabled or disabled separately as needed, e.g. an actor can have rotation and scaling enabled while movement is disabled. Movement uses the center point between both hands, so each hand contributes half of the translation. Rotation is based on imaginary axis between both hands. The actor will rotate with the change of this axis, while avoiding roll around it. Scaling uses the change in distance between hands. Transform Constraints Manipulation of an object can be constrained using transform constraints. Transform constraints are components that are added to an actor and are used by the manipulator to limit its effects on the target component. Constraints can be added to a blueprint or actor using the constraint picker, which is exposed in the Constraints dropdown on the generic manipulator. The constraint picker automatically populates with classes inheriting from UxtTransformConstraint so user defined constraints can also be added using this dialog box. The constraint manager can be configured to automatically detect and use all constraints attached to the actor or a user selected subset of the attached constraints. Smoothing The generic manipulator has a simple smoothing option to reduce jittering from noisy input. This becomes especially important with one-handed rotation, where hand tracking can be unreliable and the resulting transform amplifies jittering. The smoothing method is based on a low-pass filter that gets applied to the source transform location and rotation. The resulting actor transform T_final is a exponentially weighted average of the current transform T_current and the raw target transform T_target based on the time step: T_final = Lerp( T_current, T_target, Exp(-Smoothing * DeltaSeconds) ) Notes Manipulating a Procedural Mesh When using the Generic Manipulator with a Procedural Mesh , you will need to: Disable \"Use Complex as Simple Collision\" on the Procedural Mesh . Set \"Create Collision\" when creating the Procedural Mesh . This is due to UXTools only querying for simple collision volumes when detecting interaction targets, in order to ensure correct detection in all situations. You can read more about simple vs complex collisions here . Manipulating physics-enabled components Sometimes you want to manipulate components that are physics-enabled, that is, components affected by gravity and collisions with other actors. If your physically simulated component (e.g. a Static Mesh Component with Simulate Physics enabled) is the root component of the actor, Generic Manipulator will work out of the box. If the component is not the root, you'll have to set it as the target component of the manipulator: This is necessary because: By default Generic Manipulator modifies the transform of the actor's root component. Physics-enabled components detach themselves from their attach parents automatically at simulation start."
  },
  "api/_u_uxt_fixed_distance_constraint.html": {
    "href": "api/_u_uxt_fixed_distance_constraint.html",
    "title": "MRTK Unreal API Reference UUxtFixedDistanceConstraint | UXT Documentation",
    "keywords": "UUxtFixedDistanceConstraint Constraint to fix the object distance from another object. Usage: Attach to actor that the constraint should be applied to. If necessary, configure the object to constrain to. This will default to the head if not set. class UUxtFixedDistanceConstraint; Header #include <Interactions/Constraints/UxtFixedDistanceConstraint.h> Inheritance Inherits from UUxtTransformConstraint , UActorComponent Public Functions Name virtual void Initialize (const FTransform & WorldPose) override virtual EUxtTransformMode GetConstraintType () const override virtual void ApplyConstraint (FTransform & Transform) const override Public Attributes Name FComponentReference ConstraintComponent Additional inherited members Public Attributes inherited from UUxtTransformConstraint Name int32 HandType int32 InteractionMode Protected Attributes inherited from UUxtTransformConstraint Name FTransform WorldPoseOnManipulationStart Public Functions Documentation function Initialize virtual void Initialize( const FTransform & WorldPose ) override Reimplements : UUxtTransformConstraint::Initialize Intended to be called on manipulation started function GetConstraintType virtual EUxtTransformMode GetConstraintType() const override Reimplements : UUxtTransformConstraint::GetConstraintType Enabled manipulation modes. function ApplyConstraint virtual void ApplyConstraint( FTransform & Transform ) const override Reimplements : UUxtTransformConstraint::ApplyConstraint Applies constraints to transforms during manipulation Public Attributes Documentation variable ConstraintComponent FComponentReference ConstraintComponent; Component to fix distance to. Defaults to the head. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_uxt_finger_cursor_component.html": {
    "href": "api/_u_uxt_finger_cursor_component.html",
    "title": "MRTK Unreal API Reference UUxtFingerCursorComponent | UXT Documentation",
    "keywords": "UUxtFingerCursorComponent When added to an actor with a near pointer, this component displays a ring cursor oriented towards the current poke target and scaled according to the distance. class UUxtFingerCursorComponent; Header #include <Controls/UxtFingerCursorComponent.h> Inheritance Inherits from UUxtRingCursorComponent Public Functions Name UUxtFingerCursorComponent () Protected Functions Name virtual void BeginPlay () override virtual void TickComponent (float DeltaTime, ELevelTick TickType, FActorComponentTickFunction * ThisTickFunction) override Public Attributes Name float CursorScale bool bShowOnGrabTargets Protected Attributes Name float AlignWithSurfaceDistance Public Functions Documentation function UUxtFingerCursorComponent UUxtFingerCursorComponent() Protected Functions Documentation function BeginPlay virtual void BeginPlay() override function TickComponent virtual void TickComponent( float DeltaTime, ELevelTick TickType, FActorComponentTickFunction * ThisTickFunction ) override Public Attributes Documentation variable CursorScale float CursorScale = 1.0f; Cursor scale. variable bShowOnGrabTargets bool bShowOnGrabTargets = false; Show the finger cursor on grab targets. Protected Attributes Documentation variable AlignWithSurfaceDistance float AlignWithSurfaceDistance = 10.0f; Distance at which the cursor starts to align with pokable surfaces. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_uxt_default_hand_tracker_subsystem.html": {
    "href": "api/_u_uxt_default_hand_tracker_subsystem.html",
    "title": "MRTK Unreal API Reference UUxtDefaultHandTrackerSubsystem | UXT Documentation",
    "keywords": "UUxtDefaultHandTrackerSubsystem Subsystem for registering the default hand tracker. This subsystem creates the default hand tracker on player login. It registers input action mappings and binds to input events for Select/Grip actions. It also updates MotionControllerData of the default hand tracker once per world tick. class UUxtDefaultHandTrackerSubsystem; Header #include <UxtDefaultHandTrackerSubsystem.h> Inheritance Inherits from UEngineSubsystem Public Functions Name virtual void Initialize (FSubsystemCollectionBase & Collection) override virtual void Deinitialize () override Public Functions Documentation function Initialize virtual void Initialize( FSubsystemCollectionBase & Collection ) override function Deinitialize virtual void Deinitialize() override Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_uxt_constraint_picker_widget.html": {
    "href": "api/_u_uxt_constraint_picker_widget.html",
    "title": "MRTK Unreal API Reference UUxtConstraintPickerWidget | UXT Documentation",
    "keywords": "UUxtConstraintPickerWidget Editor utility widget for adding constraints to actors. class UUxtConstraintPickerWidget; Header #include <UxtConstraintPickerWidget.h> Inheritance Inherits from UEditorUtilityWidget Public Functions Name void SetTabID (FName ID) void SetOwner (TWeakObjectPtr< UObject > Owner) bool HasValidOwner () const Protected Functions Name void OnOwnerChanged () TArray< TSubclassOf< UUxtTransformConstraint > > GetConstraintClasses () const FString GetConstraintName (TSubclassOf< UUxtTransformConstraint > ConstraintClass) FString GetConstraintDescription (TSubclassOf< UUxtTransformConstraint > ConstraintClass) bool AddConstraint (TSubclassOf< UUxtTransformConstraint > ConstraintClass) Protected Attributes Name FName TabID Public Functions Documentation function SetTabID void SetTabID( FName ID ) Sets the unique identifier for the tab this EditorUtilityWidget was spawned into. function SetOwner void SetOwner( TWeakObjectPtr< UObject > Owner ) Set the wiget's owning component. function HasValidOwner bool HasValidOwner() const Returns true if we have a valid handle to the actor being modified. Protected Functions Documentation function OnOwnerChanged void OnOwnerChanged() Event which triggers when the owner is changed. function GetConstraintClasses TArray< TSubclassOf< UUxtTransformConstraint > > GetConstraintClasses() const Get all classes that inherit from UxtTransformConstraint. function GetConstraintName FString GetConstraintName( TSubclassOf< UUxtTransformConstraint > ConstraintClass ) Get the name of the constraint as a formatted display string. function GetConstraintDescription FString GetConstraintDescription( TSubclassOf< UUxtTransformConstraint > ConstraintClass ) Get the description for the constraint, this is the comment above the constraint class. function AddConstraint bool AddConstraint( TSubclassOf< UUxtTransformConstraint > ConstraintClass ) Add the selected constraint to the actor / blueprint. Protected Attributes Documentation variable TabID FName TabID; Gets unique identifier for the tab this EditorUtilityWidget was spawned into. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_x_tools_shaders.html": {
    "href": "api/_u_x_tools_shaders.html",
    "title": "MRTK Unreal API Reference UXToolsShaders | UXT Documentation",
    "keywords": "UXToolsShaders class UXToolsShaders; Inheritance Inherits from ModuleRules Public Functions Name UXToolsShaders (ReadOnlyTargetRules Target) Public Functions Documentation function UXToolsShaders inline UXToolsShaders( ReadOnlyTargetRules Target ) Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "Docs/HandConstraintComponent.html": {
    "href": "Docs/HandConstraintComponent.html",
    "title": "Hand Constraint Component | UXT Documentation",
    "keywords": "Hand Constraint Component Component that calculates a goal based on hand tracking and moves the owning actor. It keeps the actor position and rotation aligned with a hand while avoiding overlap with fingers. Several zones around the hand supported: radial and ulnar for the thumb side and its opposite, as well as above and below the hand. The goal position is computed by casting a ray in the direction of the one at a bounding box around the hand joints. The constraint can be oriented on either the hand rotation alone or facing the player. Usage Create a HandConstraintComponent on an Actor. Set the Hand property to select which hand should be tracked. If 'Any Hand' is selected, the first tracked hand will be used and switch to the opposite when tracking is lost. The Zone defines the general area around the hand that the actor is placed in. GoalMargin can be used to increase the distance from the hand for larger actors. At runtime the component will move the actor towards the goal position and rotation. Movement can be disabled with the MoveOwningActor option. In that case the goal position and rotation will still be computed and can be used in blueprints. The component will by default use smoothing to avoid jittering artifacts resulting from hand tracking. Smoothing can be disabled by setting LocationLerpTime and/or RotationLerpTime properties to zero. The higher these values, the more smoothing will be applied and the longer it will take for the actor to reach the goal. Rotation Modes Two main rotation modes are supported: Look-at-Camera : The actor X axis is oriented towards the player head, with Z in the global \"up\" direction. Hand Rotation : The actor aligns with the palm. X axis is facing the inside of the palm, Z aligns with the direction of fingers. The zone direction and the rotation can be configured independently. For example the zone offset can be aligned with the palm, while the rotation faces the camera: Constraint Activation The constraint becomes active when a usable hand could be found, which matches the Hand property. If Any Hand is selected, either left or right hand will be used, depending on which hand starts tracking first. If the current Tracked Hand is lost the opposite hand will be used. The constraint becomes inactive when neither hand is found. By default the constraint will always have a valid goal if a usable hand is tracking. Extended constraint variants can have further conditions, such as the Palm-Up constraint which only becomes when the hand faces the camera. Events Constraint Activated/Deactivated : Called when the constraint becomes active or inactive respectively. The basic HandConstraintComponent only deactivates when hand tracking is lost. Extended hand constraint classes can have additional conditions. For example the Palm-Up constraint also requires that the palm is facing the camera. Begin/End Tracking : Called when a hand starts tracking or when tracking is lost. This includes the case where the Hand settings is 'Any Hand' and tracking switches from one hand to the other. In this case first the EndTracking event for the old hand is called and then the BeginTracking event for the new hand."
  },
  "Docs/Graphics.html": {
    "href": "Docs/Graphics.html",
    "title": "Graphics | UXT Documentation",
    "keywords": "Graphics UX Tools contains a handful of graphics and rendering techniques to implement Fluent Design System principles, and remain performant on Mixed Reality devices. Materials Many mobile stereo headsets are fill rate bound, to reduce fill rate materials should be as simple, or inexpensive as possible. A handful of inexpensive material instances are included with the toolkit which derive from M_SimpleLit_Color. M_SimpleLit_Color uses the Unreal unlit lighting model to avoid extra computations, but uses the MF_SimpleLit material function to perform basic realtime Blinn-Phong lighting on a single (virtual) directional light. The virtual directional light's properties are passed in via the MPC_UXSettings material parameter collection . Note Unreal's built in light types are not included within MF_SimpleLit calculations. MPC_UXSettings contains global shader constants that are used to drive lighting effects as well as UI effects. For example, the left and right pointer positions are updated each frame within MPC_UXSettings to drive lighting effects emitted from the hand interaction pointers. Shaders To achieve visual parity with the HoloLens 2 shell, a couple of shaders exist in the \"UX Tools plugin root\"/Shaders/Public/ directory. A shader source directory mapping is created by the UX Tools plugin to allow any UE4 material to reference shaders within that directory as /Plugin/UXTools/Public/Shader_Name.ush . Note Note, many of the shaders within this directory are generated from an external tool, and are not formatted for user readability. A couple of shaders are described below in more detail, as well as any special considerations which must be made when using the shader. Button Box The M_ButtonBox material and Bounding_Box.ush shader generate glowing edges on a cube with optional circular blob. The blob appears only on the active face set with the Blob_Active_Face parameter. The shader must be used with the correct corresponding cube model. The special model enables the shader to render only the visible areas of the surfaces. The last two letters of the SM_FrontPlate_xx model name indicates which face is active. For example, SM_FrontPlate_PY indicates the positive y-axis. Rounded Edge Thick The M_RoundedEdgeThick material and Rounded_Edge_Thick.ush shader are designed to render a quad as an outlined rounded rectangle with depth. The shader works with a special mesh that approximates the round corners using triangles and includes additional information for anti-aliased silhouette edges. UX Tools includes several models named SM_BackPlateRoundedThick_# where # is the number of triangles per rounded corner. Use the model with the fewest triangles that works for your scenario. Note Note, the SM_BackPlateRoundedThick_# mesh and Rounded_Edge_Thick.ush shader assume the local y-axis is up, and not Unreal's traditional z-axis up. These assumptions were made when the Rounded_Edge_Thick.ush shader was authored in a separate content creation tool. To resolve these assumptions the UxtBackPlateComponent and Rounded_Edge_Thick.ush perform an additional rotation. This rotation is transparent to the end user and should not effect anything but advanced use cases. Thick Finger Ring The M_FingerTipRing material and Thick_Finger_Ring.ush shader with the M_FingerTipRing model are used to create a volumetric finger tip affordance. Bounding Box The M_BoundsControl material and Bounding_Box.ush shader generate glowing edges on a cube with optional glowing blob and on/off transition effect. The shader must be used with the SM_BoundsControl model. The special models enable the shader to render only the visible areas of the box surfaces. The above shader uses additive blending; if alpha blending is preferred a second method of creating the Bounding Box effects exists which works by splitting the box affordance into parts: The finger tip blob visuals are rendered using the SM_BoundsControlFace model with the M_BoundsControlFace material. Six copies of the SM_BoundsControlEdge model are scaled and offset to create the bound edges and rendered with the M_BoundsControlEdge shader. See also Pressable button component Bounds Control"
  },
  "Docs/FollowComponent.html": {
    "href": "Docs/FollowComponent.html",
    "title": "Follow Component | UXT Documentation",
    "keywords": "FollowComponent The FollowComponent is used to keep objects \"following\" the user by applying a set of constraints on the component's owner. Usage Place a FollowComponent on your actor. In this example, we created an empty actor and added some geometry and text to make a panel that we want to keep in front of the user. Since we also want it to always face the user, we've set the \"Orientation Type\" to \"FaceCamera\". Hint: The camera looks down the +X axis, so you may want the front face of your content be in the -X direction. Behavior Details The FollowComponent has three different constraints that keeps its owner in front of the camera: Angular Clamp, Distance Clamp, and Orientation. The combination of Angular and Distance Clamp creates a frustum in front of the camera where its owner can be. If its owner is outside that frustum it is adjusted. Angular Clamp : The objective of this constraint is to ensure that the reference forward vector remains within the bounds set by the leashing parameters. To do this, determine the angles between toTarget and the leashing bounds about the global Z-axis and the reference's Y-axis. If the toTarget falls within the leashing bounds, then we don't have to modify it. Otherwise, we apply a correction rotation to bring it within bounds. This will ensure that the its owner stays within the top, bottom, right and left planes of the frustum. Distance Clamp : The objective of this constraint is to ensure that the following actor stays within bounds set by the distance parameters. To do this, we measure the current distance from the camera to the its owner. If the distance is within the MinimumDistance and MaximumDistance then we don't have to modify it. Otherwise, we push away or pull in the its owner along the reference forward vector. This will ensure that the its owner stays within the near and far planes of the frustum. Fixed vertical Offset : The objective of this constraint is to ensure the following actor stays at a fixed vertical distance away from the camera. This can be used to ensure the following actor always sits above/below eye level to prevent the actor from obstructing the user's vision. Orientation : The two options provided are constant FaceCamera or WorldLock. While world locked there are three conditions that will cause the its owner to face the camera: Angular Clamps Distance Clamps The angle between the forward vector of the its owner and toTarget vector (vector between the camera and the its owner) is larger than dead zone angle parameter"
  },
  "Docs/FarBeam.html": {
    "href": "Docs/FarBeam.html",
    "title": "Far Beam | UXT Documentation",
    "keywords": "Far Beam The far beam component allows the user to visualise elements in the scene they can interact with from afar. If you wish to customise the look of the beam, you can set the beam material by calling SetBeamMaterial with the material you wish to use. This material can have the following parameters if you wish to use them in your material. IsGrabbing : Scalar parameter. This value will be 0.0f if the user is not grabbing with the far cursor, 1.0f if they are. handIndex : Scalar parameter. This value will be 0.0f for the left hand, 1.0f for the right hand. The default material for the far beam has the following parameters: Far Beam Material Interface Color Color value for the solid beam Emissive Emissive intensity for the beam Gradation Hardness Scalar value to control the gradation hardness Gradation Multiply Scalar value for the gradation of the solid beam Gradation Offset Scalar value for the gradation start position offset Gradation Scale Scalar value to control the gradation scale Line Number Scalar value to control the dot amount in the beam Middle Fade Scalar value to control the fade-out intensity of the dotted beam Mid Fade Offset Scalar value to control the fade-out position of the dotted beam Is Grabbing System value for if the user is currently grabbing Hand Index System value used for distinguishing left from right hand Spline Length System value used for the beam length"
  },
  "api/_f_x_r_simulation_editor_module.html": {
    "href": "api/_f_x_r_simulation_editor_module.html",
    "title": "MRTK Unreal API Reference FXRSimulationEditorModule | UXT Documentation",
    "keywords": "FXRSimulationEditorModule class FXRSimulationEditorModule; Inheritance Inherits from IModuleInterface Public Functions Name virtual void StartupModule () override virtual void ShutdownModule () override Public Functions Documentation function StartupModule virtual void StartupModule() override function ShutdownModule virtual void ShutdownModule() override Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_f_x_r_input_animation_utils.html": {
    "href": "api/_f_x_r_input_animation_utils.html",
    "title": "MRTK Unreal API Reference FXRInputAnimationUtils | UXT Documentation",
    "keywords": "FXRInputAnimationUtils struct FXRInputAnimationUtils; Public Functions Name EAxis::Type GetInputRotationAxis (EAxis::Type MoveAxis) float GetHandRotationInputValue (EAxis::Type RotationAxis, float MoveValue) float GetHeadRotationInputValue (EAxis::Type RotationAxis, float MoveValue) Public Attributes Name const float InputYawScale const float InputPitchScale const float InputRollScale Public Functions Documentation function GetInputRotationAxis static EAxis::Type GetInputRotationAxis( EAxis::Type MoveAxis ) Select rotation axis for head or hand rotation modes. function GetHandRotationInputValue static float GetHandRotationInputValue( EAxis::Type RotationAxis, float MoveValue ) Scale hand rotation input value. function GetHeadRotationInputValue static float GetHeadRotationInputValue( EAxis::Type RotationAxis, float MoveValue ) Scale head rotation input value. Public Attributes Documentation variable InputYawScale const float FXRInputAnimationUtils::InputYawScale static const float InputYawScale = 2.5f; variable InputPitchScale const float FXRInputAnimationUtils::InputPitchScale static const float InputPitchScale = 1.75f; variable InputRollScale const float FXRInputAnimationUtils::InputRollScale static const float InputRollScale = 5.0f; Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_f_uxt_text_brush.html": {
    "href": "api/_f_uxt_text_brush.html",
    "title": "MRTK Unreal API Reference FUxtTextBrush | UXT Documentation",
    "keywords": "FUxtTextBrush Structure which contains data representing the appearance of text. struct FUxtTextBrush; Header #include <UxtTextBrush.h> Public Attributes Name UFont * Font UMaterialInterface * Material FVector RelativeLocation FRotator RelativeRotation float Size FColor DefaultColor FColor DisabledColor Public Attributes Documentation variable Font UFont* FUxtTextBrush::Font UFont * Font = nullptr; The font used by the text. variable Material UMaterialInterface* FUxtTextBrush::Material UMaterialInterface * Material = nullptr; The material used by the text. variable RelativeLocation FVector FUxtTextBrush::RelativeLocation FVector RelativeLocation = FVector::ZeroVector; The text's location compared to it's parent component. variable RelativeRotation FRotator FUxtTextBrush::RelativeRotation FRotator RelativeRotation = FRotator::ZeroRotator; The text's rotation compared to it's parent component. variable Size float FUxtTextBrush::Size float Size = 1.0f; The size of the text, normally the font size. variable DefaultColor FColor FUxtTextBrush::DefaultColor FColor DefaultColor = FColor::White; The default color of the brush, by default the text color. variable DisabledColor FColor FUxtTextBrush::DisabledColor FColor DisabledColor = FColor(32, 32, 32); The disabled color of the brush, by default the text color. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_f_uxt_pressable_button_component_visualizer.html": {
    "href": "api/_f_uxt_pressable_button_component_visualizer.html",
    "title": "MRTK Unreal API Reference FUxtPressableButtonComponentVisualizer | UXT Documentation",
    "keywords": "FUxtPressableButtonComponentVisualizer class FUxtPressableButtonComponentVisualizer; Inheritance Inherits from FComponentVisualizer Updated on 23 August 2021 at 12:07:13 Coordinated Universal Time"
  },
  "api/_f_uxt_interaction_utils.html": {
    "href": "api/_f_uxt_interaction_utils.html",
    "title": "MRTK Unreal API Reference FUxtInteractionUtils | UXT Documentation",
    "keywords": "FUxtInteractionUtils class FUxtInteractionUtils; Public Functions Name bool GetDefaultClosestPointOnPrimitive (const UPrimitiveComponent * Primitive, const FVector & Point, FVector & OutPointOnSurface, float & OutDistanceSqr) Public Functions Documentation function GetDefaultClosestPointOnPrimitive static bool GetDefaultClosestPointOnPrimitive( const UPrimitiveComponent * Primitive, const FVector & Point, FVector & OutPointOnSurface, float & OutDistanceSqr ) Calculates the point on the target surface that is closest to the point passed in. Return value indicates whether a point was found. Updated on 23 August 2021 at 12:07:13 Coordinated Universal Time"
  },
  "api/_f_uxt_icon_brush_customization.html": {
    "href": "api/_f_uxt_icon_brush_customization.html",
    "title": "MRTK Unreal API Reference FUxtIconBrushCustomization | UXT Documentation",
    "keywords": "FUxtIconBrushCustomization Provides a custom property panel for the UxtIconBrush. class FUxtIconBrushCustomization; Header #include <UxtIconBrushCustomization.h> Inheritance Inherits from IPropertyTypeCustomization Public Functions Name TSharedRef< IPropertyTypeCustomization > MakeInstance () Protected Functions Name virtual void CustomizeHeader (TSharedRef< IPropertyHandle > PropertyHandle, FDetailWidgetRow & HeaderRow, IPropertyTypeCustomizationUtils & CustomizationUtils) override virtual void CustomizeChildren (TSharedRef< IPropertyHandle > PropertyHandle, IDetailChildrenBuilder & ChildBuilder, IPropertyTypeCustomizationUtils & CustomizationUtils) override Public Functions Documentation function MakeInstance static TSharedRef< IPropertyTypeCustomization > MakeInstance() Protected Functions Documentation function CustomizeHeader virtual void CustomizeHeader( TSharedRef< IPropertyHandle > PropertyHandle, FDetailWidgetRow & HeaderRow, IPropertyTypeCustomizationUtils & CustomizationUtils ) override function CustomizeChildren virtual void CustomizeChildren( TSharedRef< IPropertyHandle > PropertyHandle, IDetailChildrenBuilder & ChildBuilder, IPropertyTypeCustomizationUtils & CustomizationUtils ) override Updated on 23 August 2021 at 12:07:13 Coordinated Universal Time"
  },
  "api/_f_uxt_x_r_simulation_view_extension.html": {
    "href": "api/_f_uxt_x_r_simulation_view_extension.html",
    "title": "MRTK Unreal API Reference FUxtXRSimulationViewExtension | UXT Documentation",
    "keywords": "FUxtXRSimulationViewExtension Scene view extension for hiding the player pawn in simulated HMD views. class FUxtXRSimulationViewExtension; Header #include <UxtXRSimulationViewExtension.h> Inheritance Inherits from FSceneViewExtensionBase Public Functions Name FUxtXRSimulationViewExtension (const FAutoRegister & AutoRegister, UUxtXRSimulationSubsystem * InSimulationSubsystem) virtual void SetupViewFamily (FSceneViewFamily & InViewFamily) override virtual void SetupView (FSceneViewFamily & InViewFamily, FSceneView & InView) override virtual void BeginRenderViewFamily (FSceneViewFamily & InViewFamily) override virtual void PreRenderViewFamily_RenderThread (FRHICommandListImmediate & RHICmdList, FSceneViewFamily & InViewFamily) override virtual void PreRenderView_RenderThread (FRHICommandListImmediate & RHICmdList, FSceneView & InView) override Protected Functions Name virtual bool IsActiveThisFrame_Internal (const FSceneViewExtensionContext & Context) const override Public Functions Documentation function FUxtXRSimulationViewExtension FUxtXRSimulationViewExtension( const FAutoRegister & AutoRegister, UUxtXRSimulationSubsystem * InSimulationSubsystem ) function SetupViewFamily virtual void SetupViewFamily( FSceneViewFamily & InViewFamily ) override ISceneViewExtension interface function SetupView virtual void SetupView( FSceneViewFamily & InViewFamily, FSceneView & InView ) override function BeginRenderViewFamily virtual void BeginRenderViewFamily( FSceneViewFamily & InViewFamily ) override function PreRenderViewFamily_RenderThread virtual void PreRenderViewFamily_RenderThread( FRHICommandListImmediate & RHICmdList, FSceneViewFamily & InViewFamily ) override function PreRenderView_RenderThread virtual void PreRenderView_RenderThread( FRHICommandListImmediate & RHICmdList, FSceneView & InView ) override Protected Functions Documentation function IsActiveThisFrame_Internal virtual bool IsActiveThisFrame_Internal( const FSceneViewExtensionContext & Context ) const override Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_f_scrolling_collection_properties.html": {
    "href": "api/_f_scrolling_collection_properties.html",
    "title": "MRTK Unreal API Reference FScrollingCollectionProperties | UXT Documentation",
    "keywords": "FScrollingCollectionProperties struct FScrollingCollectionProperties; Public Attributes Name FVector Center float Width float Height Public Attributes Documentation variable Center FVector FScrollingCollectionProperties::Center FVector Center; The Center of the viewable area, relative to the Scrolling Collection Component. variable Width float FScrollingCollectionProperties::Width float Width; The width of the viewable area variable Height float FScrollingCollectionProperties::Height float Height; The height of the viewable area Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_a_uxt_pressable_toggle_button_actor.html": {
    "href": "api/_a_uxt_pressable_toggle_button_actor.html",
    "title": "MRTK Unreal API Reference AUxtPressableToggleButtonActor | UXT Documentation",
    "keywords": "AUxtPressableToggleButtonActor A derived actor of AUxtPressableButtonActor with a UUxtToggleStateComponent component to track state and visuals for a button can which can be toggled on or off (checked or unchecked). class AUxtPressableToggleButtonActor; Header #include <Controls/UxtPressableToggleButtonActor.h> Inheritance Inherits from AUxtPressableButtonActor , AUxtBasePressableButtonActor , AActor, IUxtCollectionObject Inherited by AUxtPressableCheckButtonActor , AUxtPressableRadioButtonActor Public Functions Name AUxtPressableToggleButtonActor () virtual void OnConstruction (const FTransform & Transform) override virtual void BeginPlay () override virtual void ConstructVisuals () override virtual void UpdateToggleVisuals () bool IsInitiallyChecked () const void SetIsInitiallyChecked (bool InitiallyChecked) void RemoveTogglePlate () Protected Functions Name virtual void OnButtonPressed ( UUxtPressableButtonComponent * Button, UUxtPointerComponent * Pointer) override virtual void OnButtonReleased ( UUxtPressableButtonComponent * Button, UUxtPointerComponent * Pointer) override virtual void OnButtonToggled (UUxtToggleStateComponent * ToggleState) Protected Attributes Name bool bToggleOnRelease UUxtToggleStateComponent * ToggleStateComponent UUxtBackPlateComponent * TogglePlateComponent bool bIsInitiallyChecked Additional inherited members Public Functions inherited from AUxtPressableButtonActor Name AUxtPressableButtonActor () virtual void Tick (float DeltaTime) override virtual void ConstructIcon () virtual void ConstructLabel () bool BeginPulse (const UUxtPointerComponent * Pointer) bool IsPulsing () const FVector GetMillimeterSize () const void SetMillimeterSize (FVector Size) FVector GetSize () const void SetSize (FVector Size) bool IsPlated () const void SetIsPlated (bool IsPlated) const FUxtIconBrush & GetIconBrush () const void SetIconBrush (const FUxtIconBrush & Brush) const FText & GetLabel () const void SetLabel (const FText & NewLabel) const FUxtTextBrush & GetLabelTextBrush () const void SetLabelTextBrush (const FUxtTextBrush & Brush) const FUxtButtonBrush & GetButtonBrush () const void SetButtonBrush (const FUxtButtonBrush & Brush) Protected Functions inherited from AUxtPressableButtonActor Name virtual void OnBeginFocus ( UUxtPressableButtonComponent * Button, UUxtPointerComponent * Pointer, bool WasAlreadyFocused) virtual void OnButtonEnabled ( UUxtPressableButtonComponent * Button) virtual void OnButtonDisabled ( UUxtPressableButtonComponent * Button) virtual bool AnimatePulse (float DeltaTime) virtual bool AnimateFocus (float DeltaTime) template <class T > T * CreateAndAttachComponent (FName Name, USceneComponent * Parent) Protected Attributes inherited from AUxtPressableButtonActor Name FVector MillimeterSize bool bIsPlated FText Label FUxtTextBrush LabelTextBrush FUxtButtonBrush ButtonBrush USceneComponent * BackPlatePivotComponent UUxtBackPlateComponent * BackPlateMeshComponent USceneComponent * FrontPlatePivotComponent USceneComponent * FrontPlateCenterComponent UStaticMeshComponent * FrontPlateMeshComponent UTextRenderComponent * IconComponent UTextRenderComponent * LabelComponent UAudioComponent * AudioComponent float PulseTimer float PulseFadeTimer UMaterialInterface * PrePulseMaterial UMaterialInstanceDynamic * PulseMaterialInstance uint32 MaterialIndex float FocusTimer bool bCanEditIconBrush FUxtIconBrush IconBrush Public Functions inherited from AUxtBasePressableButtonActor Name AUxtBasePressableButtonActor () TScriptInterface< IUxtPokeTarget > GetPokeTarget () virtual TScriptInterface< IUxtPokeTarget > GetPokeTarget_Implementation () override TScriptInterface< IUxtFarTarget > GetFarTarget () virtual TScriptInterface< IUxtFarTarget > GetFarTarget_Implementation () override UUxtPressableButtonComponent * GetButtonComponent () const Protected Attributes inherited from AUxtBasePressableButtonActor Name UUxtPressableButtonComponent * ButtonComponent Public Functions inherited from IUxtCollectionObject Name TScriptInterface< IUxtPokeTarget > GetPokeTarget () TScriptInterface< IUxtFarTarget > GetFarTarget () Public Functions Documentation function AUxtPressableToggleButtonActor AUxtPressableToggleButtonActor() function OnConstruction virtual void OnConstruction( const FTransform & Transform ) override Reimplements : AUxtPressableButtonActor::OnConstruction Ensures the toggle visuals get updated when constructed. function BeginPlay virtual void BeginPlay() override Subscribes to toggle events and sets the initial toggle state. function ConstructVisuals virtual void ConstructVisuals() override Reimplements : AUxtPressableButtonActor::ConstructVisuals Adds toggle visuals and components. function UpdateToggleVisuals virtual void UpdateToggleVisuals() Reimplemented by : AUxtPressableCheckButtonActor::UpdateToggleVisuals , AUxtPressableRadioButtonActor::UpdateToggleVisuals , AUxtPressableSwitchButtonActor::UpdateToggleVisuals Alters the toggle visuals when the toggle state changes. function IsInitiallyChecked inline bool IsInitiallyChecked() const Gets if the button was toggled on at BeginPlay. function SetIsInitiallyChecked void SetIsInitiallyChecked( bool InitiallyChecked ) Sets if the button was toggled on at BeginPlay. This method has no function after BeginPlay. function RemoveTogglePlate void RemoveTogglePlate() Option to remove the toggle plate if it is not needed for this button (for example in derived classes). Protected Functions Documentation function OnButtonPressed virtual void OnButtonPressed( UUxtPressableButtonComponent * Button, UUxtPointerComponent * Pointer ) override Reimplements : AUxtPressableButtonActor::OnButtonPressed Button pressed event delegate. function OnButtonReleased virtual void OnButtonReleased( UUxtPressableButtonComponent * Button, UUxtPointerComponent * Pointer ) override Reimplements : AUxtPressableButtonActor::OnButtonReleased Button released event delegate. function OnButtonToggled virtual void OnButtonToggled( UUxtToggleStateComponent * ToggleState ) Updates the toggle visuals when the toggles state changes. Protected Attributes Documentation variable bToggleOnRelease bool bToggleOnRelease = false; Should the button toggle on press or release? variable ToggleStateComponent UUxtToggleStateComponent * ToggleStateComponent = nullptr; Component which keeps track of the toggled state. variable TogglePlateComponent UUxtBackPlateComponent * TogglePlateComponent = nullptr; Visual component to indicate the toggled state. variable bIsInitiallyChecked UPROPERTY(EditAnywhere, Category=\"Uxt Pressable Button\", BlueprintGetter=\"IsInitiallyChecked\", BlueprintSetter=\"SetIsInitiallyChecked\") bool bIsInitiallyChecked; Should the button be toggled on or off at BeginPlay? Updated on 23 August 2021 at 12:07:13 Coordinated Universal Time"
  },
  "api/_a_uxt_pressable_check_button_actor.html": {
    "href": "api/_a_uxt_pressable_check_button_actor.html",
    "title": "MRTK Unreal API Reference AUxtPressableCheckButtonActor | UXT Documentation",
    "keywords": "AUxtPressableCheckButtonActor A derived actor of AUxtPressableToggleButtonActor which represents the toggle state with a check icon. class AUxtPressableCheckButtonActor; Header #include <Controls/UxtPressableCheckButtonActor.h> Inheritance Inherits from AUxtPressableToggleButtonActor , AUxtPressableButtonActor , AUxtBasePressableButtonActor , AActor, IUxtCollectionObject Public Functions Name AUxtPressableCheckButtonActor () virtual void UpdateToggleVisuals () override const FUxtIconBrush & GetUncheckedIconBrush () const void SetUncheckedIconBrush (const FUxtIconBrush & Brush) const FUxtIconBrush & GetCheckedIconBrush () const void SetCheckedIconBrush (const FUxtIconBrush & Brush) Protected Attributes Name FUxtIconBrush UncheckedIconBrush FUxtIconBrush CheckedIconBrush Additional inherited members Public Functions inherited from AUxtPressableToggleButtonActor Name AUxtPressableToggleButtonActor () virtual void OnConstruction (const FTransform & Transform) override virtual void BeginPlay () override virtual void ConstructVisuals () override bool IsInitiallyChecked () const void SetIsInitiallyChecked (bool InitiallyChecked) void RemoveTogglePlate () Protected Functions inherited from AUxtPressableToggleButtonActor Name virtual void OnButtonPressed ( UUxtPressableButtonComponent * Button, UUxtPointerComponent * Pointer) override virtual void OnButtonReleased ( UUxtPressableButtonComponent * Button, UUxtPointerComponent * Pointer) override virtual void OnButtonToggled (UUxtToggleStateComponent * ToggleState) Protected Attributes inherited from AUxtPressableToggleButtonActor Name bool bToggleOnRelease UUxtToggleStateComponent * ToggleStateComponent UUxtBackPlateComponent * TogglePlateComponent bool bIsInitiallyChecked Public Functions inherited from AUxtPressableButtonActor Name AUxtPressableButtonActor () virtual void OnConstruction (const FTransform & Transform) override virtual void Tick (float DeltaTime) override virtual void ConstructVisuals () virtual void ConstructIcon () virtual void ConstructLabel () bool BeginPulse (const UUxtPointerComponent * Pointer) bool IsPulsing () const FVector GetMillimeterSize () const void SetMillimeterSize (FVector Size) FVector GetSize () const void SetSize (FVector Size) bool IsPlated () const void SetIsPlated (bool IsPlated) const FUxtIconBrush & GetIconBrush () const void SetIconBrush (const FUxtIconBrush & Brush) const FText & GetLabel () const void SetLabel (const FText & NewLabel) const FUxtTextBrush & GetLabelTextBrush () const void SetLabelTextBrush (const FUxtTextBrush & Brush) const FUxtButtonBrush & GetButtonBrush () const void SetButtonBrush (const FUxtButtonBrush & Brush) Protected Functions inherited from AUxtPressableButtonActor Name virtual void OnButtonPressed ( UUxtPressableButtonComponent * Button, UUxtPointerComponent * Pointer) virtual void OnButtonReleased ( UUxtPressableButtonComponent * Button, UUxtPointerComponent * Pointer) virtual void OnBeginFocus ( UUxtPressableButtonComponent * Button, UUxtPointerComponent * Pointer, bool WasAlreadyFocused) virtual void OnButtonEnabled ( UUxtPressableButtonComponent * Button) virtual void OnButtonDisabled ( UUxtPressableButtonComponent * Button) virtual bool AnimatePulse (float DeltaTime) virtual bool AnimateFocus (float DeltaTime) template <class T > T * CreateAndAttachComponent (FName Name, USceneComponent * Parent) Protected Attributes inherited from AUxtPressableButtonActor Name FVector MillimeterSize bool bIsPlated FText Label FUxtTextBrush LabelTextBrush FUxtButtonBrush ButtonBrush USceneComponent * BackPlatePivotComponent UUxtBackPlateComponent * BackPlateMeshComponent USceneComponent * FrontPlatePivotComponent USceneComponent * FrontPlateCenterComponent UStaticMeshComponent * FrontPlateMeshComponent UTextRenderComponent * IconComponent UTextRenderComponent * LabelComponent UAudioComponent * AudioComponent float PulseTimer float PulseFadeTimer UMaterialInterface * PrePulseMaterial UMaterialInstanceDynamic * PulseMaterialInstance uint32 MaterialIndex float FocusTimer bool bCanEditIconBrush FUxtIconBrush IconBrush Public Functions inherited from AUxtBasePressableButtonActor Name AUxtBasePressableButtonActor () TScriptInterface< IUxtPokeTarget > GetPokeTarget () virtual TScriptInterface< IUxtPokeTarget > GetPokeTarget_Implementation () override TScriptInterface< IUxtFarTarget > GetFarTarget () virtual TScriptInterface< IUxtFarTarget > GetFarTarget_Implementation () override UUxtPressableButtonComponent * GetButtonComponent () const Protected Attributes inherited from AUxtBasePressableButtonActor Name UUxtPressableButtonComponent * ButtonComponent Public Functions inherited from IUxtCollectionObject Name TScriptInterface< IUxtPokeTarget > GetPokeTarget () TScriptInterface< IUxtFarTarget > GetFarTarget () Public Functions Documentation function AUxtPressableCheckButtonActor AUxtPressableCheckButtonActor() function UpdateToggleVisuals virtual void UpdateToggleVisuals() override Reimplements : AUxtPressableToggleButtonActor::UpdateToggleVisuals Alters the toggle visuals when the toggle state changes. function GetUncheckedIconBrush inline const FUxtIconBrush & GetUncheckedIconBrush() const Accessor to the button's unchecked icon brush. function SetUncheckedIconBrush void SetUncheckedIconBrush( const FUxtIconBrush & Brush ) Applies a new unchecked icon brush. function GetCheckedIconBrush inline const FUxtIconBrush & GetCheckedIconBrush() const Accessor to the button's checked icon brush. function SetCheckedIconBrush void SetCheckedIconBrush( const FUxtIconBrush & Brush ) Applies a new checked icon brush. Protected Attributes Documentation variable UncheckedIconBrush UPROPERTY(EditAnywhere, Category=\"Uxt Pressable Button\", BlueprintGetter=\"GetUncheckedIconBrush\", BlueprintSetter=\"SetUncheckedIconBrush\") FUxtIconBrush UncheckedIconBrush; Structure which contains properties for the button's icon when unchecked. variable CheckedIconBrush UPROPERTY(EditAnywhere, Category=\"Uxt Pressable Button\", BlueprintGetter=\"GetCheckedIconBrush\", BlueprintSetter=\"SetCheckedIconBrush\") FUxtIconBrush CheckedIconBrush; Structure which contains properties for the button's icon when checked. Updated on 23 August 2021 at 12:07:13 Coordinated Universal Time"
  },
  "api/_u_uxt_transform_constraint.html": {
    "href": "api/_u_uxt_transform_constraint.html",
    "title": "MRTK Unreal API Reference UUxtTransformConstraint | UXT Documentation",
    "keywords": "UUxtTransformConstraint Base class for all constraints Usage: Derive from this component and implement ApplyConstraint and GetConstraintType. Custom constraints will automatically be picked up by a UxtConstraintManager on the same actor class UUxtTransformConstraint; Header #include <Interactions/Constraints/UxtTransformConstraint.h> Inheritance Inherits from UActorComponent Inherited by UUxtFaceUserConstraint , UUxtFixedDistanceConstraint , UUxtFixedRotationToUserConstraint , UUxtFixedRotationToWorldConstraint , UUxtMaintainApparentSizeConstraint , UUxtMoveAxisConstraint , UUxtRotationAxisConstraint Public Functions Name virtual EUxtTransformMode GetConstraintType () const virtual void ApplyConstraint (FTransform & Transform) const virtual void virtual void Initialize (const FTransform & WorldPose) Public Attributes Name int32 HandType int32 InteractionMode Protected Attributes Name FTransform WorldPoseOnManipulationStart Public Functions Documentation function GetConstraintType virtual EUxtTransformMode GetConstraintType() const Reimplemented by : UUxtFaceUserConstraint::GetConstraintType , UUxtFixedRotationToWorldConstraint::GetConstraintType , UUxtMoveAxisConstraint::GetConstraintType , UUxtRotationAxisConstraint::GetConstraintType , UUxtFixedDistanceConstraint::GetConstraintType , UUxtFixedRotationToUserConstraint::GetConstraintType , UUxtMaintainApparentSizeConstraint::GetConstraintType Enabled manipulation modes. function ApplyConstraint virtual void ApplyConstraint( FTransform & Transform ) const Reimplemented by : UUxtFaceUserConstraint::ApplyConstraint , UUxtFixedRotationToWorldConstraint::ApplyConstraint , UUxtMoveAxisConstraint::ApplyConstraint , UUxtRotationAxisConstraint::ApplyConstraint , UUxtFixedDistanceConstraint::ApplyConstraint , UUxtFixedRotationToUserConstraint::ApplyConstraint , UUxtMaintainApparentSizeConstraint::ApplyConstraint Applies constraints to transforms during manipulation function Initialize virtual void virtual void Initialize( const FTransform & WorldPose ) Reimplemented by : UUxtFixedDistanceConstraint::Initialize , UUxtFixedRotationToUserConstraint::Initialize , UUxtMaintainApparentSizeConstraint::Initialize Intended to be called on manipulation started Public Attributes Documentation variable HandType int32 HandType = static_cast<int32>(EUxtGrabMode::OneHanded | EUxtGrabMode::TwoHanded); Whether this constraint applies to one hand manipulation, two hand manipulation or both. variable InteractionMode int32 InteractionMode = static_cast<int32>(EUxtInteractionMode::Near | EUxtInteractionMode::Far); Whether this constraint applies to near manipulation, far manipulation or both. Protected Attributes Documentation variable WorldPoseOnManipulationStart FTransform WorldPoseOnManipulationStart; Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_uxt_touch_based_hand_tracker_subsystem.html": {
    "href": "api/_u_uxt_touch_based_hand_tracker_subsystem.html",
    "title": "MRTK Unreal API Reference UUxtTouchBasedHandTrackerSubsystem | UXT Documentation",
    "keywords": "UUxtTouchBasedHandTrackerSubsystem Local player subsystem that adds a UUxtTouchBasedHandTrackerComponent to player controllers as they are created. class UUxtTouchBasedHandTrackerSubsystem; Header #include <HandTracking/UxtTouchBasedHandTrackerSubsystem.h> Inheritance Inherits from ULocalPlayerSubsystem Public Functions Name virtual bool ShouldCreateSubsystem (UObject * Outer) const override virtual void Initialize (FSubsystemCollectionBase & Collection) override virtual void Deinitialize () override Public Functions Documentation function ShouldCreateSubsystem virtual bool ShouldCreateSubsystem( UObject * Outer ) const override function Initialize virtual void Initialize( FSubsystemCollectionBase & Collection ) override function Deinitialize virtual void Deinitialize() override Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_uxt_touch_based_hand_tracker_component.html": {
    "href": "api/_u_uxt_touch_based_hand_tracker_component.html",
    "title": "MRTK Unreal API Reference UUxtTouchBasedHandTrackerComponent | UXT Documentation",
    "keywords": "UUxtTouchBasedHandTrackerComponent Component added automatically by UXT to the player controller to enable driving far interactions via touch input. The hand tracker interface is used just to provide the pointer pose and grab/select states, GetJointState() returns that pointer pose for all joints. class UUxtTouchBasedHandTrackerComponent; Header #include <HandTracking/UxtTouchBasedHandTrackerComponent.h> Inheritance Inherits from UActorComponent, IUxtHandTracker Public Functions Name virtual ETrackingStatus GetTrackingStatus (EControllerHand Hand) const override virtual bool IsHandController (EControllerHand Hand) const override virtual bool GetJointState (EControllerHand Hand, EHandKeypoint Joint, FQuat & OutOrientation, FVector & OutPosition, float & OutRadius) const override virtual bool GetPointerPose (EControllerHand Hand, FQuat & OutOrientation, FVector & OutPosition) const override virtual bool GetGripPose (EControllerHand Hand, FQuat & OutOrientation, FVector & OutPosition) const override virtual bool GetIsGrabbing (EControllerHand Hand, bool & OutIsGrabbing) const override virtual bool GetIsSelectPressed (EControllerHand Hand, bool & OutIsSelectPressed) const override virtual void BeginPlay () override virtual void EndPlay (const EEndPlayReason::Type EndPlayReason) override Additional inherited members Public Functions inherited from IUxtHandTracker Name FName GetModularFeatureName () IUxtHandTracker & Get () virtual ~IUxtHandTracker () Public Functions Documentation function GetTrackingStatus virtual ETrackingStatus GetTrackingStatus( EControllerHand Hand ) const override Reimplements : IUxtHandTracker::GetTrackingStatus Get tracking status of the hand or motion controller. function IsHandController virtual bool IsHandController( EControllerHand Hand ) const override Reimplements : IUxtHandTracker::IsHandController True if the controller is a hand. function GetJointState virtual bool GetJointState( EControllerHand Hand, EHandKeypoint Joint, FQuat & OutOrientation, FVector & OutPosition, float & OutRadius ) const override Reimplements : IUxtHandTracker::GetJointState Obtain the state of the given joint. Returns false if the hand is not tracked this frame, in which case the values of the output parameters are unchanged. function GetPointerPose virtual bool GetPointerPose( EControllerHand Hand, FQuat & OutOrientation, FVector & OutPosition ) const override Reimplements : IUxtHandTracker::GetPointerPose Obtain the pointer pose. Returns false if the hand is not tracked this frame, in which case the value of the output parameter is unchanged. function GetGripPose virtual bool GetGripPose( EControllerHand Hand, FQuat & OutOrientation, FVector & OutPosition ) const override Reimplements : IUxtHandTracker::GetGripPose Grip pose following the controller. Returns false if the hand is not tracked this frame, in which case the value of the output parameter is unchanged. function GetIsGrabbing virtual bool GetIsGrabbing( EControllerHand Hand, bool & OutIsGrabbing ) const override Reimplements : IUxtHandTracker::GetIsGrabbing Obtain current grabbing state. Returns false if the hand is not tracked this frame, in which case the value of the output parameter is unchanged. function GetIsSelectPressed virtual bool GetIsSelectPressed( EControllerHand Hand, bool & OutIsSelectPressed ) const override Reimplements : IUxtHandTracker::GetIsSelectPressed Obtain current selection state. Returns false if the hand is not tracked this frame, in which case the value of the output parameter is unchanged. function BeginPlay virtual void BeginPlay() override function EndPlay virtual void EndPlay( const EEndPlayReason::Type EndPlayReason ) override Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_uxt_touchable_volume_component.html": {
    "href": "api/_u_uxt_touchable_volume_component.html",
    "title": "MRTK Unreal API Reference UUxtTouchableVolumeComponent | UXT Documentation",
    "keywords": "UUxtTouchableVolumeComponent Component that turns the actor it is attached to into a touchable volume. class UUxtTouchableVolumeComponent; Header #include <Controls/UxtTouchableVolumeComponent.h> Inheritance Inherits from UUxtUIElementComponent , IUxtPokeTarget , IUxtPokeHandler , IUxtFarTarget , IUxtFarHandler , USceneComponent Public Functions Name void SetEnabled (bool Enabled) Protected Functions Name virtual void BeginPlay () override virtual bool IsPokeFocusable_Implementation (const UPrimitiveComponent * Primitive) const override virtual EUxtPokeBehaviour GetPokeBehaviour_Implementation () const override virtual bool GetClosestPoint_Implementation (const UPrimitiveComponent * Primitive, const FVector & Point, FVector & OutClosestPoint, FVector & OutNormal) const override virtual bool CanHandlePoke_Implementation (UPrimitiveComponent * Primitive) const override virtual void OnEnterPokeFocus_Implementation ( UUxtNearPointerComponent * Pointer) override virtual void OnUpdatePokeFocus_Implementation ( UUxtNearPointerComponent * Pointer) override virtual void OnExitPokeFocus_Implementation ( UUxtNearPointerComponent * Pointer) override virtual void OnBeginPoke_Implementation ( UUxtNearPointerComponent * Pointer) override virtual void OnUpdatePoke_Implementation ( UUxtNearPointerComponent * Pointer) override virtual void OnEndPoke_Implementation ( UUxtNearPointerComponent * Pointer) override virtual bool IsFarFocusable_Implementation (const UPrimitiveComponent * Primitive) const override virtual bool CanHandleFar_Implementation (UPrimitiveComponent * Primitive) const override virtual void OnEnterFarFocus_Implementation ( UUxtFarPointerComponent * Pointer) override virtual void OnUpdatedFarFocus_Implementation ( UUxtFarPointerComponent * Pointer) override virtual void OnExitFarFocus_Implementation ( UUxtFarPointerComponent * Pointer) override virtual void OnFarPressed_Implementation ( UUxtFarPointerComponent * Pointer) override virtual void OnFarReleased_Implementation ( UUxtFarPointerComponent * Pointer) override void OnInputTouchBeginHandler (ETouchIndex::Type FingerIndex, UPrimitiveComponent * TouchedComponent) void OnInputTouchEndHandler (ETouchIndex::Type FingerIndex, UPrimitiveComponent * TouchedComponent) void OnInputTouchLeaveHandler (ETouchIndex::Type FingerIndex, UPrimitiveComponent * TouchedComponent) Public Attributes Name int32 InteractionMode bool bLockFocus TSet< UPrimitiveComponent * > TouchablePrimitives FUxtVolumeBeginFocusDelegate OnBeginFocus FUxtVolumeUpdateFocusDelegate OnUpdateFocus FUxtVolumeEndFocusDelegate OnEndFocus FUxtVolumeBeginPokeDelegate OnBeginPoke FUxtVolumeUpdatePokeDelegate OnUpdatePoke FUxtVolumeEndPokeDelegate OnEndPoke FUxtVolumeEnabledDelegate OnVolumeEnabled FUxtVolumeDisabledDelegate OnVolumeDisabled Additional inherited members Public Functions inherited from UUxtUIElementComponent Name UUxtUIElementComponent () =default EUxtUIElementVisibility GetUIVisibilitySelf () const EUxtUIElementVisibility GetUIVisibilityInHierarchy () const void SetUIVisibility (EUxtUIElementVisibility NewVisibility) void RefreshUIElement () Protected Functions inherited from UUxtUIElementComponent Name virtual void OnAttachmentChanged () override Public Attributes inherited from UUxtUIElementComponent Name FUxtUIElementShowDelegate OnShowElement FUxtUIElementHideDelegate OnHideElement Public Functions inherited from IUxtPokeTarget Name bool IsPokeFocusable (const UPrimitiveComponent * Primitive) const EUxtPokeBehaviour GetPokeBehaviour () const bool GetClosestPoint (const UPrimitiveComponent * Primitive, const FVector & Point, FVector & OutClosestPoint, FVector & OutNormal) const Public Functions inherited from IUxtPokeHandler Name bool CanHandlePoke (UPrimitiveComponent * Primitive) const void OnEnterPokeFocus ( UUxtNearPointerComponent * Pointer) void OnUpdatePokeFocus ( UUxtNearPointerComponent * Pointer) void OnExitPokeFocus ( UUxtNearPointerComponent * Pointer) Public Functions inherited from IUxtFarTarget Name bool IsFarFocusable (const UPrimitiveComponent * Primitive) const Public Functions inherited from IUxtFarHandler Name bool CanHandleFar (UPrimitiveComponent * Primitive) const void OnEnterFarFocus ( UUxtFarPointerComponent * Pointer) void OnUpdatedFarFocus ( UUxtFarPointerComponent * Pointer) void OnExitFarFocus ( UUxtFarPointerComponent * Pointer) void OnFarPressed ( UUxtFarPointerComponent * Pointer) void OnFarDragged ( UUxtFarPointerComponent * Pointer) void OnFarReleased ( UUxtFarPointerComponent * Pointer) Public Functions Documentation function SetEnabled void SetEnabled( bool Enabled ) Set if the touchable volume is enabled Protected Functions Documentation function BeginPlay virtual void BeginPlay() override Reimplements : UUxtUIElementComponent::BeginPlay function IsPokeFocusable_Implementation virtual bool IsPokeFocusable_Implementation( const UPrimitiveComponent * Primitive ) const override function GetPokeBehaviour_Implementation virtual EUxtPokeBehaviour GetPokeBehaviour_Implementation() const override function GetClosestPoint_Implementation virtual bool GetClosestPoint_Implementation( const UPrimitiveComponent * Primitive, const FVector & Point, FVector & OutClosestPoint, FVector & OutNormal ) const override function CanHandlePoke_Implementation virtual bool CanHandlePoke_Implementation( UPrimitiveComponent * Primitive ) const override function OnEnterPokeFocus_Implementation virtual void OnEnterPokeFocus_Implementation( UUxtNearPointerComponent * Pointer ) override function OnUpdatePokeFocus_Implementation virtual void OnUpdatePokeFocus_Implementation( UUxtNearPointerComponent * Pointer ) override function OnExitPokeFocus_Implementation virtual void OnExitPokeFocus_Implementation( UUxtNearPointerComponent * Pointer ) override function OnBeginPoke_Implementation virtual void OnBeginPoke_Implementation( UUxtNearPointerComponent * Pointer ) override function OnUpdatePoke_Implementation virtual void OnUpdatePoke_Implementation( UUxtNearPointerComponent * Pointer ) override function OnEndPoke_Implementation virtual void OnEndPoke_Implementation( UUxtNearPointerComponent * Pointer ) override function IsFarFocusable_Implementation virtual bool IsFarFocusable_Implementation( const UPrimitiveComponent * Primitive ) const override function CanHandleFar_Implementation virtual bool CanHandleFar_Implementation( UPrimitiveComponent * Primitive ) const override function OnEnterFarFocus_Implementation virtual void OnEnterFarFocus_Implementation( UUxtFarPointerComponent * Pointer ) override function OnUpdatedFarFocus_Implementation virtual void OnUpdatedFarFocus_Implementation( UUxtFarPointerComponent * Pointer ) override function OnExitFarFocus_Implementation virtual void OnExitFarFocus_Implementation( UUxtFarPointerComponent * Pointer ) override function OnFarPressed_Implementation virtual void OnFarPressed_Implementation( UUxtFarPointerComponent * Pointer ) override function OnFarReleased_Implementation virtual void OnFarReleased_Implementation( UUxtFarPointerComponent * Pointer ) override function OnInputTouchBeginHandler void OnInputTouchBeginHandler( ETouchIndex::Type FingerIndex, UPrimitiveComponent * TouchedComponent ) function OnInputTouchEndHandler void OnInputTouchEndHandler( ETouchIndex::Type FingerIndex, UPrimitiveComponent * TouchedComponent ) function OnInputTouchLeaveHandler void OnInputTouchLeaveHandler( ETouchIndex::Type FingerIndex, UPrimitiveComponent * TouchedComponent ) Public Attributes Documentation variable InteractionMode int32 InteractionMode = static_cast<int32>(EUxtInteractionMode::Near | EUxtInteractionMode::Far); Types of interaction the volume should respond to. variable bLockFocus bool bLockFocus = true; Should the volume lock the pointer's focus when poked. variable TouchablePrimitives TSet< UPrimitiveComponent * > TouchablePrimitives; List of primitives used as touchable targets. If the list is empty then all primitives of the actor are used. variable OnBeginFocus FUxtVolumeBeginFocusDelegate OnBeginFocus; Event raised when a pointer starts focusing the touchable volume. WasFocused indicates if the volume was already focused by another pointer. variable OnUpdateFocus FUxtVolumeUpdateFocusDelegate OnUpdateFocus; Event raised when a focusing pointer updates. variable OnEndFocus FUxtVolumeEndFocusDelegate OnEndFocus; Event raised when a pointer ends focusing the touchable volume. IsFocused indicates if the volume is still focused by another pointer. variable OnBeginPoke FUxtVolumeBeginPokeDelegate OnBeginPoke; Event raised when a pointer starts poking the touchable volume. variable OnUpdatePoke FUxtVolumeUpdatePokeDelegate OnUpdatePoke; Event raised while a pointer is poking the touchable volume. variable OnEndPoke FUxtVolumeEndPokeDelegate OnEndPoke; Event raised when a pointer ends poking the touchable volume. variable OnVolumeEnabled FUxtVolumeEnabledDelegate OnVolumeEnabled; Event raised when the volume is enabled. variable OnVolumeDisabled FUxtVolumeDisabledDelegate OnVolumeDisabled; Event raised when the volume is disabled. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_f_uxt_poke_pointer_focus.html": {
    "href": "api/_f_uxt_poke_pointer_focus.html",
    "title": "MRTK Unreal API Reference FUxtPokePointerFocus | UXT Documentation",
    "keywords": "FUxtPokePointerFocus Focus implementation for the poke pointers. struct FUxtPokePointerFocus; Header #include <UxtPointerFocus.h> Inheritance Inherits from FUxtPointerFocus Public Functions Name void BeginPoke ( UUxtNearPointerComponent * Pointer) void UpdatePoke ( UUxtNearPointerComponent * Pointer) void EndPoke ( UUxtNearPointerComponent * Pointer) bool IsPoking () const Protected Functions Name virtual UClass * GetInterfaceClass () const override virtual bool ImplementsTargetInterface (UObject * Target) const override virtual bool GetClosestPointOnTarget (const UActorComponent * Target, const UPrimitiveComponent * Primitive, const FVector & Point, FVector & OutClosestPoint, FVector & OutNormal) const override virtual void RaiseEnterFocusEvent (UPrimitiveComponent * Target, UUxtNearPointerComponent * Pointer) const override virtual void RaiseUpdateFocusEvent (UPrimitiveComponent * Target, UUxtNearPointerComponent * Pointer) const override virtual void RaiseExitFocusEvent (UPrimitiveComponent * Target, UUxtNearPointerComponent * Pointer) const override Additional inherited members Public Functions inherited from FUxtPointerFocus Name virtual ~FUxtPointerFocus () const FVector & GetClosestTargetPoint () const const FVector & GetClosestTargetNormal () const UObject * GetFocusedTarget () const UPrimitiveComponent * GetFocusedPrimitive () const UObject * GetFocusedTargetChecked () const void SelectClosestTarget ( UUxtNearPointerComponent * Pointer, const FTransform & PointerTransform, const TArray< FOverlapResult > & Overlaps) void UpdateClosestTarget (const FTransform & PointerTransform) void SelectClosestPointOnTarget ( UUxtNearPointerComponent * Pointer, const FTransform & PointerTransform, UActorComponent * NewTarget) void ClearFocus ( UUxtNearPointerComponent * Pointer) void UpdateFocus ( UUxtNearPointerComponent * Pointer) const UActorComponent * FindInterfaceComponent (AActor * Owner) const Protected Functions inherited from FUxtPointerFocus Name void SetFocus ( UUxtNearPointerComponent * Pointer, const FTransform & PointerTransform, const FUxtPointerFocusSearchResult & FocusResult) FUxtPointerFocusSearchResult FindClosestTarget (const TArray< FOverlapResult > & Overlaps, const FVector & Point) const FUxtPointerFocusSearchResult FindClosestPointOnComponent (UActorComponent * Target, const FVector & Point) const Public Functions Documentation function BeginPoke void BeginPoke( UUxtNearPointerComponent * Pointer ) Notify the target object that poke has started. function UpdatePoke void UpdatePoke( UUxtNearPointerComponent * Pointer ) Notify the poked target object that the pointer has been updated. function EndPoke void EndPoke( UUxtNearPointerComponent * Pointer ) Notify the target object that poke has ended. function IsPoking bool IsPoking() const Protected Functions Documentation function GetInterfaceClass virtual UClass * GetInterfaceClass() const override Reimplements : FUxtPointerFocus::GetInterfaceClass Get the interface class that targets for the pointer must implement. function ImplementsTargetInterface virtual bool ImplementsTargetInterface( UObject * Target ) const override Reimplements : FUxtPointerFocus::ImplementsTargetInterface Returns true if the given object implements the required target interface. function GetClosestPointOnTarget virtual bool GetClosestPointOnTarget( const UActorComponent * Target, const UPrimitiveComponent * Primitive, const FVector & Point, FVector & OutClosestPoint, FVector & OutNormal ) const override Reimplements : FUxtPointerFocus::GetClosestPointOnTarget Find the closest point on the given primitive using the distance function of the target interface. function RaiseEnterFocusEvent virtual void RaiseEnterFocusEvent( UPrimitiveComponent * Target, UUxtNearPointerComponent * Pointer ) const override Reimplements : FUxtPointerFocus::RaiseEnterFocusEvent Notify the target object that it has entered focus. function RaiseUpdateFocusEvent virtual void RaiseUpdateFocusEvent( UPrimitiveComponent * Target, UUxtNearPointerComponent * Pointer ) const override Reimplements : FUxtPointerFocus::RaiseUpdateFocusEvent Notify the focused target object that the pointer has been updated. function RaiseExitFocusEvent virtual void RaiseExitFocusEvent( UPrimitiveComponent * Target, UUxtNearPointerComponent * Pointer ) const override Reimplements : FUxtPointerFocus::RaiseExitFocusEvent Notify the target object that it has exited focus. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_f_uxt_pointer_focus_search_result.html": {
    "href": "api/_f_uxt_pointer_focus_search_result.html",
    "title": "MRTK Unreal API Reference FUxtPointerFocusSearchResult | UXT Documentation",
    "keywords": "FUxtPointerFocusSearchResult Result of closest point search functions. struct FUxtPointerFocusSearchResult; Header #include <UxtPointerFocus.h> Public Functions Name bool IsValid () const Public Attributes Name UObject * Target UPrimitiveComponent * Primitive FVector ClosestPointOnTarget FVector Normal float MinDistance Public Functions Documentation function IsValid bool IsValid() const Public Attributes Documentation variable Target UObject* FUxtPointerFocusSearchResult::Target UObject * Target; Closest object that implements the requires pointer target interface. variable Primitive UPrimitiveComponent* FUxtPointerFocusSearchResult::Primitive UPrimitiveComponent * Primitive; Primitive that contains the closes point. variable ClosestPointOnTarget FVector FUxtPointerFocusSearchResult::ClosestPointOnTarget FVector ClosestPointOnTarget; Closest point on the primitive to the pointer position. variable Normal FVector FUxtPointerFocusSearchResult::Normal FVector Normal; Poke normal from the closest point on the primitive. variable MinDistance float FUxtPointerFocusSearchResult::MinDistance float MinDistance; Distance of the closest point to the pointer position. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_f_uxt_pointer_focus.html": {
    "href": "api/_f_uxt_pointer_focus.html",
    "title": "MRTK Unreal API Reference FUxtPointerFocus | UXT Documentation",
    "keywords": "FUxtPointerFocus Utility class that is used by components to manage different pointers and their focus targets. struct FUxtPointerFocus; Header #include <UxtPointerFocus.h> Inheritance Inherited by FUxtGrabPointerFocus , FUxtPokePointerFocus Public Functions Name virtual ~FUxtPointerFocus () const FVector & GetClosestTargetPoint () const const FVector & GetClosestTargetNormal () const UObject * GetFocusedTarget () const UPrimitiveComponent * GetFocusedPrimitive () const UObject * GetFocusedTargetChecked () const void SelectClosestTarget ( UUxtNearPointerComponent * Pointer, const FTransform & PointerTransform, const TArray< FOverlapResult > & Overlaps) void UpdateClosestTarget (const FTransform & PointerTransform) void SelectClosestPointOnTarget ( UUxtNearPointerComponent * Pointer, const FTransform & PointerTransform, UActorComponent * NewTarget) void ClearFocus ( UUxtNearPointerComponent * Pointer) void UpdateFocus ( UUxtNearPointerComponent * Pointer) const UActorComponent * FindInterfaceComponent (AActor * Owner) const Protected Functions Name void SetFocus ( UUxtNearPointerComponent * Pointer, const FTransform & PointerTransform, const FUxtPointerFocusSearchResult & FocusResult) FUxtPointerFocusSearchResult FindClosestTarget (const TArray< FOverlapResult > & Overlaps, const FVector & Point) const FUxtPointerFocusSearchResult FindClosestPointOnComponent (UActorComponent * Target, const FVector & Point) const virtual UClass * GetInterfaceClass () const =0 virtual bool ImplementsTargetInterface (UObject * Target) const =0 virtual bool GetClosestPointOnTarget (const UActorComponent * Target, const UPrimitiveComponent * Primitive, const FVector & Point, FVector & OutClosestPoint, FVector & OutNormal) const =0 virtual void RaiseEnterFocusEvent (UPrimitiveComponent * Target, UUxtNearPointerComponent * Pointer) const =0 virtual void RaiseUpdateFocusEvent (UPrimitiveComponent * Target, UUxtNearPointerComponent * Pointer) const =0 virtual void RaiseExitFocusEvent (UPrimitiveComponent * Target, UUxtNearPointerComponent * Pointer) const =0 Public Functions Documentation function ~FUxtPointerFocus inline virtual ~FUxtPointerFocus() function GetClosestTargetPoint const FVector & GetClosestTargetPoint() const Get the closest point on the surface of the focused target function GetClosestTargetNormal const FVector & GetClosestTargetNormal() const Get the poke normal from the closest point on the surface function GetFocusedTarget UObject * GetFocusedTarget() const Get the currently focused target object. function GetFocusedPrimitive UPrimitiveComponent * GetFocusedPrimitive() const Get the currently focused primitive component function GetFocusedTargetChecked UObject * GetFocusedTargetChecked() const Get the currently focused target object. Returns null if the target does not implement the expected interface. function SelectClosestTarget void SelectClosestTarget( UUxtNearPointerComponent * Pointer, const FTransform & PointerTransform, const TArray< FOverlapResult > & Overlaps ) Select and set the focused target among the list of overlaps. function UpdateClosestTarget void UpdateClosestTarget( const FTransform & PointerTransform ) Update the ClosestTargetPoint while focus is locked function SelectClosestPointOnTarget void SelectClosestPointOnTarget( UUxtNearPointerComponent * Pointer, const FTransform & PointerTransform, UActorComponent * NewTarget ) Select the closest primitive from the owner of the given target component. The target component will be the new focus, unless no usable primitive can be found. function ClearFocus void ClearFocus( UUxtNearPointerComponent * Pointer ) Clear the focused target. function UpdateFocus void UpdateFocus( UUxtNearPointerComponent * Pointer ) const Notify the focused target of a pointer update. function FindInterfaceComponent UActorComponent * FindInterfaceComponent( AActor * Owner ) const Find a component of the actor that implements the required interface. Find a component of the actor that implements the given interface type. Protected Functions Documentation function SetFocus void SetFocus( UUxtNearPointerComponent * Pointer, const FTransform & PointerTransform, const FUxtPointerFocusSearchResult & FocusResult ) Set the focus to the given target object, primitive, and point on the target. function FindClosestTarget FUxtPointerFocusSearchResult FindClosestTarget( const TArray< FOverlapResult > & Overlaps, const FVector & Point ) const Find the closest target object, primitive, and point among the overlaps. function FindClosestPointOnComponent FUxtPointerFocusSearchResult FindClosestPointOnComponent( UActorComponent * Target, const FVector & Point ) const Find the closest primitive and point on the owner of the given component. function GetInterfaceClass virtual UClass * GetInterfaceClass() const =0 Reimplemented by : FUxtGrabPointerFocus::GetInterfaceClass , FUxtPokePointerFocus::GetInterfaceClass Get the interface class that targets for the pointer must implement. function ImplementsTargetInterface virtual bool ImplementsTargetInterface( UObject * Target ) const =0 Reimplemented by : FUxtGrabPointerFocus::ImplementsTargetInterface , FUxtPokePointerFocus::ImplementsTargetInterface Returns true if the given object implements the required target interface. function GetClosestPointOnTarget virtual bool GetClosestPointOnTarget( const UActorComponent * Target, const UPrimitiveComponent * Primitive, const FVector & Point, FVector & OutClosestPoint, FVector & OutNormal ) const =0 Reimplemented by : FUxtGrabPointerFocus::GetClosestPointOnTarget , FUxtPokePointerFocus::GetClosestPointOnTarget Find the closest point on the given primitive using the distance function of the target interface. function RaiseEnterFocusEvent virtual void RaiseEnterFocusEvent( UPrimitiveComponent * Target, UUxtNearPointerComponent * Pointer ) const =0 Reimplemented by : FUxtGrabPointerFocus::RaiseEnterFocusEvent , FUxtPokePointerFocus::RaiseEnterFocusEvent Notify the target object that it has entered focus. function RaiseUpdateFocusEvent virtual void RaiseUpdateFocusEvent( UPrimitiveComponent * Target, UUxtNearPointerComponent * Pointer ) const =0 Reimplemented by : FUxtGrabPointerFocus::RaiseUpdateFocusEvent , FUxtPokePointerFocus::RaiseUpdateFocusEvent Notify the focused target object that the pointer has been updated. function RaiseExitFocusEvent virtual void RaiseExitFocusEvent( UPrimitiveComponent * Target, UUxtNearPointerComponent * Pointer ) const =0 Reimplemented by : FUxtGrabPointerFocus::RaiseExitFocusEvent , FUxtPokePointerFocus::RaiseExitFocusEvent Notify the target object that it has exited focus. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_f_uxt_manipulator_component_customization.html": {
    "href": "api/_f_uxt_manipulator_component_customization.html",
    "title": "MRTK Unreal API Reference FUxtManipulatorComponentCustomization | UXT Documentation",
    "keywords": "FUxtManipulatorComponentCustomization Provides a custom property panel for the UxtManipulatorComponent. class FUxtManipulatorComponentCustomization; Header #include <UxtManipulatorComponentCustomization.h> Inheritance Inherits from IDetailCustomization Public Functions Name virtual void CustomizeDetails (IDetailLayoutBuilder & DetailBuilder) override TSharedRef< IDetailCustomization > MakeInstance () Public Functions Documentation function CustomizeDetails virtual void CustomizeDetails( IDetailLayoutBuilder & DetailBuilder ) override function MakeInstance static TSharedRef< IDetailCustomization > MakeInstance() Updated on 23 August 2021 at 12:07:13 Coordinated Universal Time"
  },
  "api/_u_x_r_simulation_head_movement_component.html": {
    "href": "api/_u_x_r_simulation_head_movement_component.html",
    "title": "MRTK Unreal API Reference UXRSimulationHeadMovementComponent | UXT Documentation",
    "keywords": "UXRSimulationHeadMovementComponent Movement component that applies user input. Works similar to UFloatingPawnMovement, but does not require a APawn actor. class UXRSimulationHeadMovementComponent; Header #include <XRSimulationHeadMovementComponent.h> Inheritance Inherits from UMovementComponent Public Functions Name virtual void BeginPlay () override virtual void TickComponent (float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction * ThisTickFunction) override void AddRotationInput (const FRotator & Rotation) void AddMovementInput (const FVector & Movement) bool IsHeadMovementEnabled () const void SetHeadMovementEnabled (bool bEnable) Public Functions Documentation function BeginPlay virtual void BeginPlay() override function TickComponent virtual void TickComponent( float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction * ThisTickFunction ) override function AddRotationInput void AddRotationInput( const FRotator & Rotation ) Add cumulative rotation input relative to current world space orientation. function AddMovementInput void AddMovementInput( const FVector & Movement ) Add cumulative movement input in world space. function IsHeadMovementEnabled bool IsHeadMovementEnabled() const function SetHeadMovementEnabled void SetHeadMovementEnabled( bool bEnable ) Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_uxt_x_r_simulation_subsystem.html": {
    "href": "api/_u_uxt_x_r_simulation_subsystem.html",
    "title": "MRTK Unreal API Reference UUxtXRSimulationSubsystem | UXT Documentation",
    "keywords": "UUxtXRSimulationSubsystem Subsystem for managing XR simulation actors. class UUxtXRSimulationSubsystem; Header #include <UxtXRSimulationSubsystem.h> Inheritance Inherits from ULocalPlayerSubsystem Public Functions Name virtual void Initialize (FSubsystemCollectionBase & Collection) override virtual void Deinitialize () override bool IsSimulationEnabled () const bool GetMotionControllerData (EControllerHand Hand, FXRMotionControllerData & OutMotionControllerData, bool & OutSelectPressed, bool & OutGrabbing) const bool GetHeadPose (FQuat & OutHeadRotation, FVector & OutHeadPosition) const Public Functions Documentation function Initialize virtual void Initialize( FSubsystemCollectionBase & Collection ) override function Deinitialize virtual void Deinitialize() override function IsSimulationEnabled inline bool IsSimulationEnabled() const function GetMotionControllerData bool GetMotionControllerData( EControllerHand Hand, FXRMotionControllerData & OutMotionControllerData, bool & OutSelectPressed, bool & OutGrabbing ) const function GetHeadPose bool GetHeadPose( FQuat & OutHeadRotation, FVector & OutHeadPosition ) const Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_uxt_widget_component.html": {
    "href": "api/_u_uxt_widget_component.html",
    "title": "MRTK Unreal API Reference UUxtWidgetComponent | UXT Documentation",
    "keywords": "UUxtWidgetComponent Widget Component that is interactable with near and far interaction. class UUxtWidgetComponent; Header #include <Controls/UxtWidgetComponent.h> Inheritance Inherits from UActorComponent, IUxtPokeTarget , IUxtPokeHandler , IUxtFarTarget , IUxtFarHandler Protected Functions Name virtual void BeginPlay () override virtual bool IsPokeFocusable_Implementation (const UPrimitiveComponent * Primitive) const override virtual EUxtPokeBehaviour GetPokeBehaviour_Implementation () const override virtual bool GetClosestPoint_Implementation (const UPrimitiveComponent * Primitive, const FVector & Point, FVector & OutClosestPoint, FVector & OutNormal) const override virtual bool CanHandlePoke_Implementation (UPrimitiveComponent * Primitive) const override virtual void OnEnterPokeFocus_Implementation ( UUxtNearPointerComponent * Pointer) override virtual void OnUpdatePokeFocus_Implementation ( UUxtNearPointerComponent * Pointer) override virtual void OnExitPokeFocus_Implementation ( UUxtNearPointerComponent * Pointer) override virtual void OnBeginPoke_Implementation ( UUxtNearPointerComponent * Pointer) override virtual void OnEndPoke_Implementation ( UUxtNearPointerComponent * Pointer) override virtual bool IsFarFocusable_Implementation (const UPrimitiveComponent * Primitive) const override virtual bool CanHandleFar_Implementation (UPrimitiveComponent * Primitive) const override virtual void OnEnterFarFocus_Implementation ( UUxtFarPointerComponent * Pointer) override virtual void OnUpdatedFarFocus_Implementation ( UUxtFarPointerComponent * Pointer) override virtual void OnExitFarFocus_Implementation ( UUxtFarPointerComponent * Pointer) override virtual void OnFarPressed_Implementation ( UUxtFarPointerComponent * Pointer) override virtual void OnFarReleased_Implementation ( UUxtFarPointerComponent * Pointer) override Public Attributes Name int32 VirtualUserIndex Additional inherited members Public Functions inherited from IUxtPokeTarget Name bool IsPokeFocusable (const UPrimitiveComponent * Primitive) const EUxtPokeBehaviour GetPokeBehaviour () const bool GetClosestPoint (const UPrimitiveComponent * Primitive, const FVector & Point, FVector & OutClosestPoint, FVector & OutNormal) const Public Functions inherited from IUxtPokeHandler Name bool CanHandlePoke (UPrimitiveComponent * Primitive) const void OnEnterPokeFocus ( UUxtNearPointerComponent * Pointer) void OnUpdatePokeFocus ( UUxtNearPointerComponent * Pointer) void OnExitPokeFocus ( UUxtNearPointerComponent * Pointer) void OnBeginPoke ( UUxtNearPointerComponent * Pointer) void OnUpdatePoke ( UUxtNearPointerComponent * Pointer) void OnEndPoke ( UUxtNearPointerComponent * Pointer) Public Functions inherited from IUxtFarTarget Name bool IsFarFocusable (const UPrimitiveComponent * Primitive) const Public Functions inherited from IUxtFarHandler Name bool CanHandleFar (UPrimitiveComponent * Primitive) const void OnEnterFarFocus ( UUxtFarPointerComponent * Pointer) void OnUpdatedFarFocus ( UUxtFarPointerComponent * Pointer) void OnExitFarFocus ( UUxtFarPointerComponent * Pointer) void OnFarPressed ( UUxtFarPointerComponent * Pointer) void OnFarDragged ( UUxtFarPointerComponent * Pointer) void OnFarReleased ( UUxtFarPointerComponent * Pointer) Protected Functions Documentation function BeginPlay virtual void BeginPlay() override function IsPokeFocusable_Implementation virtual bool IsPokeFocusable_Implementation( const UPrimitiveComponent * Primitive ) const override function GetPokeBehaviour_Implementation virtual EUxtPokeBehaviour GetPokeBehaviour_Implementation() const override function GetClosestPoint_Implementation virtual bool GetClosestPoint_Implementation( const UPrimitiveComponent * Primitive, const FVector & Point, FVector & OutClosestPoint, FVector & OutNormal ) const override function CanHandlePoke_Implementation virtual bool CanHandlePoke_Implementation( UPrimitiveComponent * Primitive ) const override function OnEnterPokeFocus_Implementation virtual void OnEnterPokeFocus_Implementation( UUxtNearPointerComponent * Pointer ) override function OnUpdatePokeFocus_Implementation virtual void OnUpdatePokeFocus_Implementation( UUxtNearPointerComponent * Pointer ) override function OnExitPokeFocus_Implementation virtual void OnExitPokeFocus_Implementation( UUxtNearPointerComponent * Pointer ) override function OnBeginPoke_Implementation virtual void OnBeginPoke_Implementation( UUxtNearPointerComponent * Pointer ) override function OnEndPoke_Implementation virtual void OnEndPoke_Implementation( UUxtNearPointerComponent * Pointer ) override function IsFarFocusable_Implementation virtual bool IsFarFocusable_Implementation( const UPrimitiveComponent * Primitive ) const override function CanHandleFar_Implementation virtual bool CanHandleFar_Implementation( UPrimitiveComponent * Primitive ) const override function OnEnterFarFocus_Implementation virtual void OnEnterFarFocus_Implementation( UUxtFarPointerComponent * Pointer ) override function OnUpdatedFarFocus_Implementation virtual void OnUpdatedFarFocus_Implementation( UUxtFarPointerComponent * Pointer ) override function OnExitFarFocus_Implementation virtual void OnExitFarFocus_Implementation( UUxtFarPointerComponent * Pointer ) override function OnFarPressed_Implementation virtual void OnFarPressed_Implementation( UUxtFarPointerComponent * Pointer ) override function OnFarReleased_Implementation virtual void OnFarReleased_Implementation( UUxtFarPointerComponent * Pointer ) override Public Attributes Documentation variable VirtualUserIndex int32 VirtualUserIndex = 0; Represents the Virtual User Index. Each virtual user should be represented by a different index number, this will maintain separate capture and focus states for them. Each controller or finger-tip should get a unique PointerIndex. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_uxt_u_i_element_component.html": {
    "href": "api/_u_uxt_u_i_element_component.html",
    "title": "MRTK Unreal API Reference UUxtUIElementComponent | UXT Documentation",
    "keywords": "UUxtUIElementComponent Controls visibility of a UI element in the scene. Parent-child relationships are managed via actor attachments. If the parent is hidden, all of its children will be hidden. It is recommended to have the UxtUIElementComponent as the root component as the actor as this allows it to automatically update if the actor is attached to a new parent actor. If it is not the root component, RefreshUIElement() will need to be called manually after attaching a new parent actor. Note: Manually changing actor visibility will not affect child UI elements and may lead to unwanted behavior. class UUxtUIElementComponent; Header #include <Controls/UxtUIElementComponent.h> Inheritance Inherits from USceneComponent Inherited by UUxtPinchSliderComponent , UUxtPressableButtonComponent , UUxtTouchableVolumeComponent Public Functions Name UUxtUIElementComponent () =default EUxtUIElementVisibility GetUIVisibilitySelf () const EUxtUIElementVisibility GetUIVisibilityInHierarchy () const void SetUIVisibility (EUxtUIElementVisibility NewVisibility) void RefreshUIElement () Protected Functions Name virtual void BeginPlay () override virtual void OnAttachmentChanged () override Public Attributes Name FUxtUIElementShowDelegate OnShowElement FUxtUIElementHideDelegate OnHideElement Public Functions Documentation function UUxtUIElementComponent UUxtUIElementComponent() =default function GetUIVisibilitySelf EUxtUIElementVisibility GetUIVisibilitySelf() const Get the element's visibility. This does not reflect if the element is visible in the scene. function GetUIVisibilityInHierarchy EUxtUIElementVisibility GetUIVisibilityInHierarchy() const Get the element's visibility in the scene. function SetUIVisibility void SetUIVisibility( EUxtUIElementVisibility NewVisibility ) Set the element's visibility. The element will not be visible in the scene if it's parent is hidden. function RefreshUIElement void RefreshUIElement() Refresh the element's visibility. This is only necessary after changing the element's parent actor when this is not the root component of the actor. Protected Functions Documentation function BeginPlay virtual void BeginPlay() override Reimplemented by : UUxtPinchSliderComponent::BeginPlay , UUxtPressableButtonComponent::BeginPlay , UUxtTouchableVolumeComponent::BeginPlay function OnAttachmentChanged virtual void OnAttachmentChanged() override Public Attributes Documentation variable OnShowElement FUxtUIElementShowDelegate OnShowElement; Event raised when the element is shown. variable OnHideElement FUxtUIElementHideDelegate OnHideElement; Event raised when the element is hidden. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_a_uxt_text_render_actor.html": {
    "href": "api/_a_uxt_text_render_actor.html",
    "title": "MRTK Unreal API Reference AUxtTextRenderActor | UXT Documentation",
    "keywords": "AUxtTextRenderActor A text render actor which automatically wraps the UUxtTextRenderComponent . class AUxtTextRenderActor; Header #include <Controls/UxtTextRenderActor.h> Inheritance Inherits from AActor Public Functions Name class UUxtTextRenderComponent * GetTextRender () const Public Functions Documentation function GetTextRender inline class UUxtTextRenderComponent * GetTextRender() const Returns TextRender subobject Updated on 23 August 2021 at 12:07:13 Coordinated Universal Time"
  },
  "api/_u_uxt_hand_constraint_component.html": {
    "href": "api/_u_uxt_hand_constraint_component.html",
    "title": "MRTK Unreal API Reference UUxtHandConstraintComponent | UXT Documentation",
    "keywords": "UUxtHandConstraintComponent Component that calculates a goal based on hand tracking and moves the owning actor. Several zones around the hand supported: radial and ulnar for the thumb side and its opposite, as well as above and below the hand. The goal position is computed by casting a ray in the direction of the zone at a bounding box around the hand joints. The constraint can be oriented on either the hand rotation alone or facing the player. class UUxtHandConstraintComponent; Header #include <Behaviors/UxtHandConstraintComponent.h> Inheritance Inherits from UActorComponent Inherited by UUxtPalmUpConstraintComponent Public Functions Name UUxtHandConstraintComponent () EControllerHand GetTrackedHand () const const FBox & GetHandBounds () const bool IsConstraintActive () const const FVector & GetGoalLocation () const const FQuat & GetGoalRotation () const virtual bool IsHandUsableForConstraint (EControllerHand NewHand) Protected Functions Name virtual void BeginPlay () override virtual void TickComponent (float DeltaTime, ELevelTick TickType, FActorComponentTickFunction * ThisTickFunction) override Public Attributes Name EControllerHand Hand EUxtHandConstraintZone Zone EUxtHandConstraintOffsetMode OffsetMode EUxtHandConstraintRotationMode RotationMode float GoalMargin bool bMoveOwningActor float LocationLerpTime float RotationLerpTime FUxtHandConstraintActivatedDelegate OnConstraintActivated FUxtHandConstraintDeactivatedDelegate OnConstraintDeactivated FUxtHandConstraintBeginTrackingDelegate OnBeginTracking FUxtHandConstraintEndTrackingDelegate OnEndTracking Public Functions Documentation function UUxtHandConstraintComponent UUxtHandConstraintComponent() function GetTrackedHand EControllerHand GetTrackedHand() const function GetHandBounds const FBox & GetHandBounds() const function IsConstraintActive bool IsConstraintActive() const function GetGoalLocation const FVector & GetGoalLocation() const function GetGoalRotation const FQuat & GetGoalRotation() const function IsHandUsableForConstraint virtual bool IsHandUsableForConstraint( EControllerHand NewHand ) Reimplemented by : UUxtPalmUpConstraintComponent::IsHandUsableForConstraint Returns true if the given hand is eligible for the constraint. If the hand is rejected the constraint will be deactivated. Protected Functions Documentation function BeginPlay virtual void BeginPlay() override function TickComponent virtual void TickComponent( float DeltaTime, ELevelTick TickType, FActorComponentTickFunction * ThisTickFunction ) override Public Attributes Documentation variable Hand EControllerHand Hand = EControllerHand::AnyHand; Hand to use for the constraint. If set to 'Any Hand' the first tracked hand will be used, until tracking is lost. variable Zone EUxtHandConstraintZone Zone = EUxtHandConstraintZone::UlnarSide; Safe zone that determines the target location of the constraint relative to the hand. variable OffsetMode EUxtHandConstraintOffsetMode OffsetMode = EUxtHandConstraintOffsetMode::LookAtCamera; Determines how the offset vector is computed. variable RotationMode EUxtHandConstraintRotationMode RotationMode = EUxtHandConstraintRotationMode::LookAtCamera; Determines how the goal rotation is computed. variable GoalMargin float GoalMargin = 0.0f; Margin between the hand bounding box and the goal location. variable bMoveOwningActor bool bMoveOwningActor = true; Actor transform is moved towards the goal if true. Disable this to only compute the goal without changing the actor transform. variable LocationLerpTime float LocationLerpTime = 0.05f; Interpolation time for smoothed translation. Set to zero to disable smoothing. variable RotationLerpTime float RotationLerpTime = 0.05f; Interpolation time for smoothed rotation. Set to zero to disable smoothing. variable OnConstraintActivated FUxtHandConstraintActivatedDelegate OnConstraintActivated; Event raised when the constraint becomes active, as indicated by the bIsConstraintActive property. variable OnConstraintDeactivated FUxtHandConstraintDeactivatedDelegate OnConstraintDeactivated; Event raised when the constraint becomes inactive, as indicated by the bIsConstraintActive property. variable OnBeginTracking FUxtHandConstraintBeginTrackingDelegate OnBeginTracking; Event raised when the constraint begins tracking a hand. variable OnEndTracking FUxtHandConstraintEndTrackingDelegate OnEndTracking; Event raised when the constraint ends tracking a hand. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_uxt_function_library.html": {
    "href": "api/_u_uxt_function_library.html",
    "title": "MRTK Unreal API Reference UUxtFunctionLibrary | UXT Documentation",
    "keywords": "UUxtFunctionLibrary Library of utility functions for UX Tools. class UUxtFunctionLibrary; Header #include <Utils/UxtFunctionLibrary.h> Inheritance Inherits from UBlueprintFunctionLibrary Public Functions Name FTransform GetHeadPose (UObject * WorldContextObject) bool IsInEditor () USceneComponent * GetSceneComponentFromReference (const FComponentReference & ComponentRef, AActor * Owner) Public Attributes Name bool bUseTestData FTransform TestHeadPose Public Functions Documentation function GetHeadPose static FTransform GetHeadPose( UObject * WorldContextObject ) Returns the world space position and orientation of the head. function IsInEditor static bool IsInEditor() Returns true if we are running in editor (not game mode or VR preview). function GetSceneComponentFromReference static USceneComponent * GetSceneComponentFromReference( const FComponentReference & ComponentRef, AActor * Owner ) Returns the scene component the passed component reference is pointing to if there is any - else will return nullptr. Replicates FComponentReference::GetComponent() functionality, except it does not use FProperty to detect components. This allows it to detect components not contained in a blueprint. Public Attributes Documentation variable bUseTestData static bool bUseTestData = false; When true, the methods in this class will use test data. Intended for tests and internal usage only. variable TestHeadPose static FTransform TestHeadPose = FTransform::Identity; When bUseTestData is true, GetHeadPose will return this transform. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_uxt_follow_component.html": {
    "href": "api/_u_uxt_follow_component.html",
    "title": "MRTK Unreal API Reference UUxtFollowComponent | UXT Documentation",
    "keywords": "UUxtFollowComponent The follow component has three different constraints that keeps its owner in front of the camera: Angular Clamp, Distance Clamp, and Orientation. The combination of Angular and Distance Clamp creates a frustum in front of the camera where its owner can be. If its owner is outside that frustum it is adjusted. Angular Clamp: The objective of this constraint is to ensure that the reference forward vector remains within the bounds set by the leashing parameters. To do this, determine the angles between toTarget and the leashing bounds about the global Z-axis and the reference's Y-axis. If the toTarget falls within the leashing bounds, then we don't have to modify it. Otherwise, we apply a correction rotation to bring it within bounds. This will ensure that the its owner stays within the top, bottom, right and left planes of the frustum. Distance Clamp: The objective of this constraint is to ensure that the following actor stays within bounds set by the distance parameters. To do this, we measure the current distance from the camera to the its owner. If the distance is within the MinimumDistance and MaximumDistance then we don't have to modify it. Otherwise, we push away or pull in the its owner along the reference forward vector. This will ensure that the its owner stays within the near and far planes of the frustum. Orientation: The two options provided are constant FaceCamera or WorldLock. While world locked there are three conditions that will cause the its owner to face the camera: Angular Clamps Distance Clamps The angle between the forward vector of the its owner and toTarget vector (vector between the camera and the its owner) is larger than dead zone angle parameter class UUxtFollowComponent; Header #include <Behaviors/UxtFollowComponent.h> Inheritance Inherits from UActorComponent Public Functions Name UUxtFollowComponent () void Recenter () Protected Functions Name virtual void BeginPlay () override virtual void TickComponent (float DeltaTime, ELevelTick TickType, FActorComponentTickFunction * ThisTickFunction) override Public Attributes Name AActor * ActorToFollow TEnumAsByte< EUxtFollowOrientBehavior > OrientationType float OrientToCameraDeadzoneDegrees bool bIgnoreDistanceClamp float MinimumDistance float MaximumDistance float DefaultDistance float VerticalMaxDistance bool bUseFixedVerticalOffset bool bIgnoreAngleClamp float MaxViewHorizontalDegrees float MaxViewVerticalDegrees bool bIgnoreCameraPitchAndRoll bool bInterpolatePose float LerpTime float FixedVerticalOffset float PitchOffset Public Functions Documentation function UUxtFollowComponent UUxtFollowComponent() function Recenter void Recenter() Force the owner to recenter in the camera's field of view. Protected Functions Documentation function BeginPlay virtual void BeginPlay() override function TickComponent virtual void TickComponent( float DeltaTime, ELevelTick TickType, FActorComponentTickFunction * ThisTickFunction ) override Public Attributes Documentation variable ActorToFollow AActor * ActorToFollow; Actor that this component will follow. If null, this component will follow the camera variable OrientationType TEnumAsByte< EUxtFollowOrientBehavior > OrientationType = EUxtFollowOrientBehavior::WorldLock; Orientation Type variable OrientToCameraDeadzoneDegrees float OrientToCameraDeadzoneDegrees = 60.0f; The owner will not reorient until the angle between its forward vector and the vector to the camera is greater than this value variable bIgnoreDistanceClamp bool bIgnoreDistanceClamp = false; Option to ignore distance clamping variable MinimumDistance float MinimumDistance = 50.0f; Min distance from eye to position its owner around, i.e. the sphere radius variable MaximumDistance float MaximumDistance = 100.0f; Max distance from eye to its owner variable DefaultDistance float DefaultDistance = 75.0f; Default distance from eye to position its owner around, i.e. the sphere radius variable VerticalMaxDistance float VerticalMaxDistance = 0.0f; Max vertical distance between the owner and camera variable bUseFixedVerticalOffset bool bUseFixedVerticalOffset = false; Ignore vertical movement and lock the Y position of the object. variable bIgnoreAngleClamp bool bIgnoreAngleClamp = false; Option to ignore angle clamping variable MaxViewHorizontalDegrees float MaxViewHorizontalDegrees = 30.0f; The horizontal angle from the camera forward axis to the owner will not exceed this value variable MaxViewVerticalDegrees float MaxViewVerticalDegrees = 30.0f; The vertical angle from the camera forward axis to the owner will not exceed this value variable bIgnoreCameraPitchAndRoll bool bIgnoreCameraPitchAndRoll = false; Option to ignore the pitch and roll of the camera variable bInterpolatePose bool bInterpolatePose = true; Option to ignore interpolation between follow poses variable LerpTime float LerpTime = 0.1f; Rate at which its owner will move toward default distance when angular leashing variable FixedVerticalOffset UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"UxtFollow\", meta=(EditCondition=\"bUseFixedVerticalOffset\", EditConditionHides)) float FixedVerticalOffset = 0.0f; Fixed vertical position offset distance. variable PitchOffset UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"UxtFollow\", meta=(EditCondition=\"bIgnoreCameraPitchAndRoll && !bIgnoreAngleClamp && !bUseFixedVerticalOffset\", EditConditionHides)) float PitchOffset = 0.0f; Pitch offset from camera (relative to Max Distance) Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_uxt_far_handler.html": {
    "href": "api/_u_uxt_far_handler.html",
    "title": "MRTK Unreal API Reference UUxtFarHandler | UXT Documentation",
    "keywords": "UUxtFarHandler class UUxtFarHandler; Inheritance Inherits from UInterface Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_uxt_far_cursor_component.html": {
    "href": "api/_u_uxt_far_cursor_component.html",
    "title": "MRTK Unreal API Reference UUxtFarCursorComponent | UXT Documentation",
    "keywords": "UUxtFarCursorComponent When added to an actor with a far pointer this component displays a flat ring cursor at the pointer's hit point oriented following the hit normal. class UUxtFarCursorComponent; Header #include <Controls/UxtFarCursorComponent.h> Inheritance Inherits from UUxtRingCursorComponent Public Functions Name UUxtFarCursorComponent () Protected Functions Name virtual void BeginPlay () override virtual void EndPlay (const EEndPlayReason::Type EndPlayReason) override virtual void TickComponent (float DeltaTime, ELevelTick TickType, FActorComponentTickFunction * ThisTickFunction) override Public Attributes Name float HoverDistance float IdleRadius float PressedRadius Public Functions Documentation function UUxtFarCursorComponent UUxtFarCursorComponent() Protected Functions Documentation function BeginPlay virtual void BeginPlay() override function EndPlay virtual void EndPlay( const EEndPlayReason::Type EndPlayReason ) override function TickComponent virtual void TickComponent( float DeltaTime, ELevelTick TickType, FActorComponentTickFunction * ThisTickFunction ) override Public Attributes Documentation variable HoverDistance float HoverDistance = 0.5f; Distance over the hit surface to place the cursor at. variable IdleRadius float IdleRadius = 0.6f; Cursor radius when idle at 1m from the camera. The actual radius will scale with the distance to the camera to keep a constant screen size. variable PressedRadius float PressedRadius = 0.42f; Cursor radius when pressed at 1m from the camera. The actual radius will scale with the distance to the camera to keep a constant screen size. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_uxt_bounds_control_component.html": {
    "href": "api/_u_uxt_bounds_control_component.html",
    "title": "MRTK Unreal API Reference UUxtBoundsControlComponent | UXT Documentation",
    "keywords": "UUxtBoundsControlComponent Manages a set of affordances that can be manipulated for changing the actor transform. class UUxtBoundsControlComponent; Header #include <Controls/UxtBoundsControlComponent.h> Inheritance Inherits from UUxtManipulatorComponent , UActorComponent Public Functions Name UUxtBoundsControlComponent () UUxtBoundsControlComponent (FVTableHelper & Helper) ~UUxtBoundsControlComponent () AActor * GetBoundsControlActor () const const TMap< UPrimitiveComponent *, FUxtAffordanceInstance > & GetPrimitiveAffordanceMap () const bool GetInitBoundsFromActor () const const FBox & GetBounds () const UStaticMesh * GetAffordanceKindMesh (EUxtAffordanceKind Kind) const void ComputeBoundsFromComponents () UPrimitiveComponent * GetAffordancePrimitive (const EUxtAffordancePlacement Placement) const Protected Functions Name virtual void BeginPlay () override virtual void EndPlay (const EEndPlayReason::Type EndPlayReason) override virtual void TickComponent (float DeltaTime, ELevelTick TickType, FActorComponentTickFunction * ThisTickFunction) override void OnAffordanceEnterFarFocus ( UUxtGrabTargetComponent * Grabbable, UUxtFarPointerComponent * Pointer) void OnAffordanceEnterGrabFocus ( UUxtGrabTargetComponent * Grabbable, UUxtNearPointerComponent * Pointer) void OnAffordanceExitFarFocus ( UUxtGrabTargetComponent * Grabbable, UUxtFarPointerComponent * Pointer) void OnAffordanceExitGrabFocus ( UUxtGrabTargetComponent * Grabbable, UUxtNearPointerComponent * Pointer) void OnAffordanceBeginGrab ( UUxtGrabTargetComponent * Grabbable, FUxtGrabPointerData GrabPointer) void OnAffordanceUpdateGrab ( UUxtGrabTargetComponent * Grabbable, FUxtGrabPointerData GrabPointer) void OnAffordanceEndGrab ( UUxtGrabTargetComponent * Grabbable, FUxtGrabPointerData GrabPointer) virtual void OnExternalManipulationStarted () override const FUxtGrabPointerData * FindGrabPointer (const FUxtAffordanceInstance * AffordanceInstance) void TransformTarget (const FUxtAffordanceConfig & Affordance, const FUxtGrabPointerData & GrabPointer) const void CreateAffordances () void DestroyAffordances () void UpdateAffordanceTransforms () void UpdateAffordanceAnimation (float DeltaTime) bool IsAffordanceGrabbed (const FUxtAffordanceInstance * Affordance) const bool GetRelativeBoxTransform (const FBox & Box, const FBox & RelativeTo, FTransform & OutTransform) Public Attributes Name UUxtBoundsControlConfig * Config UStaticMesh * CenterAffordanceMesh UStaticMesh * FaceAffordanceMesh UStaticMesh * EdgeAffordanceMesh UStaticMesh * CornerAffordanceMesh UBoxComponent * CollisionBox FName CollisionProfile float AffordanceVisibilityDistance float AffordanceTransitionDuration FUxtBoundsControlManipulationStartedDelegate OnManipulationStarted FUxtBoundsControlManipulationEndedDelegate OnManipulationEnded Additional inherited members Public Functions inherited from UUxtManipulatorComponent Name bool GetAutoDetectConstraints () const void SetAutoDetectConstraints (bool bNewAutoDetectConstraints) const TArray< FComponentReference > & GetSelectedConstraints () const void AddConstraint (const FComponentReference & NewConstraint) void RemoveConstraint (const FComponentReference & NewConstraint) bool GetRelativeToInitialScale () const void SetRelativeToInitialScale (const bool Value) float GetMinScale () const void SetMinScale (const float Value) float GetMaxScale () const void SetMaxScale (const float Value) Protected Functions inherited from UUxtManipulatorComponent Name void InitializeConstraints (USceneComponent * NewTargetComponent) void ApplyConstraints (FTransform & Transform, EUxtTransformMode TransformMode, bool bIsOneHanded, bool bIsNear) const Public Functions Documentation function UUxtBoundsControlComponent UUxtBoundsControlComponent() function UUxtBoundsControlComponent UUxtBoundsControlComponent( FVTableHelper & Helper ) function ~UUxtBoundsControlComponent ~UUxtBoundsControlComponent() function GetBoundsControlActor AActor * GetBoundsControlActor() const function GetPrimitiveAffordanceMap const TMap< UPrimitiveComponent *, FUxtAffordanceInstance > & GetPrimitiveAffordanceMap() const Get the map between the affordance actors and their information. function GetInitBoundsFromActor bool GetInitBoundsFromActor() const function GetBounds const FBox & GetBounds() const function GetAffordanceKindMesh UStaticMesh * GetAffordanceKindMesh( EUxtAffordanceKind Kind ) const Mesh for the given kind of affordance. function ComputeBoundsFromComponents void ComputeBoundsFromComponents() Compute the bounding box based on the components of the bounding box actor. function GetAffordancePrimitive UPrimitiveComponent * GetAffordancePrimitive( const EUxtAffordancePlacement Placement ) const Protected Functions Documentation function BeginPlay virtual void BeginPlay() override Reimplements : UUxtManipulatorComponent::BeginPlay function EndPlay virtual void EndPlay( const EEndPlayReason::Type EndPlayReason ) override function TickComponent virtual void TickComponent( float DeltaTime, ELevelTick TickType, FActorComponentTickFunction * ThisTickFunction ) override Reimplements : UUxtManipulatorComponent::TickComponent function OnAffordanceEnterFarFocus void OnAffordanceEnterFarFocus( UUxtGrabTargetComponent * Grabbable, UUxtFarPointerComponent * Pointer ) Callback when an affordance is entering focus. function OnAffordanceEnterGrabFocus void OnAffordanceEnterGrabFocus( UUxtGrabTargetComponent * Grabbable, UUxtNearPointerComponent * Pointer ) Callback when an affordance is entering focus. function OnAffordanceExitFarFocus void OnAffordanceExitFarFocus( UUxtGrabTargetComponent * Grabbable, UUxtFarPointerComponent * Pointer ) Callback when an affordance is exiting focus. function OnAffordanceExitGrabFocus void OnAffordanceExitGrabFocus( UUxtGrabTargetComponent * Grabbable, UUxtNearPointerComponent * Pointer ) Callback when an affordance is exiting focus. function OnAffordanceBeginGrab void OnAffordanceBeginGrab( UUxtGrabTargetComponent * Grabbable, FUxtGrabPointerData GrabPointer ) Callback when an affordance is being grabbed. function OnAffordanceUpdateGrab void OnAffordanceUpdateGrab( UUxtGrabTargetComponent * Grabbable, FUxtGrabPointerData GrabPointer ) Callback when an affordance is being grabbed. function OnAffordanceEndGrab void OnAffordanceEndGrab( UUxtGrabTargetComponent * Grabbable, FUxtGrabPointerData GrabPointer ) Callback when an affordance is being released. function OnExternalManipulationStarted virtual void OnExternalManipulationStarted() override function FindGrabPointer const FUxtGrabPointerData * FindGrabPointer( const FUxtAffordanceInstance * AffordanceInstance ) Look up the grab pointer data for an affordance. Returns null if the affordance is not currently grabbed. function TransformTarget void TransformTarget( const FUxtAffordanceConfig & Affordance, const FUxtGrabPointerData & GrabPointer ) const Modify the target based on the current affordance interaction function CreateAffordances void CreateAffordances() Create the BoundsControlActor and all affordances described in the config. function DestroyAffordances void DestroyAffordances() Destroy the BoundsControlActor and affordance instances. function UpdateAffordanceTransforms void UpdateAffordanceTransforms() Update the world transforms of affordance actors to match the current bounding box. function UpdateAffordanceAnimation void UpdateAffordanceAnimation( float DeltaTime ) Update animated properties such as affordance highlights. function IsAffordanceGrabbed bool IsAffordanceGrabbed( const FUxtAffordanceInstance * Affordance ) const Returns true if the affordance instance is currently bing grabbed. function GetRelativeBoxTransform static bool GetRelativeBoxTransform( const FBox & Box, const FBox & RelativeTo, FTransform & OutTransform ) Compute the relative translation and scale between two boxes. Returns false if relative scale can not be computed. Public Attributes Documentation variable Config UUxtBoundsControlConfig * Config; Configuration of the bounds control affordances. variable CenterAffordanceMesh UStaticMesh * CenterAffordanceMesh; Mesh used for a center affordance. variable FaceAffordanceMesh UStaticMesh * FaceAffordanceMesh; Mesh used for a face affordances. variable EdgeAffordanceMesh UStaticMesh * EdgeAffordanceMesh; Mesh used for a edge affordances. variable CornerAffordanceMesh UStaticMesh * CornerAffordanceMesh; Mesh used for a corner affordances. variable CollisionBox UBoxComponent * CollisionBox; Collision box that prevents pointer rays from passing through bounds control's box. variable CollisionProfile FName CollisionProfile = TEXT(\"UI\"); The collision profile used by CollisionBox . variable AffordanceVisibilityDistance float AffordanceVisibilityDistance = 10.f; Hand distance at which affordances become visible. variable AffordanceTransitionDuration float AffordanceTransitionDuration = 0.25f; Duration of animated affordance transitions. variable OnManipulationStarted FUxtBoundsControlManipulationStartedDelegate OnManipulationStarted; Event raised when a manipulation is started. variable OnManipulationEnded FUxtBoundsControlManipulationEndedDelegate OnManipulationEnded; Event raised when a manipulation is ended. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_uxt_base_object_collection.html": {
    "href": "api/_u_uxt_base_object_collection.html",
    "title": "MRTK Unreal API Reference UUxtBaseObjectCollection | UXT Documentation",
    "keywords": "UUxtBaseObjectCollection Base scene component class for object collections class UUxtBaseObjectCollection; Header #include <Controls/UxtBaseObjectCollection.h> Inheritance Inherits from USceneComponent Public Functions Name void SetSortCallback (const FUxtSortScrollingObjectCollectionDelegate & Callback) bool CompareText (const FText & LHS, const FText & RHS) bool CompareString (const FString & LHS, const FString & RHS) Protected Functions Name const TArray< AActor * > & GetAttachedActors () const const TArray< AActor * > & CollectAttachedActors () Public Attributes Name FUxtSortScrollingObjectCollectionDelegate SortCollection Public Functions Documentation function SetSortCallback inline void SetSortCallback( const FUxtSortScrollingObjectCollectionDelegate & Callback ) Set the the callback function to be used by the sort to compare actor pairs. In order to see results of sorting with the editor it is necessary to enable run in editor in the functions details panel. function CompareText static inline bool CompareText( const FText & LHS, const FText & RHS ) Helper function to allow Blueprint class to easily compare a pair of text objects within sort. function CompareString static inline bool CompareString( const FString & LHS, const FString & RHS ) Helper function to allow Blueprint class to easily compare a pair of string objects within sort. Protected Functions Documentation function GetAttachedActors inline const TArray< AActor * > & GetAttachedActors() const Get the array of attached actors. function CollectAttachedActors const TArray< AActor * > & CollectAttachedActors() Collect array of actors that are currently attached to the actor that this component is a part of. Public Attributes Documentation variable SortCollection FUxtSortScrollingObjectCollectionDelegate SortCollection; Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_i_uxt_hand_tracker.html": {
    "href": "api/_i_uxt_hand_tracker.html",
    "title": "MRTK Unreal API Reference IUxtHandTracker | UXT Documentation",
    "keywords": "IUxtHandTracker Hand tracker device interface. We assume that implementations poll and cache the hand tracking state at the beginning of the frame. This allows us to assume that if a hand is reported as tracked it will remain so for the remainder of the frame, simplifying client logic. class IUxtHandTracker; Header #include <HandTracking/IUxtHandTracker.h> Inheritance Inherits from IModularFeature Inherited by FDummyHandTracker , FUxtDefaultHandTracker , UUxtTouchBasedHandTrackerComponent Public Functions Name FName GetModularFeatureName () IUxtHandTracker & Get () virtual ~IUxtHandTracker () virtual ETrackingStatus GetTrackingStatus (EControllerHand Hand) const =0 virtual bool IsHandController (EControllerHand Hand) const =0 virtual bool GetJointState (EControllerHand Hand, EHandKeypoint Joint, FQuat & OutOrientation, FVector & OutPosition, float & OutRadius) const =0 virtual bool GetPointerPose (EControllerHand Hand, FQuat & OutOrientation, FVector & OutPosition) const =0 virtual bool GetGripPose (EControllerHand Hand, FQuat & OutOrientation, FVector & OutPosition) const =0 virtual bool GetIsGrabbing (EControllerHand Hand, bool & OutIsGrabbing) const =0 virtual bool GetIsSelectPressed (EControllerHand Hand, bool & OutIsSelectPressed) const =0 Public Functions Documentation function GetModularFeatureName static FName GetModularFeatureName() function Get static IUxtHandTracker & Get() Returns the currently registered hand tracker or nullptr if none function ~IUxtHandTracker inline virtual ~IUxtHandTracker() function GetTrackingStatus virtual ETrackingStatus GetTrackingStatus( EControllerHand Hand ) const =0 Reimplemented by : FDummyHandTracker::GetTrackingStatus , UUxtTouchBasedHandTrackerComponent::GetTrackingStatus , FUxtDefaultHandTracker::GetTrackingStatus Get tracking status of the hand or motion controller. function IsHandController virtual bool IsHandController( EControllerHand Hand ) const =0 Reimplemented by : FDummyHandTracker::IsHandController , UUxtTouchBasedHandTrackerComponent::IsHandController , FUxtDefaultHandTracker::IsHandController True if the controller is a hand. function GetJointState virtual bool GetJointState( EControllerHand Hand, EHandKeypoint Joint, FQuat & OutOrientation, FVector & OutPosition, float & OutRadius ) const =0 Reimplemented by : FDummyHandTracker::GetJointState , UUxtTouchBasedHandTrackerComponent::GetJointState , FUxtDefaultHandTracker::GetJointState Obtain the state of the given joint. Returns false if the hand is not tracked this frame, in which case the values of the output parameters are unchanged. function GetPointerPose virtual bool GetPointerPose( EControllerHand Hand, FQuat & OutOrientation, FVector & OutPosition ) const =0 Reimplemented by : FDummyHandTracker::GetPointerPose , UUxtTouchBasedHandTrackerComponent::GetPointerPose , FUxtDefaultHandTracker::GetPointerPose Obtain the pointer pose. Returns false if the hand is not tracked this frame, in which case the value of the output parameter is unchanged. function GetGripPose virtual bool GetGripPose( EControllerHand Hand, FQuat & OutOrientation, FVector & OutPosition ) const =0 Reimplemented by : FDummyHandTracker::GetGripPose , UUxtTouchBasedHandTrackerComponent::GetGripPose , FUxtDefaultHandTracker::GetGripPose Grip pose following the controller. Returns false if the hand is not tracked this frame, in which case the value of the output parameter is unchanged. function GetIsGrabbing virtual bool GetIsGrabbing( EControllerHand Hand, bool & OutIsGrabbing ) const =0 Reimplemented by : FDummyHandTracker::GetIsGrabbing , UUxtTouchBasedHandTrackerComponent::GetIsGrabbing , FUxtDefaultHandTracker::GetIsGrabbing Obtain current grabbing state. Returns false if the hand is not tracked this frame, in which case the value of the output parameter is unchanged. function GetIsSelectPressed virtual bool GetIsSelectPressed( EControllerHand Hand, bool & OutIsSelectPressed ) const =0 Reimplemented by : FDummyHandTracker::GetIsSelectPressed , UUxtTouchBasedHandTrackerComponent::GetIsSelectPressed , FUxtDefaultHandTracker::GetIsSelectPressed Obtain current selection state. Returns false if the hand is not tracked this frame, in which case the value of the output parameter is unchanged. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_uxt_math_utils_function_library.html": {
    "href": "api/_u_uxt_math_utils_function_library.html",
    "title": "MRTK Unreal API Reference UUxtMathUtilsFunctionLibrary | UXT Documentation",
    "keywords": "UUxtMathUtilsFunctionLibrary Library of utility functions for UX Tools. class UUxtMathUtilsFunctionLibrary; Header #include <Utils/UxtMathUtilsFunctionLibrary.h> Inheritance Inherits from UBlueprintFunctionLibrary Public Types Name typedef bool(*)(const USceneComponent *Component) HierarchyBoundsFilter Public Functions Name FRotator GetRotationBetweenVectors (const FVector & Vector1, const FVector & Vector2) void SwingTwistDecompose (const FRotator & Rotation, const FVector & TwistAxis, FRotator & Swing, FRotator & Twist) FTransform RotateAboutPivotPoint (const FTransform & Transform, const FRotator & Rotation, const FVector & Pivot) FBoxSphereBounds CalculateHierarchyBounds (USceneComponent * Component, HierarchyBoundsFilter Filter =nullptr) FBoxSphereBounds CalculateHierarchyBounds (USceneComponent * Component, const FTransform & LocalToTarget, HierarchyBoundsFilter Filter =nullptr) FBox CalculateNestedBoundsInGivenSpace (const USceneComponent *const Root, const FTransform & WorldToCalcSpace, bool bNonColliding, TArrayView< const UPrimitiveComponent *const > Ignore ={}) Public Types Documentation typedef HierarchyBoundsFilter typedef bool(* UUxtMathUtilsFunctionLibrary::HierarchyBoundsFilter) (const USceneComponent *Component); Function pointer which takes a scene component and returns true if the component should be considered for hierarchy bounds calculations. Public Functions Documentation function GetRotationBetweenVectors static FRotator GetRotationBetweenVectors( const FVector & Vector1, const FVector & Vector2 ) Compute minimal rotation between vectors. function SwingTwistDecompose static void SwingTwistDecompose( const FRotator & Rotation, const FVector & TwistAxis, FRotator & Swing, FRotator & Twist ) Decompose a rotation into swing and twist components. The twist component describes a rotation around the given twist axis, while the swing contains the remaining rotation. function RotateAboutPivotPoint static FTransform RotateAboutPivotPoint( const FTransform & Transform, const FRotator & Rotation, const FVector & Pivot ) Apply rotation about a pivot point to the transform. function CalculateHierarchyBounds static inline FBoxSphereBounds CalculateHierarchyBounds( USceneComponent * Component, HierarchyBoundsFilter Filter =nullptr ) Calculates the composite bounding box and bounding sphere around a component and its children, the output is in the space of the component. The optional filter component can be used to ignore specific scene components. function CalculateHierarchyBounds static FBoxSphereBounds CalculateHierarchyBounds( USceneComponent * Component, const FTransform & LocalToTarget, HierarchyBoundsFilter Filter =nullptr ) Calculates the composite bounding box and bounding sphere around a component and its children. The optional filter component can be used to ignore specific scene components. function CalculateNestedBoundsInGivenSpace static FBox CalculateNestedBoundsInGivenSpace( const USceneComponent *const Root, const FTransform & WorldToCalcSpace, bool bNonColliding, TArrayView< const UPrimitiveComponent *const > Ignore ={} ) Calculates the bounds of all applicable components under Root, except those included in Ignore. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_uxt_manipulator_component_base.html": {
    "href": "api/_u_uxt_manipulator_component_base.html",
    "title": "MRTK Unreal API Reference UUxtManipulatorComponentBase | UXT Documentation",
    "keywords": "UUxtManipulatorComponentBase Base class for manipulation components that react to pointer interactions. This class does not modify the actor as-is. Implementations should use the provided functions to compute a target transform from grabbing pointers and call the ApplyTargetTransform method to actually modify the actor. class UUxtManipulatorComponentBase; Header #include <Interactions/UxtManipulatorComponentBase.h> Inheritance Inherits from UUxtGrabTargetComponent , UUxtManipulatorComponent , IUxtGrabTarget , IUxtGrabHandler , IUxtFarTarget , IUxtFarHandler , UActorComponent Public Functions Name UUxtManipulatorComponentBase () ~UUxtManipulatorComponentBase () void MoveToTargets (const FTransform & SourceTransform, FTransform & TargetTransform, bool UsePointerRotation) const void RotateAroundPivot (const FTransform & SourceTransform, const FVector & Pivot, FTransform & TargetTransform) const void RotateAboutAxis (const FTransform & SourceTransform, const FVector & Pivot, const FVector & Axis, FTransform & TargetTransform) const void SmoothTransform (const FTransform & SourceTransform, float LocationLerpTime, float RotationLerpTime, float DeltaSeconds, FTransform & TargetTransform) const void SetInitialTransform () void ApplyTargetTransform (const FTransform & TargetTransform) USceneComponent * GetTargetComponent () Protected Functions Name virtual void BeginPlay () override virtual void EndPlay (const EEndPlayReason::Type EndPlayReason) override Public Attributes Name FUxtUpdateTransformDelegate OnUpdateTransform FTransform InitialTransform FTransform InitialCameraSpaceTransform bool bAutoSetInitialTransform USceneComponent * TransformTarget Protected Attributes Name UxtManipulationMoveLogic * MoveLogic UxtTwoHandManipulationRotateLogic * TwoHandRotateLogic UxtTwoHandManipulationScaleLogic * TwoHandScaleLogic Additional inherited members Public Functions inherited from UUxtGrabTargetComponent Name UUxtGrabTargetComponent () void FindGrabPointer ( UUxtNearPointerComponent * NearPointer, UUxtFarPointerComponent * FarPointer, bool & Success, FUxtGrabPointerData & PointerData, int & Index) const void GetPrimaryGrabPointer (bool & Valid, FUxtGrabPointerData & PointerData) const void GetSecondaryGrabPointer (bool & Valid, FUxtGrabPointerData & PointerData) const bool ForceEndGrab () FTransform GetGrabPointCentroid (const FTransform & ToWorldTransform) const FVector GetTargetCentroid () const bool GetTickOnlyWhileGrabbed () const void SetTickOnlyWhileGrabbed (bool bEnable) const TArray< FUxtGrabPointerData > & GetGrabPointers () const virtual void OnExternalManipulationStarted () override Protected Functions inherited from UUxtGrabTargetComponent Name virtual bool IsGrabFocusable_Implementation (const UPrimitiveComponent * Primitive) const override virtual bool CanHandleGrab_Implementation (UPrimitiveComponent * Primitive) const override virtual void OnEnterGrabFocus_Implementation ( UUxtNearPointerComponent * Pointer) override virtual void OnUpdateGrabFocus_Implementation ( UUxtNearPointerComponent * Pointer) override virtual void OnExitGrabFocus_Implementation ( UUxtNearPointerComponent * Pointer) override virtual void OnBeginGrab_Implementation ( UUxtNearPointerComponent * Pointer) override virtual void OnUpdateGrab_Implementation ( UUxtNearPointerComponent * Pointer) override virtual void OnEndGrab_Implementation ( UUxtNearPointerComponent * Pointer) override virtual bool IsFarFocusable_Implementation (const UPrimitiveComponent * Primitive) const override virtual bool CanHandleFar_Implementation (UPrimitiveComponent * Primitive) const override virtual void OnFarPressed_Implementation ( UUxtFarPointerComponent * Pointer) override virtual void OnFarReleased_Implementation ( UUxtFarPointerComponent * Pointer) override virtual void OnFarDragged_Implementation ( UUxtFarPointerComponent * Pointer) override virtual void OnEnterFarFocus_Implementation ( UUxtFarPointerComponent * Pointer) override virtual void OnExitFarFocus_Implementation ( UUxtFarPointerComponent * Pointer) override virtual void OnUpdatedFarFocus_Implementation ( UUxtFarPointerComponent * Pointer) override FTransform GetPointerCentroid () const Public Attributes inherited from UUxtGrabTargetComponent Name FUxtEnterFarFocusDelegate OnEnterFarFocus FUxtUpdateFarFocusDelegate OnUpdateFarFocus FUxtExitFarFocusDelegate OnExitFarFocus FUxtEnterGrabFocusDelegate OnEnterGrabFocus FUxtUpdateGrabFocusDelegate OnUpdateGrabFocus FUxtExitGrabFocusDelegate OnExitGrabFocus FUxtBeginGrabDelegate OnBeginGrab FUxtUpdateGrabDelegate OnUpdateGrab FUxtEndGrabDelegate OnEndGrab int32 InteractionMode int32 GrabModes Public Functions inherited from UUxtManipulatorComponent Name bool GetAutoDetectConstraints () const void SetAutoDetectConstraints (bool bNewAutoDetectConstraints) const TArray< FComponentReference > & GetSelectedConstraints () const void AddConstraint (const FComponentReference & NewConstraint) void RemoveConstraint (const FComponentReference & NewConstraint) bool GetRelativeToInitialScale () const void SetRelativeToInitialScale (const bool Value) float GetMinScale () const void SetMinScale (const float Value) float GetMaxScale () const void SetMaxScale (const float Value) Protected Functions inherited from UUxtManipulatorComponent Name virtual void TickComponent (float DeltaTime, ELevelTick TickType, FActorComponentTickFunction * ThisTickFunction) override void InitializeConstraints (USceneComponent * NewTargetComponent) void ApplyConstraints (FTransform & Transform, EUxtTransformMode TransformMode, bool bIsOneHanded, bool bIsNear) const Public Functions inherited from IUxtGrabTarget Name bool IsGrabFocusable (const UPrimitiveComponent * Primitive) const Public Functions inherited from IUxtGrabHandler Name bool CanHandleGrab (UPrimitiveComponent * Primitive) const void OnEnterGrabFocus ( UUxtNearPointerComponent * Pointer) void OnUpdateGrabFocus ( UUxtNearPointerComponent * Pointer) void OnExitGrabFocus ( UUxtNearPointerComponent * Pointer) void OnBeginGrab ( UUxtNearPointerComponent * Pointer) void OnUpdateGrab ( UUxtNearPointerComponent * Pointer) void OnEndGrab ( UUxtNearPointerComponent * Pointer) Public Functions inherited from IUxtFarTarget Name bool IsFarFocusable (const UPrimitiveComponent * Primitive) const Public Functions inherited from IUxtFarHandler Name bool CanHandleFar (UPrimitiveComponent * Primitive) const void OnEnterFarFocus ( UUxtFarPointerComponent * Pointer) void OnUpdatedFarFocus ( UUxtFarPointerComponent * Pointer) void OnExitFarFocus ( UUxtFarPointerComponent * Pointer) void OnFarPressed ( UUxtFarPointerComponent * Pointer) void OnFarDragged ( UUxtFarPointerComponent * Pointer) void OnFarReleased ( UUxtFarPointerComponent * Pointer) Public Functions Documentation function UUxtManipulatorComponentBase UUxtManipulatorComponentBase() function ~UUxtManipulatorComponentBase ~UUxtManipulatorComponentBase() function MoveToTargets void MoveToTargets( const FTransform & SourceTransform, FTransform & TargetTransform, bool UsePointerRotation ) const Translate the source transform such that grab points match targets. If more than one pointer is used then the centroid of the grab points and targets is used. function RotateAroundPivot void RotateAroundPivot( const FTransform & SourceTransform, const FVector & Pivot, FTransform & TargetTransform ) const Rotates the source transform around the pivot point such that the pointers line up with current targets. If more than one pointer is used then the resulting rotation will minimize the mean square of target distances. function RotateAboutAxis void RotateAboutAxis( const FTransform & SourceTransform, const FVector & Pivot, const FVector & Axis, FTransform & TargetTransform ) const Rotates the source transform around the pivot point on the given axis such that the pointers line up with current targets. If more than one pointer is used then the resulting rotation will minimize the mean square of target distances. function SmoothTransform void SmoothTransform( const FTransform & SourceTransform, float LocationLerpTime, float RotationLerpTime, float DeltaSeconds, FTransform & TargetTransform ) const Apply a low-pass filter to the source transform location and rotation to smooth out jittering. Target transform is a exponentially weighted average of the current component transform and the source transform based on the time step. function SetInitialTransform void SetInitialTransform() Cache the initial world space and camera space transform. Manipulation should be based on these initial transform for stable results. If bAutoSetInitialTransform is true then the initial transform is updated when grabbed. function ApplyTargetTransform void ApplyTargetTransform( const FTransform & TargetTransform ) Apply the transform to the actor root scene component. Relative transform between the manipulator component and the root scene component is preserved. function GetTargetComponent USceneComponent * GetTargetComponent() Get the component the manipulator is targeting. Protected Functions Documentation function BeginPlay virtual void BeginPlay() override Reimplements : UUxtGrabTargetComponent::BeginPlay function EndPlay virtual void EndPlay( const EEndPlayReason::Type EndPlayReason ) override Public Attributes Documentation variable OnUpdateTransform FUxtUpdateTransformDelegate OnUpdateTransform; variable InitialTransform FTransform InitialTransform; variable InitialCameraSpaceTransform FTransform InitialCameraSpaceTransform; variable bAutoSetInitialTransform bool bAutoSetInitialTransform = true; If true the initial transform will be set automatically when the component is grabbed. variable TransformTarget USceneComponent * TransformTarget = nullptr; The component to transform, will default to the root scene component if not specified Protected Attributes Documentation variable MoveLogic UxtManipulationMoveLogic * MoveLogic; variable TwoHandRotateLogic UxtTwoHandManipulationRotateLogic * TwoHandRotateLogic; variable TwoHandScaleLogic UxtTwoHandManipulationScaleLogic * TwoHandScaleLogic; Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_uxt_manipulator_component.html": {
    "href": "api/_u_uxt_manipulator_component.html",
    "title": "MRTK Unreal API Reference UUxtManipulatorComponent | UXT Documentation",
    "keywords": "UUxtManipulatorComponent Manages constraints that can be applied by child components. class UUxtManipulatorComponent; Header #include <Interactions/UxtManipulatorComponent.h> Inheritance Inherits from UActorComponent Inherited by UUxtBoundsControlComponent , UUxtGrabTargetComponent Public Functions Name bool GetAutoDetectConstraints () const void SetAutoDetectConstraints (bool bNewAutoDetectConstraints) const TArray< FComponentReference > & GetSelectedConstraints () const void AddConstraint (const FComponentReference & NewConstraint) void RemoveConstraint (const FComponentReference & NewConstraint) bool GetRelativeToInitialScale () const void SetRelativeToInitialScale (const bool Value) float GetMinScale () const void SetMinScale (const float Value) float GetMaxScale () const void SetMaxScale (const float Value) Protected Functions Name virtual void BeginPlay () override virtual void TickComponent (float DeltaTime, ELevelTick TickType, FActorComponentTickFunction * ThisTickFunction) override void InitializeConstraints (USceneComponent * NewTargetComponent) void ApplyConstraints (FTransform & Transform, EUxtTransformMode TransformMode, bool bIsOneHanded, bool bIsNear) const Public Functions Documentation function GetAutoDetectConstraints bool GetAutoDetectConstraints() const Get if the component is automatically detecting constraints. function SetAutoDetectConstraints void SetAutoDetectConstraints( bool bNewAutoDetectConstraints ) Set if the component should automatically detect constraints. function GetSelectedConstraints const TArray< FComponentReference > & GetSelectedConstraints() const Get the list of currently selected constraints. function AddConstraint void AddConstraint( const FComponentReference & NewConstraint ) Add a constraint to be applied when bAutoDetectConstraints is not set. function RemoveConstraint void RemoveConstraint( const FComponentReference & NewConstraint ) Remove a constraint from being applied when bAutoDetectConstraints is not set. function GetRelativeToInitialScale inline bool GetRelativeToInitialScale() const function SetRelativeToInitialScale void SetRelativeToInitialScale( const bool Value ) function GetMinScale inline float GetMinScale() const function SetMinScale void SetMinScale( const float Value ) function GetMaxScale inline float GetMaxScale() const function SetMaxScale void SetMaxScale( const float Value ) Protected Functions Documentation function BeginPlay virtual void BeginPlay() override Reimplemented by : UUxtBoundsControlComponent::BeginPlay , UUxtGrabTargetComponent::BeginPlay , UUxtManipulatorComponentBase::BeginPlay function TickComponent virtual void TickComponent( float DeltaTime, ELevelTick TickType, FActorComponentTickFunction * ThisTickFunction ) override Reimplemented by : UUxtBoundsControlComponent::TickComponent function InitializeConstraints void InitializeConstraints( USceneComponent * NewTargetComponent ) Initialize the constraints with a target component to use for a reference transform. function ApplyConstraints void ApplyConstraints( FTransform & Transform, EUxtTransformMode TransformMode, bool bIsOneHanded, bool bIsNear ) const Apply the constraints to the transform. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_uxt_maintain_apparent_size_constraint.html": {
    "href": "api/_u_uxt_maintain_apparent_size_constraint.html",
    "title": "MRTK Unreal API Reference UUxtMaintainApparentSizeConstraint | UXT Documentation",
    "keywords": "UUxtMaintainApparentSizeConstraint Constraint to maintain the apparent size of the object to the user. Usage: Attach to actor that the constraint should be applied to. class UUxtMaintainApparentSizeConstraint; Header #include <Interactions/Constraints/UxtMaintainApparentSizeConstraint.h> Inheritance Inherits from UUxtTransformConstraint , UActorComponent Public Functions Name virtual void Initialize (const FTransform & WorldPose) override virtual EUxtTransformMode GetConstraintType () const override virtual void ApplyConstraint (FTransform & Transform) const override Additional inherited members Public Attributes inherited from UUxtTransformConstraint Name int32 HandType int32 InteractionMode Protected Attributes inherited from UUxtTransformConstraint Name FTransform WorldPoseOnManipulationStart Public Functions Documentation function Initialize virtual void Initialize( const FTransform & WorldPose ) override Reimplements : UUxtTransformConstraint::Initialize Intended to be called on manipulation started function GetConstraintType virtual EUxtTransformMode GetConstraintType() const override Reimplements : UUxtTransformConstraint::GetConstraintType Enabled manipulation modes. function ApplyConstraint virtual void ApplyConstraint( FTransform & Transform ) const override Reimplements : UUxtTransformConstraint::ApplyConstraint Applies constraints to transforms during manipulation Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_uxt_grab_pointer_data_function_library.html": {
    "href": "api/_u_uxt_grab_pointer_data_function_library.html",
    "title": "MRTK Unreal API Reference UUxtGrabPointerDataFunctionLibrary | UXT Documentation",
    "keywords": "UUxtGrabPointerDataFunctionLibrary Utility functions for FGrabPointerData. class UUxtGrabPointerDataFunctionLibrary; Header #include <UxtGrabTargetComponent.h> Inheritance Inherits from UBlueprintFunctionLibrary Public Functions Name FVector GetGrabLocation (const FTransform & Transform, const FUxtGrabPointerData & GrabData) FRotator GetGrabRotation (const FTransform & Transform, const FUxtGrabPointerData & GrabData) FTransform GetGrabTransform (const FTransform & Transform, const FUxtGrabPointerData & GrabData) FVector GetTargetLocation (const FUxtGrabPointerData & GrabData) FRotator GetTargetRotation (const FUxtGrabPointerData & GrabData) FTransform GetGrabPointTransform (const FUxtGrabPointerData & GrabData) FVector GetLocationOffset (const FTransform & Transform, const FUxtGrabPointerData & GrabData) FRotator GetRotationOffset (const FTransform & Transform, const FUxtGrabPointerData & GrabData) FTransform GetPointerTransform (const FUxtGrabPointerData & GrabData) FVector GetPointerLocation (const FUxtGrabPointerData & GrabData) FTransform GetGripTransform (const FUxtGrabPointerData & GrabData) Public Functions Documentation function GetGrabLocation static FVector GetGrabLocation( const FTransform & Transform, const FUxtGrabPointerData & GrabData ) Compute the grab point in world space. function GetGrabRotation static FRotator GetGrabRotation( const FTransform & Transform, const FUxtGrabPointerData & GrabData ) Compute the grab rotation in world space. function GetGrabTransform static FTransform GetGrabTransform( const FTransform & Transform, const FUxtGrabPointerData & GrabData ) Compute the grab transform in world space. function GetTargetLocation static FVector GetTargetLocation( const FUxtGrabPointerData & GrabData ) Compute the pointer target in world space. function GetTargetRotation static FRotator GetTargetRotation( const FUxtGrabPointerData & GrabData ) Compute the target rotation in world space. function GetGrabPointTransform static FTransform GetGrabPointTransform( const FUxtGrabPointerData & GrabData ) Compute the grab point transform in world space. function GetLocationOffset static FVector GetLocationOffset( const FTransform & Transform, const FUxtGrabPointerData & GrabData ) Compute the world space offset between pointer grab point and target. function GetRotationOffset static FRotator GetRotationOffset( const FTransform & Transform, const FUxtGrabPointerData & GrabData ) Compute the world space rotation between pointer grab point and target. function GetPointerTransform static FTransform GetPointerTransform( const FUxtGrabPointerData & GrabData ) Returns the world space pointer transform (at pointer origin). function GetPointerLocation static FVector GetPointerLocation( const FUxtGrabPointerData & GrabData ) Returns the world space pointer location function GetGripTransform static FTransform GetGripTransform( const FUxtGrabPointerData & GrabData ) Returns the pointer's grip transform in world space. This represents a reference point in the pointer, which corresponds to the actual grip joint's transform for the near pointer and the hit point's transform for the far pointer. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_f_uxt_default_hand_tracker.html": {
    "href": "api/_f_uxt_default_hand_tracker.html",
    "title": "MRTK Unreal API Reference FUxtDefaultHandTracker | UXT Documentation",
    "keywords": "FUxtDefaultHandTracker Default hand tracker implementation. This implementation works for all XR systems. It uses the XRTrackingSystem engine API. Hand and controller data is based on the FXRMotionControllerData. Motion controller data is cached at the beginning of each frame. Input events for known XR systems are used to keep track of Select and Grip actions. class FUxtDefaultHandTracker; Header #include <UxtDefaultHandTracker.h> Inheritance Inherits from IUxtHandTracker , IModularFeature Public Functions Name void RegisterInputMappings () void UnregisterInputMappings () FXRMotionControllerData & GetControllerData (EControllerHand Hand) const FXRMotionControllerData & GetControllerData (EControllerHand Hand) const virtual ETrackingStatus GetTrackingStatus (EControllerHand Hand) const override virtual bool IsHandController (EControllerHand Hand) const override virtual bool GetJointState (EControllerHand Hand, EHandKeypoint Joint, FQuat & OutOrientation, FVector & OutPosition, float & OutRadius) const override virtual bool GetPointerPose (EControllerHand Hand, FQuat & OutOrientation, FVector & OutPosition) const override virtual bool GetGripPose (EControllerHand Hand, FQuat & OutOrientation, FVector & OutPosition) const override virtual bool GetIsGrabbing (EControllerHand Hand, bool & OutIsGrabbing) const override virtual bool GetIsSelectPressed (EControllerHand Hand, bool & OutIsSelectPressed) const override Friends Name class UUxtDefaultHandTrackerSubsystem Additional inherited members Public Functions inherited from IUxtHandTracker Name FName GetModularFeatureName () IUxtHandTracker & Get () virtual ~IUxtHandTracker () Public Functions Documentation function RegisterInputMappings static void RegisterInputMappings() function UnregisterInputMappings static void UnregisterInputMappings() function GetControllerData FXRMotionControllerData & GetControllerData( EControllerHand Hand ) function GetControllerData const FXRMotionControllerData & GetControllerData( EControllerHand Hand ) const function GetTrackingStatus virtual ETrackingStatus GetTrackingStatus( EControllerHand Hand ) const override Reimplements : IUxtHandTracker::GetTrackingStatus Get tracking status of the hand or motion controller. function IsHandController virtual bool IsHandController( EControllerHand Hand ) const override Reimplements : IUxtHandTracker::IsHandController True if the controller is a hand. function GetJointState virtual bool GetJointState( EControllerHand Hand, EHandKeypoint Joint, FQuat & OutOrientation, FVector & OutPosition, float & OutRadius ) const override Reimplements : IUxtHandTracker::GetJointState Obtain the state of the given joint. Returns false if the hand is not tracked this frame, in which case the values of the output parameters are unchanged. function GetPointerPose virtual bool GetPointerPose( EControllerHand Hand, FQuat & OutOrientation, FVector & OutPosition ) const override Reimplements : IUxtHandTracker::GetPointerPose Obtain the pointer pose. Returns false if the hand is not tracked this frame, in which case the value of the output parameter is unchanged. function GetGripPose virtual bool GetGripPose( EControllerHand Hand, FQuat & OutOrientation, FVector & OutPosition ) const override Reimplements : IUxtHandTracker::GetGripPose Grip pose following the controller. Returns false if the hand is not tracked this frame, in which case the value of the output parameter is unchanged. function GetIsGrabbing virtual bool GetIsGrabbing( EControllerHand Hand, bool & OutIsGrabbing ) const override Reimplements : IUxtHandTracker::GetIsGrabbing Obtain current grabbing state. Returns false if the hand is not tracked this frame, in which case the value of the output parameter is unchanged. function GetIsSelectPressed virtual bool GetIsSelectPressed( EControllerHand Hand, bool & OutIsSelectPressed ) const override Reimplements : IUxtHandTracker::GetIsSelectPressed Obtain current selection state. Returns false if the hand is not tracked this frame, in which case the value of the output parameter is unchanged. Friends friend UUxtDefaultHandTrackerSubsystem friend class UUxtDefaultHandTrackerSubsystem( UUxtDefaultHandTrackerSubsystem ); Updated on 23 August 2021 at 12:07:13 Coordinated Universal Time"
  },
  "api/_f_uxt_button_brush.html": {
    "href": "api/_f_uxt_button_brush.html",
    "title": "MRTK Unreal API Reference FUxtButtonBrush | UXT Documentation",
    "keywords": "FUxtButtonBrush Structure containing data representing categorized button assets and properties. struct FUxtButtonBrush; Header #include <UxtButtonBrush.h> Public Attributes Name FUxtButtonVisualsBrush Visuals FUxtButtonAudioBrush Audio Public Attributes Documentation variable Visuals FUxtButtonVisualsBrush FUxtButtonBrush::Visuals FUxtButtonVisualsBrush Visuals; Structure for button visuals. variable Audio FUxtButtonAudioBrush FUxtButtonBrush::Audio FUxtButtonAudioBrush Audio; Structure for button audio. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_f_uxt_affordance_instance.html": {
    "href": "api/_f_uxt_affordance_instance.html",
    "title": "MRTK Unreal API Reference FUxtAffordanceInstance | UXT Documentation",
    "keywords": "FUxtAffordanceInstance Instance of an affordance on the bounds control actor. struct FUxtAffordanceInstance; Header #include <UxtBoundsControlComponent.h> Public Attributes Name FUxtAffordanceConfig Config UMaterialInstanceDynamic * DynamicMaterial float FocusedTransition float ActiveTransition int FocusCount FVector InitialRelativeScale FVector ReferenceRelativeScale Public Attributes Documentation variable Config FUxtAffordanceConfig FUxtAffordanceInstance::Config FUxtAffordanceConfig Config; Copy of the config used for generating the affordance. variable DynamicMaterial UMaterialInstanceDynamic* FUxtAffordanceInstance::DynamicMaterial UMaterialInstanceDynamic * DynamicMaterial = nullptr; Dynamic material for highlighting the affordance. variable FocusedTransition float FUxtAffordanceInstance::FocusedTransition float FocusedTransition = 0.0f; Percentage of transition to the focused state. variable ActiveTransition float FUxtAffordanceInstance::ActiveTransition float ActiveTransition = 0.0f; Percentage of transition to the grabbed state. variable FocusCount int FUxtAffordanceInstance::FocusCount int FocusCount = 0; Refcount of pointers currently focusing the affordance. variable InitialRelativeScale FVector FUxtAffordanceInstance::InitialRelativeScale FVector InitialRelativeScale = FVector::OneVector; Initial scale, used to calculate ReferenceRelativeScale variable ReferenceRelativeScale FVector FUxtAffordanceInstance::ReferenceRelativeScale FVector ReferenceRelativeScale = FVector::OneVector; Reference scale to be used during scaling animations Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_a_x_r_simulation_actor.html": {
    "href": "api/_a_x_r_simulation_actor.html",
    "title": "MRTK Unreal API Reference AXRSimulationActor | UXT Documentation",
    "keywords": "AXRSimulationActor Actor that produces head pose and hand animations for the simulated HMD. class AXRSimulationActor; Header #include <XRSimulationActor.h> Inheritance Inherits from AActor Public Functions Name virtual void OnConstruction (const FTransform & Transform) virtual void BeginPlay () override virtual void Tick (float DeltaSeconds) override void SetSimulationState (const TSharedPtr< FXRSimulationState > & NewSimulationState) void SetTrackingToWorldTransform (const FTransform & InTrackingToWorldTransform) void GetTargetHandPose (UObject * WorldContextObject, EControllerHand Hand, FName & TargetPose, FTransform & TargetTransform, bool & bAnimateTransform) const void GetHeadPose (FQuat & Orientation, FVector & Position) const void GetHandData (EControllerHand Hand, FXRMotionControllerData & MotionControllerData) const void GetControllerActionState (EControllerHand Hand, bool & OutSelectPressed, bool & OutGripPressed) const UXRSimulationHeadMovementComponent * GetHeadMovement () const USkeletalMeshComponent * GetLeftHand () const USkeletalMeshComponent * GetRightHand () const void RegisterInputMappings () void UnregisterInputMappings () Public Attributes Name uint32 bAddDefaultInputBindings Public Functions Documentation function OnConstruction virtual void OnConstruction( const FTransform & Transform ) function BeginPlay virtual void BeginPlay() override function Tick virtual void Tick( float DeltaSeconds ) override function SetSimulationState void SetSimulationState( const TSharedPtr< FXRSimulationState > & NewSimulationState ) function SetTrackingToWorldTransform void SetTrackingToWorldTransform( const FTransform & InTrackingToWorldTransform ) function GetTargetHandPose void GetTargetHandPose( UObject * WorldContextObject, EControllerHand Hand, FName & TargetPose, FTransform & TargetTransform, bool & bAnimateTransform ) const function GetHeadPose void GetHeadPose( FQuat & Orientation, FVector & Position ) const function GetHandData void GetHandData( EControllerHand Hand, FXRMotionControllerData & MotionControllerData ) const function GetControllerActionState void GetControllerActionState( EControllerHand Hand, bool & OutSelectPressed, bool & OutGripPressed ) const function GetHeadMovement inline UXRSimulationHeadMovementComponent * GetHeadMovement() const function GetLeftHand inline USkeletalMeshComponent * GetLeftHand() const function GetRightHand inline USkeletalMeshComponent * GetRightHand() const function RegisterInputMappings static void RegisterInputMappings() function UnregisterInputMappings static void UnregisterInputMappings() Public Attributes Documentation variable bAddDefaultInputBindings uint32 bAddDefaultInputBindings; If true, adds default input bindings for input simulation. Updated on 23 August 2021 at 12:07:13 Coordinated Universal Time"
  },
  "api/_x_r_simulation_editor.html": {
    "href": "api/_x_r_simulation_editor.html",
    "title": "MRTK Unreal API Reference XRSimulationEditor | UXT Documentation",
    "keywords": "XRSimulationEditor class XRSimulationEditor; Inheritance Inherits from ModuleRules Public Functions Name XRSimulationEditor (ReadOnlyTargetRules Target) Public Functions Documentation function XRSimulationEditor inline XRSimulationEditor( ReadOnlyTargetRules Target ) Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_x_r_simulation.html": {
    "href": "api/_x_r_simulation.html",
    "title": "MRTK Unreal API Reference XRSimulation | UXT Documentation",
    "keywords": "XRSimulation class XRSimulation; Inheritance Inherits from ModuleRules Public Functions Name XRSimulation (ReadOnlyTargetRules Target) Public Functions Documentation function XRSimulation inline XRSimulation( ReadOnlyTargetRules Target ) Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_uxt_text_render_component.html": {
    "href": "api/_u_uxt_text_render_component.html",
    "title": "MRTK Unreal API Reference UUxtTextRenderComponent | UXT Documentation",
    "keywords": "UUxtTextRenderComponent A text render component which automatically configures assets and properties best suited for text rendering in UX Tools. class UUxtTextRenderComponent; Header #include <UxtTextRenderComponent.h> Inheritance Inherits from UTextRenderComponent Public Functions Name UUxtTextRenderComponent () Public Functions Documentation function UUxtTextRenderComponent UUxtTextRenderComponent() Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_uxt_pressable_button_component.html": {
    "href": "api/_u_uxt_pressable_button_component.html",
    "title": "MRTK Unreal API Reference UUxtPressableButtonComponent | UXT Documentation",
    "keywords": "UUxtPressableButtonComponent Component that turns the actor it is attached to into a pressable rectangular button. class UUxtPressableButtonComponent; Header #include <Controls/UxtPressableButtonComponent.h> Inheritance Inherits from UUxtUIElementComponent , IUxtPokeTarget , IUxtPokeHandler , IUxtFarTarget , IUxtFarHandler , IUxtCollectionObject , USceneComponent Public Functions Name UUxtPressableButtonComponent () float GetFrontFaceCollisionFraction () const void SetFrontFaceCollisionFraction (float Distance) USceneComponent * GetVisuals () const void SetVisuals (USceneComponent * Visuals) void SetVisuals (const FComponentReference & ComponentReference) void SetCollisionProfile (FName Profile) void SetUseAbsolutePushDistance (bool bAbsolute) void SetEnabled (bool Enabled) EUxtButtonState GetState () const float GetScaleAdjustedMaxPushDistance () const EUxtPushBehavior GetPushBehavior () const void SetPushBehavior (EUxtPushBehavior Behavior) float GetMaxPushDistance () const void SetMaxPushDistance (float Distance) bool VisualBoundsFilter (const USceneComponent * Component) Protected Functions Name virtual void BeginPlay () override virtual void TickComponent (float DeltaTime, ELevelTick TickType, FActorComponentTickFunction * ThisTickFunction) override virtual bool IsPokeFocusable_Implementation (const UPrimitiveComponent * Primitive) const override virtual EUxtPokeBehaviour GetPokeBehaviour_Implementation () const override virtual bool GetClosestPoint_Implementation (const UPrimitiveComponent * Primitive, const FVector & Point, FVector & OutClosestPoint, FVector & OutNormal) const override virtual bool CanHandlePoke_Implementation (UPrimitiveComponent * Primitive) const override virtual void OnEnterPokeFocus_Implementation ( UUxtNearPointerComponent * Pointer) override virtual void OnUpdatePokeFocus_Implementation ( UUxtNearPointerComponent * Pointer) override virtual void OnExitPokeFocus_Implementation ( UUxtNearPointerComponent * Pointer) override virtual void OnBeginPoke_Implementation ( UUxtNearPointerComponent * Pointer) override virtual void OnUpdatePoke_Implementation ( UUxtNearPointerComponent * Pointer) override virtual void OnEndPoke_Implementation ( UUxtNearPointerComponent * Pointer) override virtual bool IsFarFocusable_Implementation (const UPrimitiveComponent * Primitive) const override virtual bool CanHandleFar_Implementation (UPrimitiveComponent * Primitive) const override virtual void OnEnterFarFocus_Implementation ( UUxtFarPointerComponent * Pointer) override virtual void OnUpdatedFarFocus_Implementation ( UUxtFarPointerComponent * Pointer) override virtual void OnExitFarFocus_Implementation ( UUxtFarPointerComponent * Pointer) override virtual void OnFarPressed_Implementation ( UUxtFarPointerComponent * Pointer) override virtual void OnFarReleased_Implementation ( UUxtFarPointerComponent * Pointer) override Public Attributes Name float PressedFraction float ReleasedFraction float RecoverySpeed FUxtButtonBeginFocusDelegate OnBeginFocus FUxtButtonUpdateFocusDelegate OnUpdateFocus FUxtButtonEndFocusDelegate OnEndFocus FUxtButtonBeginPokeDelegate OnBeginPoke FUxtButtonUpdatePokeDelegate OnUpdatePoke FUxtButtonEndPokeDelegate OnEndPoke FUxtButtonPressedDelegate OnButtonPressed FUxtButtonReleasedDelegate OnButtonReleased FUxtButtonEnabledDelegate OnButtonEnabled FUxtButtonDisabledDelegate OnButtonDisabled Additional inherited members Public Functions inherited from UUxtUIElementComponent Name UUxtUIElementComponent () =default EUxtUIElementVisibility GetUIVisibilitySelf () const EUxtUIElementVisibility GetUIVisibilityInHierarchy () const void SetUIVisibility (EUxtUIElementVisibility NewVisibility) void RefreshUIElement () Protected Functions inherited from UUxtUIElementComponent Name virtual void OnAttachmentChanged () override Public Attributes inherited from UUxtUIElementComponent Name FUxtUIElementShowDelegate OnShowElement FUxtUIElementHideDelegate OnHideElement Public Functions inherited from IUxtPokeTarget Name bool IsPokeFocusable (const UPrimitiveComponent * Primitive) const EUxtPokeBehaviour GetPokeBehaviour () const bool GetClosestPoint (const UPrimitiveComponent * Primitive, const FVector & Point, FVector & OutClosestPoint, FVector & OutNormal) const Public Functions inherited from IUxtPokeHandler Name bool CanHandlePoke (UPrimitiveComponent * Primitive) const void OnEnterPokeFocus ( UUxtNearPointerComponent * Pointer) void OnUpdatePokeFocus ( UUxtNearPointerComponent * Pointer) void OnExitPokeFocus ( UUxtNearPointerComponent * Pointer) Public Functions inherited from IUxtFarTarget Name bool IsFarFocusable (const UPrimitiveComponent * Primitive) const Public Functions inherited from IUxtFarHandler Name bool CanHandleFar (UPrimitiveComponent * Primitive) const void OnEnterFarFocus ( UUxtFarPointerComponent * Pointer) void OnUpdatedFarFocus ( UUxtFarPointerComponent * Pointer) void OnExitFarFocus ( UUxtFarPointerComponent * Pointer) void OnFarPressed ( UUxtFarPointerComponent * Pointer) void OnFarDragged ( UUxtFarPointerComponent * Pointer) void OnFarReleased ( UUxtFarPointerComponent * Pointer) Public Functions inherited from IUxtCollectionObject Name TScriptInterface< IUxtPokeTarget > GetPokeTarget () TScriptInterface< IUxtFarTarget > GetFarTarget () Public Functions Documentation function UUxtPressableButtonComponent UUxtPressableButtonComponent() function GetFrontFaceCollisionFraction float GetFrontFaceCollisionFraction() const Get the distance from the visuals front face to the collider front face. function SetFrontFaceCollisionFraction void SetFrontFaceCollisionFraction( float Distance ) Set the distance from the visuals front face to the collider front face. function GetVisuals USceneComponent * GetVisuals() const Get scene component used for the moving visuals function SetVisuals void SetVisuals( USceneComponent * Visuals ) Set scene component to be used for the moving visuals function SetVisuals void SetVisuals( const FComponentReference & ComponentReference ) Set scene component reference to be used for the moving visuals. This method should be called if the visual reference should be serialized. function SetCollisionProfile void SetCollisionProfile( FName Profile ) Set collision profile used by the button collider function SetUseAbsolutePushDistance void SetUseAbsolutePushDistance( bool bAbsolute ) Switch between world and local space for button distances function SetEnabled void SetEnabled( bool Enabled ) Set if the button is enabled function GetState EUxtButtonState GetState() const Get the current state of the button function GetScaleAdjustedMaxPushDistance float GetScaleAdjustedMaxPushDistance() const Gets the maximum distance the button can be pushed scaled by the transform's 'x' scale. function GetPushBehavior EUxtPushBehavior GetPushBehavior() const Gets the button behavior when pushed function SetPushBehavior void SetPushBehavior( EUxtPushBehavior Behavior ) Sets the button behavior when pushed function GetMaxPushDistance float GetMaxPushDistance() const Gets the maximum distance the button can be pushed function SetMaxPushDistance void SetMaxPushDistance( float Distance ) Sets the maximum distance the button can be pushed, does nothing when the push behavior is set to compress because the maximum distance is auto calculated function VisualBoundsFilter static bool VisualBoundsFilter( const USceneComponent * Component ) Filter function used by the button when calculating the hierarchy bounds of the visuals Protected Functions Documentation function BeginPlay virtual void BeginPlay() override Reimplements : UUxtUIElementComponent::BeginPlay function TickComponent virtual void TickComponent( float DeltaTime, ELevelTick TickType, FActorComponentTickFunction * ThisTickFunction ) override function IsPokeFocusable_Implementation virtual bool IsPokeFocusable_Implementation( const UPrimitiveComponent * Primitive ) const override function GetPokeBehaviour_Implementation virtual EUxtPokeBehaviour GetPokeBehaviour_Implementation() const override function GetClosestPoint_Implementation virtual bool GetClosestPoint_Implementation( const UPrimitiveComponent * Primitive, const FVector & Point, FVector & OutClosestPoint, FVector & OutNormal ) const override function CanHandlePoke_Implementation virtual bool CanHandlePoke_Implementation( UPrimitiveComponent * Primitive ) const override function OnEnterPokeFocus_Implementation virtual void OnEnterPokeFocus_Implementation( UUxtNearPointerComponent * Pointer ) override function OnUpdatePokeFocus_Implementation virtual void OnUpdatePokeFocus_Implementation( UUxtNearPointerComponent * Pointer ) override function OnExitPokeFocus_Implementation virtual void OnExitPokeFocus_Implementation( UUxtNearPointerComponent * Pointer ) override function OnBeginPoke_Implementation virtual void OnBeginPoke_Implementation( UUxtNearPointerComponent * Pointer ) override function OnUpdatePoke_Implementation virtual void OnUpdatePoke_Implementation( UUxtNearPointerComponent * Pointer ) override function OnEndPoke_Implementation virtual void OnEndPoke_Implementation( UUxtNearPointerComponent * Pointer ) override function IsFarFocusable_Implementation virtual bool IsFarFocusable_Implementation( const UPrimitiveComponent * Primitive ) const override function CanHandleFar_Implementation virtual bool CanHandleFar_Implementation( UPrimitiveComponent * Primitive ) const override function OnEnterFarFocus_Implementation virtual void OnEnterFarFocus_Implementation( UUxtFarPointerComponent * Pointer ) override function OnUpdatedFarFocus_Implementation virtual void OnUpdatedFarFocus_Implementation( UUxtFarPointerComponent * Pointer ) override function OnExitFarFocus_Implementation virtual void OnExitFarFocus_Implementation( UUxtFarPointerComponent * Pointer ) override function OnFarPressed_Implementation virtual void OnFarPressed_Implementation( UUxtFarPointerComponent * Pointer ) override function OnFarReleased_Implementation virtual void OnFarReleased_Implementation( UUxtFarPointerComponent * Pointer ) override Public Attributes Documentation variable PressedFraction float PressedFraction = 0.5f; Fraction of the maximum travel distance at which the button will raise the pressed event. variable ReleasedFraction float ReleasedFraction = 0.2f; Fraction of the maximum travel distance at which a pressed button will raise the released event. variable RecoverySpeed float RecoverySpeed = 50; Button movement speed while recovering in Unreal units per second (uu/s) variable OnBeginFocus FUxtButtonBeginFocusDelegate OnBeginFocus; Event raised when a pointer starts focusing the button. WasFocused indicates if the button was already focused by another pointer. variable OnUpdateFocus FUxtButtonUpdateFocusDelegate OnUpdateFocus; Event raised when a focusing pointer updates. variable OnEndFocus FUxtButtonEndFocusDelegate OnEndFocus; Event raised when a pointer ends focusing the Pressable Button. IsFocused indicates if the Pressable Button is still focused by another pointer. variable OnBeginPoke FUxtButtonBeginPokeDelegate OnBeginPoke; Event raised when a pointer starts poking the Pressable Button. variable OnUpdatePoke FUxtButtonUpdatePokeDelegate OnUpdatePoke; Event raised while a pointer is poking the Pressable Button. variable OnEndPoke FUxtButtonEndPokeDelegate OnEndPoke; Event raised when a pointer ends poking the Pressable Button. variable OnButtonPressed FUxtButtonPressedDelegate OnButtonPressed; Event raised when the button reaches the pressed distance. variable OnButtonReleased FUxtButtonReleasedDelegate OnButtonReleased; Event raised when the a pressed button reaches the released distance. variable OnButtonEnabled FUxtButtonEnabledDelegate OnButtonEnabled; Event raised when the button is enabled. variable OnButtonDisabled FUxtButtonDisabledDelegate OnButtonDisabled; Event raised when the button is disabled. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_uxt_fixed_rotation_to_user_constraint.html": {
    "href": "api/_u_uxt_fixed_rotation_to_user_constraint.html",
    "title": "MRTK Unreal API Reference UUxtFixedRotationToUserConstraint | UXT Documentation",
    "keywords": "UUxtFixedRotationToUserConstraint Component for fixing the rotation of a manipulated object relative to the user Usage: Attach to actor that the constraint should be applied to. class UUxtFixedRotationToUserConstraint; Header #include <Interactions/Constraints/UxtFixedRotationToUserConstraint.h> Inheritance Inherits from UUxtTransformConstraint , UActorComponent Public Functions Name virtual void Initialize (const FTransform & WorldPose) override virtual EUxtTransformMode GetConstraintType () const override virtual void ApplyConstraint (FTransform & Transform) const override Public Attributes Name bool bExcludeRoll Additional inherited members Public Attributes inherited from UUxtTransformConstraint Name int32 HandType int32 InteractionMode Protected Attributes inherited from UUxtTransformConstraint Name FTransform WorldPoseOnManipulationStart Public Functions Documentation function Initialize virtual void Initialize( const FTransform & WorldPose ) override Reimplements : UUxtTransformConstraint::Initialize Intended to be called on manipulation started function GetConstraintType virtual EUxtTransformMode GetConstraintType() const override Reimplements : UUxtTransformConstraint::GetConstraintType Enabled manipulation modes. function ApplyConstraint virtual void ApplyConstraint( FTransform & Transform ) const override Reimplements : UUxtTransformConstraint::ApplyConstraint Applies constraints to transforms during manipulation Public Attributes Documentation variable bExcludeRoll bool bExcludeRoll = true; Should roll be excluded from locking to the users orientation Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_u_uxt_far_beam_component.html": {
    "href": "api/_u_uxt_far_beam_component.html",
    "title": "MRTK Unreal API Reference UUxtFarBeamComponent | UXT Documentation",
    "keywords": "UUxtFarBeamComponent When added to an actor with a far pointer, this component displays a beam from the pointer ray start to the current hit point. class UUxtFarBeamComponent; Header #include <Controls/UxtFarBeamComponent.h> Inheritance Inherits from USplineMeshComponent Public Functions Name UUxtFarBeamComponent () virtual void BeginPlay () override virtual void EndPlay (const EEndPlayReason::Type EndPlayReason) override virtual void TickComponent (float DeltaTime, ELevelTick TickType, FActorComponentTickFunction * ThisTickFunction) override void SetBeamMaterial (UMaterial * NewMaterial) Public Attributes Name float HoverDistance Public Functions Documentation function UUxtFarBeamComponent UUxtFarBeamComponent() function BeginPlay virtual void BeginPlay() override function EndPlay virtual void EndPlay( const EEndPlayReason::Type EndPlayReason ) override function TickComponent virtual void TickComponent( float DeltaTime, ELevelTick TickType, FActorComponentTickFunction * ThisTickFunction ) override function SetBeamMaterial void SetBeamMaterial( UMaterial * NewMaterial ) Public Attributes Documentation variable HoverDistance float HoverDistance = 0.5f; Distance over the hit surface to place beam end at. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_i_uxt_far_target.html": {
    "href": "api/_i_uxt_far_target.html",
    "title": "MRTK Unreal API Reference IUxtFarTarget | UXT Documentation",
    "keywords": "IUxtFarTarget Interface to implement to enable far interaction for given primitives. class IUxtFarTarget; Header #include <UxtFarTarget.h> Inheritance Inherited by UUxtGrabTargetComponent , UUxtPinchSliderComponent , UUxtPressableButtonComponent , UUxtTapToPlaceComponent , UUxtTouchableVolumeComponent , UUxtWidgetComponent Public Functions Name bool IsFarFocusable (const UPrimitiveComponent * Primitive) const Public Functions Documentation function IsFarFocusable bool IsFarFocusable( const UPrimitiveComponent * Primitive ) const Returns true if the given primitive should be considerered a valid focus target. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_f_uxt_tooltip_spawner_component_visualizer.html": {
    "href": "api/_f_uxt_tooltip_spawner_component_visualizer.html",
    "title": "MRTK Unreal API Reference FUxtTooltipSpawnerComponentVisualizer | UXT Documentation",
    "keywords": "FUxtTooltipSpawnerComponentVisualizer class used to create a representation of the tooltip spawner which is a preview of the spawned widget. class FUxtTooltipSpawnerComponentVisualizer; Header #include <UxtTooltipSpawnerComponentVisualizer.h> Inheritance Inherits from FComponentVisualizer Updated on 23 August 2021 at 12:07:13 Coordinated Universal Time"
  },
  "api/_i_uxt_grab_target.html": {
    "href": "api/_i_uxt_grab_target.html",
    "title": "MRTK Unreal API Reference IUxtGrabTarget | UXT Documentation",
    "keywords": "IUxtGrabTarget Interface to implement to enable grab interaction for given primitives. class IUxtGrabTarget; Header #include <UxtGrabTarget.h> Inheritance Inherited by UUxtGrabTargetComponent , UUxtPinchSliderComponent Public Functions Name bool IsGrabFocusable (const UPrimitiveComponent * Primitive) const Public Functions Documentation function IsGrabFocusable bool IsGrabFocusable( const UPrimitiveComponent * Primitive ) const Returns true if the given primitive should be considerered a valid focus target. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_f_x_r_simulation_state.html": {
    "href": "api/_f_x_r_simulation_state.html",
    "title": "MRTK Unreal API Reference FXRSimulationState | UXT Documentation",
    "keywords": "FXRSimulationState Simulation state for head movement and hand gestures. struct FXRSimulationState; Header #include <XRSimulationState.h> Public Functions Name FXRSimulationState () void Reset () void ResetHandState (EControllerHand Hand) bool IsHandVisible (EControllerHand Hand) const void SetHandVisibility (EControllerHand Hand, bool bIsVisible) bool IsHandControlled (EControllerHand Hand) const bool IsAnyHandControlled () const TArray< EControllerHand > GetControlledHands () const bool SetHandControlEnabled (EControllerHand Hand, bool bEnabled) void GetTargetHandTransform (EControllerHand Hand, FTransform & TargetTransform, bool & bAnimate) const void AddHandInput (EAxis::Type Axis, float Value) void AddHandMovementInput (EAxis::Type TranslationAxis, float Value) void AddHandRotationInput (EAxis::Type RotationAxis, float Value) void SetDefaultHandLocation (EControllerHand Hand) void SetDefaultHandRotation (EControllerHand Hand) FName GetTargetPose (EControllerHand Hand) const void SetTargetPose (EControllerHand Hand, FName PoseName) void ResetTargetPose (EControllerHand Hand) void TogglePoseForControlledHands (FName PoseName) bool HasGripToWristTransform (EControllerHand Hand) const FTransform GetGripToWristTransform (EControllerHand Hand) const void SetGripToWristTransform (EControllerHand Hand, const FTransform & GripToWristTransform) void ClearGripToWristTransform (EControllerHand Hand) Public Attributes Name EXRSimulationHandMode HandInputMode FVector RelativeHeadPosition FQuat RelativeHeadOrientation Public Functions Documentation function FXRSimulationState FXRSimulationState() function Reset void Reset() Reset to default. function ResetHandState void ResetHandState( EControllerHand Hand ) Reset hand state to default. function IsHandVisible bool IsHandVisible( EControllerHand Hand ) const True if the hand is currently visible. function SetHandVisibility void SetHandVisibility( EControllerHand Hand, bool bIsVisible ) Set the hand visibility. function IsHandControlled bool IsHandControlled( EControllerHand Hand ) const True if the hand is currently controlled by the user. function IsAnyHandControlled bool IsAnyHandControlled() const True if any hand is currently controlled by the user. function GetControlledHands TArray< EControllerHand > GetControlledHands() const Find all hands that are currently controlled. function SetHandControlEnabled bool SetHandControlEnabled( EControllerHand Hand, bool bEnabled ) Enable control of a simulated hand by the user. Returns true if hand control was successfully changed. function GetTargetHandTransform void GetTargetHandTransform( EControllerHand Hand, FTransform & TargetTransform, bool & bAnimate ) const Get the current target transform for a hand. If bAnimate is true then the transform should be blended over time, otherwise the target transform should be applied immediately. function AddHandInput void AddHandInput( EAxis::Type Axis, float Value ) Add hand movement or rotation, depending on hand input mode. function AddHandMovementInput void AddHandMovementInput( EAxis::Type TranslationAxis, float Value ) Add hand movement input along a local axis to all controlled hands. function AddHandRotationInput void AddHandRotationInput( EAxis::Type RotationAxis, float Value ) Add hand rotation input about a local axis to all controlled hands. function SetDefaultHandLocation void SetDefaultHandLocation( EControllerHand Hand ) Set the mesh for the given hand to the default location. function SetDefaultHandRotation void SetDefaultHandRotation( EControllerHand Hand ) Set the rotation for the given hand to the rest rotation. function GetTargetPose FName GetTargetPose( EControllerHand Hand ) const Get the current animation pose of a hand. If the hand is currently controlled by user input it will use the current target pose, otherwise the default pose is used. function SetTargetPose void SetTargetPose( EControllerHand Hand, FName PoseName ) Set the target animation pose for a hand. function ResetTargetPose void ResetTargetPose( EControllerHand Hand ) Reset the default target animation pose for a hand. function TogglePoseForControlledHands void TogglePoseForControlledHands( FName PoseName ) Toggle the target pose for all currently controlled hands. If all hands use the target pose already, all hands will reset to the default pose. If any hand does NOT use the target pose already, all hands will use it. function HasGripToWristTransform bool HasGripToWristTransform( EControllerHand Hand ) const True if grip transform offset has been set. function GetGripToWristTransform FTransform GetGripToWristTransform( EControllerHand Hand ) const Return : Valid if the grip transform offset has been set. Get the frozen grip transform offset from the wrist. function SetGripToWristTransform void SetGripToWristTransform( EControllerHand Hand, const FTransform & GripToWristTransform ) Set the frozen grip transform offset from the wrist. function ClearGripToWristTransform void ClearGripToWristTransform( EControllerHand Hand ) Clear the frozen grip transform offset from the wrist. Public Attributes Documentation variable HandInputMode EXRSimulationHandMode FXRSimulationState::HandInputMode EXRSimulationHandMode HandInputMode = EXRSimulationHandMode::Movement; If true, input will be interpreted as hand rotation instead of movement. variable RelativeHeadPosition FVector FXRSimulationState::RelativeHeadPosition FVector RelativeHeadPosition = FVector::ZeroVector; Head position relative to the character controller. variable RelativeHeadOrientation FQuat FXRSimulationState::RelativeHeadOrientation FQuat RelativeHeadOrientation = FQuat::Identity; Head orientation relative to the character controller. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_f_x_r_simulation_hand_pose_key_mapping.html": {
    "href": "api/_f_x_r_simulation_hand_pose_key_mapping.html",
    "title": "MRTK Unreal API Reference FXRSimulationHandPoseKeyMapping | UXT Documentation",
    "keywords": "FXRSimulationHandPoseKeyMapping struct FXRSimulationHandPoseKeyMapping; Public Attributes Name EControllerHand Hand FName HandPose FKey Key Public Attributes Documentation variable Hand EControllerHand FXRSimulationHandPoseKeyMapping::Hand EControllerHand Hand; Hand that triggers the key. variable HandPose FName FXRSimulationHandPoseKeyMapping::HandPose FName HandPose; Simulated hand pose name. variable Key FKey FXRSimulationHandPoseKeyMapping::Key FKey Key; Key that is triggered by the hand pose. Updated on 23 August 2021 at 12:07:14 Coordinated Universal Time"
  },
  "api/_f_u_x_tools_shaders_module.html": {
    "href": "api/_f_u_x_tools_shaders_module.html",
    "title": "MRTK Unreal API Reference FUXToolsShadersModule | UXT Documentation",
    "keywords": "FUXToolsShadersModule Module for shader specific functionality. class FUXToolsShadersModule; Header #include <UXToolsShaders.h> Inheritance Inherits from IModuleInterface Public Functions Name virtual void StartupModule () override virtual void ShutdownModule () override Public Functions Documentation function StartupModule virtual void StartupModule() override IModuleInterface implementation function ShutdownModule virtual void ShutdownModule() override Updated on 23 August 2021 at 12:07:13 Coordinated Universal Time"
  }
}